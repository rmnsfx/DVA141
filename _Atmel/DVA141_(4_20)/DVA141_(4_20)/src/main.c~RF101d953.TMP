/**
 * \file
 *
 * \brief Empty user application template
 *
 */

/**
 * \mainpage User Application template doxygen documentation
 *
 * \par Empty user application template
 *
 * Bare minimum empty user application template
 *
 * \par Content
 *
 * -# Include the ASF header files (through asf.h)
 * -# Minimal main function that starts with a call to system_init()
 * -# "Insert application code here" comment
 *
 */

/*
 * Include header files for all drivers that have been imported from
 * Atmel Software Framework (ASF).
 */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */

#include <asf.h>

static uint8_t buffer[20] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13
};


/******************************************************************************/
/* AD5421                                                                    */
/******************************************************************************/
/* Registers */
#define AD5421_REG_DAC_DATA				0x1
#define AD5421_REG_CTRL					0x2
#define AD5421_REG_OFFSET				0x3
#define AD5421_REG_GAIN					0x4
/* load dac and fault shared the same register number. Writing to it will cause
 * a dac load command, reading from it will return the fault status register */
#define AD5421_REG_LOAD_DAC				0x5
#define AD5421_REG_FAULT				0x5
#define AD5421_REG_FORCE_ALARM_CURRENT	0x6
#define AD5421_REG_RESET				0x7
#define AD5421_REG_START_CONVERSION		0x8
#define AD5421_REG_NOOP					0x9

#define AD5421_CTRL_WATCHDOG_TIME(x)	(((x) & 0x7) << 13)
#define AD5421_CTRL_WATCHDOG_DISABLE	(1 << 12)
#define AD5421_CTRL_AUTO_FAULT_READBACK	(1 << 11)
#define AD5421_CTRL_MIN_CURRENT			(1 << 9)
#define AD5421_CTRL_ADC_SOURCE_TEMP		(1 << 8)
#define AD5421_CTRL_ADC_ENABLE			(1 << 7)
#define AD5421_CTRL_PWR_DOWN_INT_VREF	(1 << 6)

#define AD5421_FAULT_SPI				(1 << 15)
#define AD5421_FAULT_PEC				(1 << 14)
#define AD5421_FAULT_OVER_CURRENT		(1 << 13)
#define AD5421_FAULT_UNDER_CURRENT		(1 << 12)
#define AD5421_FAULT_TEMP_OVER_140		(1 << 11)
#define AD5421_FAULT_TEMP_OVER_100		(1 << 10)
#define AD5421_FAULT_UNDER_VOLTAGE_6V	(1 << 9)
#define AD5421_FAULT_UNDER_VOLTAGE_12V	(1 << 8)

#define AD5421_READ						(1 << 7)



static void init_gpio(void)
{
	
	struct port_config pin;
	port_get_config_defaults(&pin);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA16, &pin);
	port_pin_set_output_level(PIN_PA16, 0);
	pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA17, &pin);
	port_pin_set_output_level(PIN_PA17, 0);
	pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA18, &pin);
	port_pin_set_output_level(PIN_PA18, 0);
	
	pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA19, &pin);
	
	//pin.direction = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PA22, &pin);
	//port_pin_set_output_level(PIN_PA22, 0);
	
}

static void clock_output(void)
{
	/* Configure a GPIO pin as the CPU clock output */
	struct system_pinmux_config clk_out_pin;
	system_pinmux_get_config_defaults(&clk_out_pin);
	clk_out_pin.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
	clk_out_pin.mux_position = MUX_PA22H_GCLK_IO6;
	system_pinmux_pin_set_config(PIN_PA22H_GCLK_IO6, &clk_out_pin);
}


struct spi_module spi_master_instance;
struct spi_slave_inst slave;

void configure_spi_master(void);
void configure_spi_master(void)
{
	//! [config]
	struct spi_config config_spi_master;
	//! [config]
	//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
	//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = PIN_PA18;
	//! [ss_pin]
	//! [slave_init]
	spi_attach_slave(&slave, &slave_dev_config);
	//! [slave_init]
	/* Configure, initialize and enable SERCOM SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
	//! [conf_defaults]
	//! [mux_setting]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_C;
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
	//! [sck]
	
		
	config_spi_master.mode             = SPI_MODE_MASTER;
	config_spi_master.data_order       = SPI_DATA_ORDER_MSB;
	config_spi_master.transfer_mode    = SPI_TRANSFER_MODE_2;	
	config_spi_master.character_size   = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master.run_in_standby   = false;
	config_spi_master.receiver_enable  = true;	
	config_spi_master.generator_source = GCLK_GENERATOR_1;
	config_spi_master.mode_specific.master.baudrate = 100000;
	
	//! [init]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
	//! [init]

	//! [enable]
	spi_enable(&spi_master_instance);
	//! [enable]

}

void AD5421_SetRegisterValue(unsigned char regAddress, unsigned short regValue)
{
	volatile unsigned char statuscode;
	unsigned char data[] = {0x00, 0x00, 0x00};		
	
	data[0] = regAddress;
	data[1] = (unsigned char)((regValue & 0xFF00) >> 8);
	data[2] = (unsigned char)((regValue & 0x00FF) >> 0);
	spi_select_slave(&spi_master_instance, &slave, true);
	//SPI_Write(data,3); 
	
	statuscode = spi_write_buffer_wait(&spi_master_instance, data, 3);
	
	spi_select_slave(&spi_master_instance, &slave, false);
}

unsigned long AD5421_GetRegisterValue(unsigned char regAddress)
{
	unsigned char data[] = {0x00, 0x00, 0x00};	
	unsigned long receivedData = 0x00;
	volatile unsigned char statuscode;
	
	data[0] = regAddress | AD5421_READ;
	spi_select_slave(&spi_master_instance, &slave, true);
	//SPI_Write(data,3);
	statuscode = spi_write_buffer_wait(&spi_master_instance, data, 3);
	spi_select_slave(&spi_master_instance, &slave, false);
	
	delay_us(30);
	
	spi_select_slave(&spi_master_instance, &slave, true);
	//SPI_Read(data,3);
	statuscode = spi_read_buffer_wait(&spi_master_instance, data, 3, 0);
	spi_select_slave(&spi_master_instance, &slave, false);
	receivedData += (data[1] << 8);
	receivedData += (data[2] << 0);

	return receivedData;
}

unsigned char AD5421_Init(void)
{
	volatile unsigned char status = 0x1;
	
	//SPI_Init(0, 1000000, 1, 1);
	// setup
	AD5421_SetRegisterValue(AD5421_REG_CTRL,
	AD5421_CTRL_WATCHDOG_DISABLE |
	AD5421_CTRL_ADC_SOURCE_TEMP |
	AD5421_CTRL_ADC_ENABLE
	);
	if(AD5421_GetRegisterValue( AD5421_REG_CTRL) == 0x1180)
	{
		status = 0x0;
	}
	
	return (status);
}




int main (void)
{
	volatile unsigned char temp;
	volatile unsigned char temp2;
	
	system_init();
	
	init_gpio();

	clock_output();
	
	delay_init();
	
	configure_spi_master();
		
	//temp = AD5421_Init();
	
	
	
	while(1)
	{
	
		//spi_select_slave(&spi_master_instance, &slave, true);
		//spi_write_buffer_wait(&spi_master_instance, buffer, 20);
		//spi_select_slave(&spi_master_instance, &slave, false);
		
		AD5421_SetRegisterValue(AD5421_REG_CTRL, 0);
		
		delay_s(2);
		
		
		
	}
}
