
DVA141_(4_20).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  000022c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        000000a0  30000000  30000000  00018000  2**4
                  ALLOC
  3 .bss          00000448  20000020  000022f0  00010020  2**4
                  ALLOC
  4 .stack        00002000  20000468  00002738  00010020  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010044  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002587a  00000000  00000000  0001009f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003cde  00000000  00000000  00035919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007366  00000000  00000000  000395f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000838  00000000  00000000  0004095d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000978  00000000  00000000  00041195  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001de5b  00000000  00000000  00041b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010775  00000000  00000000  0005f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099794  00000000  00000000  000700dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001498  00000000  00000000  00109874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002468 	.word	0x20002468
       4:	00001b05 	.word	0x00001b05
       8:	00001b01 	.word	0x00001b01
       c:	00001b01 	.word	0x00001b01
	...
      2c:	00000915 	.word	0x00000915
	...
      38:	0000092d 	.word	0x0000092d
      3c:	00000971 	.word	0x00000971
      40:	00001b01 	.word	0x00001b01
      44:	00001b01 	.word	0x00001b01
      48:	00001b01 	.word	0x00001b01
      4c:	000003ed 	.word	0x000003ed
      50:	00001b01 	.word	0x00001b01
      54:	000002f5 	.word	0x000002f5
      58:	00001b01 	.word	0x00001b01
      5c:	00001b01 	.word	0x00001b01
      60:	000011c1 	.word	0x000011c1
      64:	000011d1 	.word	0x000011d1
      68:	000011e1 	.word	0x000011e1
      6c:	000011f1 	.word	0x000011f1
      70:	00001201 	.word	0x00001201
      74:	00001211 	.word	0x00001211
      78:	0000081d 	.word	0x0000081d
      7c:	0000082d 	.word	0x0000082d
      80:	0000083d 	.word	0x0000083d
      84:	000008a9 	.word	0x000008a9
      88:	000008b9 	.word	0x000008b9
	...
      94:	000008c9 	.word	0x000008c9
      98:	00001b01 	.word	0x00001b01
      9c:	00001b01 	.word	0x00001b01
      a0:	00001b01 	.word	0x00001b01
      a4:	00001b01 	.word	0x00001b01
      a8:	00001b01 	.word	0x00001b01
      ac:	00001b01 	.word	0x00001b01
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	000022c8 	.word	0x000022c8

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	000022c8 	.word	0x000022c8
     108:	20000024 	.word	0x20000024
     10c:	000022c8 	.word	0x000022c8
     110:	00000000 	.word	0x00000000

00000114 <AD5421_SetRegisterValue>:
#include "ad5421.h"
#include "main.h"


void AD5421_SetRegisterValue(uint8_t regAddress, uint16_t regValue)
{
     114:	b500      	push	{lr}
     116:	b083      	sub	sp, #12
	//volatile unsigned char statuscode;
	uint8_t data[] = {0x00, 0x00, 0x00};
	
	data[0] = regAddress;
     118:	ab01      	add	r3, sp, #4
     11a:	7018      	strb	r0, [r3, #0]
	data[1] = ((regValue & 0xFF00) >> 8);
     11c:	0a0a      	lsrs	r2, r1, #8
     11e:	705a      	strb	r2, [r3, #1]
	data[2] = ((regValue & 0x00FF) >> 0);
     120:	7099      	strb	r1, [r3, #2]
	
	SPI_Write_AD5421(data);
     122:	1c18      	adds	r0, r3, #0
     124:	4b01      	ldr	r3, [pc, #4]	; (12c <AD5421_SetRegisterValue+0x18>)
     126:	4798      	blx	r3
}
     128:	b003      	add	sp, #12
     12a:	bd00      	pop	{pc}
     12c:	00001d69 	.word	0x00001d69

00000130 <AD5421_GetRegisterValue>:

uint16_t AD5421_GetRegisterValue(uint8_t regAddress)
{
     130:	b510      	push	{r4, lr}
     132:	b082      	sub	sp, #8
	uint8_t data[] = {0x00, 0x00, 0x00};
     134:	ac01      	add	r4, sp, #4
     136:	2300      	movs	r3, #0
     138:	7063      	strb	r3, [r4, #1]
     13a:	70a3      	strb	r3, [r4, #2]
	uint16_t receivedData = 0x00;
	//volatile unsigned char statuscode;
	
	data[0] = regAddress | AD5421_READ;
     13c:	3b80      	subs	r3, #128	; 0x80
     13e:	4318      	orrs	r0, r3
     140:	7020      	strb	r0, [r4, #0]
	
	SPI_Write_AD5421(data);
     142:	1c20      	adds	r0, r4, #0
     144:	4b07      	ldr	r3, [pc, #28]	; (164 <AD5421_GetRegisterValue+0x34>)
     146:	4798      	blx	r3
	
	delay_us(30);
     148:	201e      	movs	r0, #30
     14a:	4b07      	ldr	r3, [pc, #28]	; (168 <AD5421_GetRegisterValue+0x38>)
     14c:	4798      	blx	r3
	
	SPI_Read_AD5421(data);
     14e:	1c20      	adds	r0, r4, #0
     150:	4b06      	ldr	r3, [pc, #24]	; (16c <AD5421_GetRegisterValue+0x3c>)
     152:	4798      	blx	r3
	
	receivedData += (data[1] << 8);
     154:	7860      	ldrb	r0, [r4, #1]
     156:	0200      	lsls	r0, r0, #8
	receivedData += (data[2] << 0);
     158:	78a3      	ldrb	r3, [r4, #2]
     15a:	1818      	adds	r0, r3, r0
     15c:	b280      	uxth	r0, r0

	return receivedData;
}
     15e:	b002      	add	sp, #8
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	00001d69 	.word	0x00001d69
     168:	0000125d 	.word	0x0000125d
     16c:	00001d8d 	.word	0x00001d8d

00000170 <AD5421_Init>:

uint16_t AD5421_Init(void)
{
     170:	b508      	push	{r3, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     172:	2280      	movs	r2, #128	; 0x80
     174:	02d2      	lsls	r2, r2, #11
     176:	4b08      	ldr	r3, [pc, #32]	; (198 <AD5421_Init+0x28>)
     178:	619a      	str	r2, [r3, #24]
	uint16_t status = 1;
	
	port_pin_set_output_level(PIN_PA18, 1);

	AD5421_SetRegisterValue(AD5421_REG_CTRL,
     17a:	2002      	movs	r0, #2
     17c:	218c      	movs	r1, #140	; 0x8c
     17e:	0149      	lsls	r1, r1, #5
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <AD5421_Init+0x2c>)
     182:	4798      	blx	r3
	//AD5421_CTRL_MIN_CURRENT	|
	AD5421_CTRL_ADC_SOURCE_TEMP	|
	AD5421_CTRL_ADC_ENABLE
	);
	
	if(AD5421_GetRegisterValue(AD5421_REG_CTRL) == 0x1280)
     184:	2002      	movs	r0, #2
     186:	4b06      	ldr	r3, [pc, #24]	; (1a0 <AD5421_Init+0x30>)
     188:	4798      	blx	r3
     18a:	4b06      	ldr	r3, [pc, #24]	; (1a4 <AD5421_Init+0x34>)
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
     190:	1e43      	subs	r3, r0, #1
     192:	4198      	sbcs	r0, r3
	{
		status = 0x0;
	}
	
	return (status);
     194:	b280      	uxth	r0, r0
}
     196:	bd08      	pop	{r3, pc}
     198:	40002800 	.word	0x40002800
     19c:	00000115 	.word	0x00000115
     1a0:	00000131 	.word	0x00000131
     1a4:	ffffed80 	.word	0xffffed80

000001a8 <ADXL345_GetRegisterValue>:
//
    //return registerValue;
//}

unsigned char ADXL345_GetRegisterValue(uint8_t regAddress)
{
     1a8:	b510      	push	{r4, lr}
     1aa:	b082      	sub	sp, #8
	uint8_t data[] = {0x00, 0x00};
     1ac:	ac01      	add	r4, sp, #4
     1ae:	2300      	movs	r3, #0
     1b0:	7063      	strb	r3, [r4, #1]
	uint8_t receivedData = 0x00;
	
	data[0] = ADXL345_SPI_READ | regAddress;
     1b2:	3b80      	subs	r3, #128	; 0x80
     1b4:	4318      	orrs	r0, r3
     1b6:	7020      	strb	r0, [r4, #0]
		
	SPI_Read_ADXL(data);
     1b8:	1c20      	adds	r0, r4, #0
     1ba:	4b02      	ldr	r3, [pc, #8]	; (1c4 <ADXL345_GetRegisterValue+0x1c>)
     1bc:	4798      	blx	r3
	
	receivedData = data[1];
     1be:	7860      	ldrb	r0, [r4, #1]
	
	//receivedData += (data[0] << 8);
	//receivedData += (data[1] << 0);

	return receivedData;
}
     1c0:	b002      	add	sp, #8
     1c2:	bd10      	pop	{r4, pc}
     1c4:	00001dd9 	.word	0x00001dd9

000001c8 <ADXL345_SetRegisterValue>:
    //SPI_Write_ADXL(dataBuffer);
    //
//}

void ADXL345_SetRegisterValue(uint8_t regAddress, uint8_t regValue)
{
     1c8:	b500      	push	{lr}
     1ca:	b083      	sub	sp, #12
	
	uint8_t data[] = {0x00, 0x00};
	
	data[0] = regAddress;
     1cc:	ab01      	add	r3, sp, #4
     1ce:	7018      	strb	r0, [r3, #0]
	data[1] = regValue;
     1d0:	7059      	strb	r1, [r3, #1]
	
	//data[1] = ((regValue & 0xFF00) >> 8);
	//data[2] = ((regValue & 0x00FF) >> 0);
	
	SPI_Write_ADXL(data);
     1d2:	1c18      	adds	r0, r3, #0
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <ADXL345_SetRegisterValue+0x14>)
     1d6:	4798      	blx	r3
}
     1d8:	b003      	add	sp, #12
     1da:	bd00      	pop	{pc}
     1dc:	00001db5 	.word	0x00001db5

000001e0 <ADXL345_SetPowerMode>:
 *				 0x1 - measure mode.
 *
 * @return None.
*******************************************************************************/
void ADXL345_SetPowerMode(unsigned char pwrMode)
{
     1e0:	b510      	push	{r4, lr}
     1e2:	1c04      	adds	r4, r0, #0
    unsigned char oldPowerCtl = 0;
    unsigned char newPowerCtl = 0;
    
    oldPowerCtl = ADXL345_GetRegisterValue(ADXL345_POWER_CTL);
     1e4:	202d      	movs	r0, #45	; 0x2d
     1e6:	4b06      	ldr	r3, [pc, #24]	; (200 <ADXL345_SetPowerMode+0x20>)
     1e8:	4798      	blx	r3
    newPowerCtl = oldPowerCtl & ~ADXL345_PCTL_MEASURE;
     1ea:	2308      	movs	r3, #8
     1ec:	1c01      	adds	r1, r0, #0
     1ee:	4399      	bics	r1, r3
    newPowerCtl = newPowerCtl | (pwrMode * ADXL345_PCTL_MEASURE);
     1f0:	00e4      	lsls	r4, r4, #3
     1f2:	430c      	orrs	r4, r1
    ADXL345_SetRegisterValue(ADXL345_POWER_CTL, newPowerCtl);
     1f4:	b2e1      	uxtb	r1, r4
     1f6:	202d      	movs	r0, #45	; 0x2d
     1f8:	4b02      	ldr	r3, [pc, #8]	; (204 <ADXL345_SetPowerMode+0x24>)
     1fa:	4798      	blx	r3
}
     1fc:	bd10      	pop	{r4, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	000001a9 	.word	0x000001a9
     204:	000001c9 	.word	0x000001c9

00000208 <ADXL345_Init>:
 *                                     ADXL345 part is not present.
 *                                 0 - I2C/SPI peripheral is initialized and 
 *                                     ADXL345 part is present.
*******************************************************************************/
char ADXL345_Init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
     20a:	b082      	sub	sp, #8
    volatile unsigned char status = 0;
     20c:	466b      	mov	r3, sp
     20e:	1dde      	adds	r6, r3, #7
     210:	2300      	movs	r3, #0
     212:	7033      	strb	r3, [r6, #0]
     214:	2240      	movs	r2, #64	; 0x40
     216:	4b18      	ldr	r3, [pc, #96]	; (278 <ADXL345_Init+0x70>)
     218:	619a      	str	r2, [r3, #24]
	
	
	//RESETTING----------------------------------------------------------------

	//Set power to measure mode
	ADXL345_SetPowerMode(0x0);
     21a:	2000      	movs	r0, #0
     21c:	4b17      	ldr	r3, [pc, #92]	; (27c <ADXL345_Init+0x74>)
     21e:	4798      	blx	r3
	delay_us(30);
     220:	201e      	movs	r0, #30
     222:	4c17      	ldr	r4, [pc, #92]	; (280 <ADXL345_Init+0x78>)
     224:	47a0      	blx	r4


	//Reset Interrupt Enable
	ADXL345_SetRegisterValue(ADXL345_INT_ENABLE, 0x0);
     226:	202e      	movs	r0, #46	; 0x2e
     228:	2100      	movs	r1, #0
     22a:	4d16      	ldr	r5, [pc, #88]	; (284 <ADXL345_Init+0x7c>)
     22c:	47a8      	blx	r5
	delay_us(30);
     22e:	201e      	movs	r0, #30
     230:	47a0      	blx	r4
	
	
	//SETTING------------------------------------------------------------------	
	
	//Data rate 3200 Hz
	ADXL345_SetRegisterValue(ADXL345_BW_RATE, 0xF);
     232:	202c      	movs	r0, #44	; 0x2c
     234:	210f      	movs	r1, #15
     236:	47a8      	blx	r5
	delay_us(30);
     238:	201e      	movs	r0, #30
     23a:	47a0      	blx	r4
	
	//Interrupt map - INT1
	ADXL345_SetRegisterValue(ADXL345_INT_MAP, 0x0);
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	2100      	movs	r1, #0
     240:	47a8      	blx	r5
	delay_us(30);
     242:	201e      	movs	r0, #30
     244:	47a0      	blx	r4
			
	//Interrupt pins is active low
	ADXL345_SetRegisterValue(ADXL345_DATA_FORMAT, ADXL345_INT_INVERT);
     246:	2031      	movs	r0, #49	; 0x31
     248:	2120      	movs	r1, #32
     24a:	47a8      	blx	r5
	//ADXL345_SetRegisterValue(ADXL345_DATA_FORMAT, 0x0);
	delay_us(30);	
     24c:	201e      	movs	r0, #30
     24e:	47a0      	blx	r4
	
	//FIFO Stream mode
	ADXL345_SetRegisterValue(ADXL345_FIFO_CTL, ADXL345_FIFO_MODE(ADXL345_FIFO_STREAM) | ADXL345_SAMPLES(31));
     250:	2038      	movs	r0, #56	; 0x38
     252:	219f      	movs	r1, #159	; 0x9f
     254:	47a8      	blx	r5
	//ADXL345_SetRegisterValue(ADXL345_FIFO_CTL, ADXL345_FIFO_MODE(ADXL345_FIFO_TRIGGER) | ADXL345_SAMPLES(32));
	delay_us(30);
     256:	201e      	movs	r0, #30
     258:	47a0      	blx	r4
		
	//Interrupt Enable
	ADXL345_SetRegisterValue(ADXL345_INT_ENABLE, ADXL345_DATA_READY);
     25a:	202e      	movs	r0, #46	; 0x2e
     25c:	2180      	movs	r1, #128	; 0x80
     25e:	47a8      	blx	r5
	//ADXL345_SetRegisterValue(ADXL345_INT_ENABLE, ADXL345_WATERMARK);
	delay_us(30);
     260:	201e      	movs	r0, #30
     262:	47a0      	blx	r4

	//Set power to measure mode	
	ADXL345_SetRegisterValue(ADXL345_POWER_CTL, 0x08);
     264:	202d      	movs	r0, #45	; 0x2d
     266:	2108      	movs	r1, #8
     268:	47a8      	blx	r5
	//ADXL345_SetPowerMode(0x1);
	delay_us(30);
     26a:	201e      	movs	r0, #30
     26c:	47a0      	blx	r4
    //}
    //
	//selectedRange = 2; // Measurement Range: +/- 2g (reset default).
    //fullResolutionSet = 0;

    return status;
     26e:	7830      	ldrb	r0, [r6, #0]
     270:	b2c0      	uxtb	r0, r0
}
     272:	b002      	add	sp, #8
     274:	bd70      	pop	{r4, r5, r6, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	40002800 	.word	0x40002800
     27c:	000001e1 	.word	0x000001e1
     280:	0000125d 	.word	0x0000125d
     284:	000001c9 	.word	0x000001c9

00000288 <ADXL345_GetX>:
 *
 * @return None.
*******************************************************************************/

float ADXL345_GetX()
{
     288:	b538      	push	{r3, r4, r5, lr}
	short readBuffer0 = 0;
	short readBuffer1 = 0;
	short data_out = 0;
	
	readBuffer0 = ADXL345_GetRegisterValue(ADXL345_DATAX0);
     28a:	2032      	movs	r0, #50	; 0x32
     28c:	4d05      	ldr	r5, [pc, #20]	; (2a4 <ADXL345_GetX+0x1c>)
     28e:	47a8      	blx	r5
     290:	1c04      	adds	r4, r0, #0
	readBuffer1 = ADXL345_GetRegisterValue(ADXL345_DATAX1);
     292:	2033      	movs	r0, #51	; 0x33
     294:	47a8      	blx	r5
	
	data_out = (readBuffer1 << 8) + readBuffer0;
     296:	0200      	lsls	r0, r0, #8
     298:	1900      	adds	r0, r0, r4
	
	//return (data_out * ADXL345_SCALE_FACTOR);
	return data_out;
     29a:	b200      	sxth	r0, r0
     29c:	4b02      	ldr	r3, [pc, #8]	; (2a8 <ADXL345_GetX+0x20>)
     29e:	4798      	blx	r3
}
     2a0:	bd38      	pop	{r3, r4, r5, pc}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	000001a9 	.word	0x000001a9
     2a8:	000020e5 	.word	0x000020e5

000002ac <ADXL345_GetY>:


float ADXL345_GetY()
{
     2ac:	b538      	push	{r3, r4, r5, lr}
	short readBuffer0 = 0;
	short readBuffer1 = 0;
	short data_out = 0;
	
	readBuffer0 = ADXL345_GetRegisterValue(ADXL345_DATAY0);
     2ae:	2034      	movs	r0, #52	; 0x34
     2b0:	4d05      	ldr	r5, [pc, #20]	; (2c8 <ADXL345_GetY+0x1c>)
     2b2:	47a8      	blx	r5
     2b4:	1c04      	adds	r4, r0, #0
	readBuffer1 = ADXL345_GetRegisterValue(ADXL345_DATAY1);
     2b6:	2035      	movs	r0, #53	; 0x35
     2b8:	47a8      	blx	r5
	
	data_out = (readBuffer1 << 8) + readBuffer0;
     2ba:	0200      	lsls	r0, r0, #8
     2bc:	1900      	adds	r0, r0, r4
	
	//return (data_out * ADXL345_SCALE_FACTOR);
	return data_out;
     2be:	b200      	sxth	r0, r0
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <ADXL345_GetY+0x20>)
     2c2:	4798      	blx	r3
}
     2c4:	bd38      	pop	{r3, r4, r5, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	000001a9 	.word	0x000001a9
     2cc:	000020e5 	.word	0x000020e5

000002d0 <ADXL345_GetZ>:

float ADXL345_GetZ()
{
     2d0:	b538      	push	{r3, r4, r5, lr}
	short readBuffer0 = 0;
	short readBuffer1 = 0;
	short data_out = 0;
	
	readBuffer0 = ADXL345_GetRegisterValue(ADXL345_DATAZ0);
     2d2:	2036      	movs	r0, #54	; 0x36
     2d4:	4d05      	ldr	r5, [pc, #20]	; (2ec <ADXL345_GetZ+0x1c>)
     2d6:	47a8      	blx	r5
     2d8:	1c04      	adds	r4, r0, #0
	readBuffer1 = ADXL345_GetRegisterValue(ADXL345_DATAZ1);
     2da:	2037      	movs	r0, #55	; 0x37
     2dc:	47a8      	blx	r5
	
	data_out = (readBuffer1 << 8) + readBuffer0;
     2de:	0200      	lsls	r0, r0, #8
     2e0:	1900      	adds	r0, r0, r4
	
	//return (data_out * ADXL345_SCALE_FACTOR);
	return data_out;
     2e2:	b200      	sxth	r0, r0
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <ADXL345_GetZ+0x20>)
     2e6:	4798      	blx	r3
}
     2e8:	bd38      	pop	{r3, r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	000001a9 	.word	0x000001a9
     2f0:	000020e5 	.word	0x000020e5

000002f4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     2f4:	b508      	push	{r3, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <DMAC_Handler+0x98>)
     2f8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     2fa:	4a25      	ldr	r2, [pc, #148]	; (390 <DMAC_Handler+0x9c>)
     2fc:	8c13      	ldrh	r3, [r2, #32]
     2fe:	210f      	movs	r1, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     300:	400b      	ands	r3, r1
     302:	009b      	lsls	r3, r3, #2
     304:	4823      	ldr	r0, [pc, #140]	; (394 <DMAC_Handler+0xa0>)
     306:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     308:	7803      	ldrb	r3, [r0, #0]
     30a:	400b      	ands	r3, r1
     30c:	3130      	adds	r1, #48	; 0x30
     30e:	5453      	strb	r3, [r2, r1]
	isr = DMAC->CHINTFLAG.reg;
     310:	234e      	movs	r3, #78	; 0x4e
     312:	5cd2      	ldrb	r2, [r2, r3]
     314:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     316:	7803      	ldrb	r3, [r0, #0]
     318:	011b      	lsls	r3, r3, #4
     31a:	491f      	ldr	r1, [pc, #124]	; (398 <DMAC_Handler+0xa4>)
     31c:	18cb      	adds	r3, r1, r3
     31e:	8859      	ldrh	r1, [r3, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     320:	3350      	adds	r3, #80	; 0x50
     322:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     324:	1acb      	subs	r3, r1, r3
     326:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     328:	07d3      	lsls	r3, r2, #31
     32a:	d50d      	bpl.n	348 <DMAC_Handler+0x54>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     32c:	2101      	movs	r1, #1
     32e:	234e      	movs	r3, #78	; 0x4e
     330:	4a17      	ldr	r2, [pc, #92]	; (390 <DMAC_Handler+0x9c>)
     332:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     334:	3b3e      	subs	r3, #62	; 0x3e
     336:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     338:	7c03      	ldrb	r3, [r0, #16]
     33a:	07db      	lsls	r3, r3, #31
     33c:	d523      	bpl.n	386 <DMAC_Handler+0x92>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     33e:	6843      	ldr	r3, [r0, #4]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     340:	2b00      	cmp	r3, #0
     342:	d020      	beq.n	386 <DMAC_Handler+0x92>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     344:	4798      	blx	r3
     346:	e01e      	b.n	386 <DMAC_Handler+0x92>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     348:	0793      	lsls	r3, r2, #30
     34a:	d50d      	bpl.n	368 <DMAC_Handler+0x74>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     34c:	2102      	movs	r1, #2
     34e:	234e      	movs	r3, #78	; 0x4e
     350:	4a0f      	ldr	r2, [pc, #60]	; (390 <DMAC_Handler+0x9c>)
     352:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     354:	2300      	movs	r3, #0
     356:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     358:	7c03      	ldrb	r3, [r0, #16]
     35a:	079b      	lsls	r3, r3, #30
     35c:	d513      	bpl.n	386 <DMAC_Handler+0x92>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     35e:	6883      	ldr	r3, [r0, #8]

		/* Set job status */
		resource->job_status = STATUS_OK;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     360:	2b00      	cmp	r3, #0
     362:	d010      	beq.n	386 <DMAC_Handler+0x92>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     364:	4798      	blx	r3
     366:	e00e      	b.n	386 <DMAC_Handler+0x92>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     368:	0753      	lsls	r3, r2, #29
     36a:	d50c      	bpl.n	386 <DMAC_Handler+0x92>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     36c:	2104      	movs	r1, #4
     36e:	234e      	movs	r3, #78	; 0x4e
     370:	4a07      	ldr	r2, [pc, #28]	; (390 <DMAC_Handler+0x9c>)
     372:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     374:	3b48      	subs	r3, #72	; 0x48
     376:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     378:	7c03      	ldrb	r3, [r0, #16]
     37a:	075b      	lsls	r3, r3, #29
     37c:	d503      	bpl.n	386 <DMAC_Handler+0x92>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     37e:	68c3      	ldr	r3, [r0, #12]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     380:	2b00      	cmp	r3, #0
     382:	d000      	beq.n	386 <DMAC_Handler+0x92>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     384:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     386:	4b05      	ldr	r3, [pc, #20]	; (39c <DMAC_Handler+0xa8>)
     388:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
     38a:	bd08      	pop	{r3, pc}
     38c:	000012b1 	.word	0x000012b1
     390:	44000400 	.word	0x44000400
     394:	2000003c 	.word	0x2000003c
     398:	30000000 	.word	0x30000000
     39c:	000012f1 	.word	0x000012f1

000003a0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3a0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     3a2:	2a00      	cmp	r2, #0
     3a4:	d10d      	bne.n	3c2 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     3a6:	008b      	lsls	r3, r1, #2
     3a8:	4a07      	ldr	r2, [pc, #28]	; (3c8 <extint_register_callback+0x28>)
     3aa:	589b      	ldr	r3, [r3, r2]
     3ac:	2b00      	cmp	r3, #0
     3ae:	d103      	bne.n	3b8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     3b0:	0089      	lsls	r1, r1, #2
     3b2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     3b4:	2300      	movs	r3, #0
     3b6:	e004      	b.n	3c2 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     3b8:	4283      	cmp	r3, r0
     3ba:	d001      	beq.n	3c0 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     3bc:	231d      	movs	r3, #29
     3be:	e000      	b.n	3c2 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     3c0:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3c2:	1c18      	adds	r0, r3, #0
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	2000011c 	.word	0x2000011c

000003cc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3cc:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     3ce:	2900      	cmp	r1, #0
     3d0:	d107      	bne.n	3e2 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     3d2:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     3d4:	281f      	cmp	r0, #31
     3d6:	d800      	bhi.n	3da <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     3d8:	4a03      	ldr	r2, [pc, #12]	; (3e8 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     3da:	2301      	movs	r3, #1
     3dc:	4083      	lsls	r3, r0
     3de:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     3e0:	2300      	movs	r3, #0
}
     3e2:	1c18      	adds	r0, r3, #0
     3e4:	4770      	bx	lr
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	40002400 	.word	0x40002400

000003ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     3ec:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3ee:	2200      	movs	r2, #0
     3f0:	4b15      	ldr	r3, [pc, #84]	; (448 <EIC_Handler+0x5c>)
     3f2:	701a      	strb	r2, [r3, #0]
     3f4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     3f6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3f8:	4e14      	ldr	r6, [pc, #80]	; (44c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3fa:	4c13      	ldr	r4, [pc, #76]	; (448 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     3fc:	2b1f      	cmp	r3, #31
     3fe:	d919      	bls.n	434 <EIC_Handler+0x48>
     400:	e00f      	b.n	422 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     402:	2100      	movs	r1, #0
     404:	e000      	b.n	408 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     406:	4912      	ldr	r1, [pc, #72]	; (450 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     408:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     40a:	009b      	lsls	r3, r3, #2
     40c:	599b      	ldr	r3, [r3, r6]
     40e:	2b00      	cmp	r3, #0
     410:	d000      	beq.n	414 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     412:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     414:	7823      	ldrb	r3, [r4, #0]
     416:	3301      	adds	r3, #1
     418:	b2db      	uxtb	r3, r3
     41a:	7023      	strb	r3, [r4, #0]
     41c:	2b0f      	cmp	r3, #15
     41e:	d9ed      	bls.n	3fc <EIC_Handler+0x10>
     420:	e011      	b.n	446 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     422:	1c29      	adds	r1, r5, #0
     424:	4019      	ands	r1, r3
     426:	2201      	movs	r2, #1
     428:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     42a:	2100      	movs	r1, #0
     42c:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     42e:	4211      	tst	r1, r2
     430:	d1e7      	bne.n	402 <EIC_Handler+0x16>
     432:	e7ef      	b.n	414 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     434:	1c29      	adds	r1, r5, #0
     436:	4019      	ands	r1, r3
     438:	2201      	movs	r2, #1
     43a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     43c:	4904      	ldr	r1, [pc, #16]	; (450 <EIC_Handler+0x64>)
     43e:	6949      	ldr	r1, [r1, #20]
     440:	4211      	tst	r1, r2
     442:	d1e0      	bne.n	406 <EIC_Handler+0x1a>
     444:	e7e6      	b.n	414 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     446:	bd70      	pop	{r4, r5, r6, pc}
     448:	20000118 	.word	0x20000118
     44c:	2000011c 	.word	0x2000011c
     450:	40002400 	.word	0x40002400

00000454 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     454:	4a06      	ldr	r2, [pc, #24]	; (470 <_extint_enable+0x1c>)
     456:	7811      	ldrb	r1, [r2, #0]
     458:	2302      	movs	r3, #2
     45a:	430b      	orrs	r3, r1
     45c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     45e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     460:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     462:	6853      	ldr	r3, [r2, #4]
     464:	4219      	tst	r1, r3
     466:	d1fc      	bne.n	462 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     468:	6853      	ldr	r3, [r2, #4]
     46a:	4218      	tst	r0, r3
     46c:	d1f9      	bne.n	462 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     46e:	4770      	bx	lr
     470:	40002400 	.word	0x40002400

00000474 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     474:	4a06      	ldr	r2, [pc, #24]	; (490 <_extint_disable+0x1c>)
     476:	7813      	ldrb	r3, [r2, #0]
     478:	2102      	movs	r1, #2
     47a:	438b      	bics	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     47e:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     480:	6853      	ldr	r3, [r2, #4]
     482:	4219      	tst	r1, r3
     484:	d1fc      	bne.n	480 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     486:	6853      	ldr	r3, [r2, #4]
     488:	4218      	tst	r0, r3
     48a:	d1f9      	bne.n	480 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40002400 	.word	0x40002400

00000494 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     494:	b500      	push	{lr}
     496:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     498:	4a18      	ldr	r2, [pc, #96]	; (4fc <_system_extint_init+0x68>)
     49a:	6953      	ldr	r3, [r2, #20]
     49c:	2180      	movs	r1, #128	; 0x80
     49e:	0089      	lsls	r1, r1, #2
     4a0:	430b      	orrs	r3, r1
     4a2:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4a4:	a901      	add	r1, sp, #4
     4a6:	2300      	movs	r3, #0
     4a8:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     4aa:	2003      	movs	r0, #3
     4ac:	4b14      	ldr	r3, [pc, #80]	; (500 <_system_extint_init+0x6c>)
     4ae:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     4b0:	2003      	movs	r0, #3
     4b2:	4b14      	ldr	r3, [pc, #80]	; (504 <_system_extint_init+0x70>)
     4b4:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     4b6:	4a14      	ldr	r2, [pc, #80]	; (508 <_system_extint_init+0x74>)
     4b8:	7811      	ldrb	r1, [r2, #0]
     4ba:	2301      	movs	r3, #1
     4bc:	430b      	orrs	r3, r1
     4be:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     4c0:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     4c2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     4c4:	6853      	ldr	r3, [r2, #4]
     4c6:	4219      	tst	r1, r3
     4c8:	d1fc      	bne.n	4c4 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     4ca:	6853      	ldr	r3, [r2, #4]
     4cc:	4218      	tst	r0, r3
     4ce:	d009      	beq.n	4e4 <_system_extint_init+0x50>
     4d0:	e7f8      	b.n	4c4 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     4d2:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4d4:	428b      	cmp	r3, r1
     4d6:	d1fc      	bne.n	4d2 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4d8:	2208      	movs	r2, #8
     4da:	4b0c      	ldr	r3, [pc, #48]	; (50c <_system_extint_init+0x78>)
     4dc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     4de:	4b0c      	ldr	r3, [pc, #48]	; (510 <_system_extint_init+0x7c>)
     4e0:	4798      	blx	r3
     4e2:	e009      	b.n	4f8 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     4e4:	4a08      	ldr	r2, [pc, #32]	; (508 <_system_extint_init+0x74>)
     4e6:	7813      	ldrb	r3, [r2, #0]
     4e8:	2110      	movs	r1, #16
     4ea:	438b      	bics	r3, r1
     4ec:	7013      	strb	r3, [r2, #0]
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <_system_extint_init+0x80>)
     4f0:	1c19      	adds	r1, r3, #0
     4f2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     4f4:	2200      	movs	r2, #0
     4f6:	e7ec      	b.n	4d2 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     4f8:	b003      	add	sp, #12
     4fa:	bd00      	pop	{pc}
     4fc:	40000400 	.word	0x40000400
     500:	00001991 	.word	0x00001991
     504:	00001929 	.word	0x00001929
     508:	40002400 	.word	0x40002400
     50c:	e000e100 	.word	0xe000e100
     510:	00000455 	.word	0x00000455
     514:	2000011c 	.word	0x2000011c

00000518 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     518:	2300      	movs	r3, #0
     51a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     51c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     51e:	2201      	movs	r2, #1
     520:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     522:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     524:	3201      	adds	r2, #1
     526:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     528:	7243      	strb	r3, [r0, #9]
}
     52a:	4770      	bx	lr

0000052c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     52c:	b5f0      	push	{r4, r5, r6, r7, lr}
     52e:	b083      	sub	sp, #12
     530:	1c05      	adds	r5, r0, #0
     532:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     534:	4b1c      	ldr	r3, [pc, #112]	; (5a8 <extint_chan_set_config+0x7c>)
     536:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     538:	a901      	add	r1, sp, #4
     53a:	2300      	movs	r3, #0
     53c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     53e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     540:	7923      	ldrb	r3, [r4, #4]
     542:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     544:	7a23      	ldrb	r3, [r4, #8]
     546:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     548:	7820      	ldrb	r0, [r4, #0]
     54a:	4b18      	ldr	r3, [pc, #96]	; (5ac <extint_chan_set_config+0x80>)
     54c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     54e:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     550:	2d1f      	cmp	r5, #31
     552:	d800      	bhi.n	556 <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     554:	4e16      	ldr	r6, [pc, #88]	; (5b0 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     556:	2207      	movs	r2, #7
     558:	402a      	ands	r2, r5
     55a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     55c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     55e:	7aa3      	ldrb	r3, [r4, #10]
     560:	2b00      	cmp	r3, #0
     562:	d001      	beq.n	568 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
     564:	2308      	movs	r3, #8
     566:	4318      	orrs	r0, r3
     568:	08eb      	lsrs	r3, r5, #3
     56a:	009b      	lsls	r3, r3, #2
     56c:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     56e:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     570:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     572:	270f      	movs	r7, #15
     574:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     576:	43b9      	bics	r1, r7
     578:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     57a:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     57c:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB || SAMC20)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     57e:	7a63      	ldrb	r3, [r4, #9]
     580:	2b00      	cmp	r3, #0
     582:	d006      	beq.n	592 <extint_chan_set_config+0x66>
		EIC_module->ASYNCH.reg |= (1UL << channel);
     584:	69b3      	ldr	r3, [r6, #24]
     586:	2201      	movs	r2, #1
     588:	40aa      	lsls	r2, r5
     58a:	1c15      	adds	r5, r2, #0
     58c:	431d      	orrs	r5, r3
     58e:	61b5      	str	r5, [r6, #24]
     590:	e006      	b.n	5a0 <extint_chan_set_config+0x74>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     592:	69b3      	ldr	r3, [r6, #24]
     594:	041b      	lsls	r3, r3, #16
     596:	0c1b      	lsrs	r3, r3, #16
     598:	2201      	movs	r2, #1
     59a:	40aa      	lsls	r2, r5
     59c:	4393      	bics	r3, r2
     59e:	61b3      	str	r3, [r6, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     5a0:	4b04      	ldr	r3, [pc, #16]	; (5b4 <extint_chan_set_config+0x88>)
     5a2:	4798      	blx	r3
}
     5a4:	b003      	add	sp, #12
     5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a8:	00000475 	.word	0x00000475
     5ac:	00001a8d 	.word	0x00001a8d
     5b0:	40002400 	.word	0x40002400
     5b4:	00000455 	.word	0x00000455

000005b8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5b8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5ba:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5bc:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5be:	4281      	cmp	r1, r0
     5c0:	d30c      	bcc.n	5dc <_sercom_get_sync_baud_val+0x24>
     5c2:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     5c4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5c6:	3301      	adds	r3, #1
     5c8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     5ca:	4288      	cmp	r0, r1
     5cc:	d9fa      	bls.n	5c4 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     5ce:	3b01      	subs	r3, #1
     5d0:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d2:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5d4:	2bff      	cmp	r3, #255	; 0xff
     5d6:	d801      	bhi.n	5dc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     5d8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     5da:	2400      	movs	r4, #0
	}
}
     5dc:	1c20      	adds	r0, r4, #0
     5de:	bd10      	pop	{r4, pc}

000005e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5e0:	b510      	push	{r4, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5e6:	4b0e      	ldr	r3, [pc, #56]	; (620 <sercom_set_gclk_generator+0x40>)
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d001      	beq.n	5f2 <sercom_set_gclk_generator+0x12>
     5ee:	2900      	cmp	r1, #0
     5f0:	d00d      	beq.n	60e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     5f2:	a901      	add	r1, sp, #4
     5f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5f6:	2011      	movs	r0, #17
     5f8:	4b0a      	ldr	r3, [pc, #40]	; (624 <sercom_set_gclk_generator+0x44>)
     5fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5fc:	2011      	movs	r0, #17
     5fe:	4b0a      	ldr	r3, [pc, #40]	; (628 <sercom_set_gclk_generator+0x48>)
     600:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     602:	4b07      	ldr	r3, [pc, #28]	; (620 <sercom_set_gclk_generator+0x40>)
     604:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     606:	2201      	movs	r2, #1
     608:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     60a:	2000      	movs	r0, #0
     60c:	e006      	b.n	61c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <sercom_set_gclk_generator+0x40>)
     610:	785b      	ldrb	r3, [r3, #1]
     612:	4283      	cmp	r3, r0
     614:	d001      	beq.n	61a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     616:	201d      	movs	r0, #29
     618:	e000      	b.n	61c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     61a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     61c:	b002      	add	sp, #8
     61e:	bd10      	pop	{r4, pc}
     620:	20000050 	.word	0x20000050
     624:	00001991 	.word	0x00001991
     628:	00001929 	.word	0x00001929

0000062c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     62c:	4b40      	ldr	r3, [pc, #256]	; (730 <_sercom_get_default_pad+0x104>)
     62e:	4298      	cmp	r0, r3
     630:	d034      	beq.n	69c <_sercom_get_default_pad+0x70>
     632:	d807      	bhi.n	644 <_sercom_get_default_pad+0x18>
     634:	2384      	movs	r3, #132	; 0x84
     636:	05db      	lsls	r3, r3, #23
     638:	4298      	cmp	r0, r3
     63a:	d00d      	beq.n	658 <_sercom_get_default_pad+0x2c>
     63c:	4b3d      	ldr	r3, [pc, #244]	; (734 <_sercom_get_default_pad+0x108>)
     63e:	4298      	cmp	r0, r3
     640:	d01b      	beq.n	67a <_sercom_get_default_pad+0x4e>
     642:	e067      	b.n	714 <_sercom_get_default_pad+0xe8>
     644:	4b3c      	ldr	r3, [pc, #240]	; (738 <_sercom_get_default_pad+0x10c>)
     646:	4298      	cmp	r0, r3
     648:	d04a      	beq.n	6e0 <_sercom_get_default_pad+0xb4>
     64a:	4b3c      	ldr	r3, [pc, #240]	; (73c <_sercom_get_default_pad+0x110>)
     64c:	4298      	cmp	r0, r3
     64e:	d050      	beq.n	6f2 <_sercom_get_default_pad+0xc6>
     650:	4b3b      	ldr	r3, [pc, #236]	; (740 <_sercom_get_default_pad+0x114>)
     652:	4298      	cmp	r0, r3
     654:	d15e      	bne.n	714 <_sercom_get_default_pad+0xe8>
     656:	e032      	b.n	6be <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     658:	2901      	cmp	r1, #1
     65a:	d006      	beq.n	66a <_sercom_get_default_pad+0x3e>
     65c:	2900      	cmp	r1, #0
     65e:	d05b      	beq.n	718 <_sercom_get_default_pad+0xec>
     660:	2902      	cmp	r1, #2
     662:	d006      	beq.n	672 <_sercom_get_default_pad+0x46>
     664:	2903      	cmp	r1, #3
     666:	d006      	beq.n	676 <_sercom_get_default_pad+0x4a>
     668:	e001      	b.n	66e <_sercom_get_default_pad+0x42>
     66a:	4836      	ldr	r0, [pc, #216]	; (744 <_sercom_get_default_pad+0x118>)
     66c:	e05f      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     66e:	2000      	movs	r0, #0
     670:	e05d      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     672:	4835      	ldr	r0, [pc, #212]	; (748 <_sercom_get_default_pad+0x11c>)
     674:	e05b      	b.n	72e <_sercom_get_default_pad+0x102>
     676:	4835      	ldr	r0, [pc, #212]	; (74c <_sercom_get_default_pad+0x120>)
     678:	e059      	b.n	72e <_sercom_get_default_pad+0x102>
     67a:	2901      	cmp	r1, #1
     67c:	d006      	beq.n	68c <_sercom_get_default_pad+0x60>
     67e:	2900      	cmp	r1, #0
     680:	d04c      	beq.n	71c <_sercom_get_default_pad+0xf0>
     682:	2902      	cmp	r1, #2
     684:	d006      	beq.n	694 <_sercom_get_default_pad+0x68>
     686:	2903      	cmp	r1, #3
     688:	d006      	beq.n	698 <_sercom_get_default_pad+0x6c>
     68a:	e001      	b.n	690 <_sercom_get_default_pad+0x64>
     68c:	4830      	ldr	r0, [pc, #192]	; (750 <_sercom_get_default_pad+0x124>)
     68e:	e04e      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     690:	2000      	movs	r0, #0
     692:	e04c      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     694:	482f      	ldr	r0, [pc, #188]	; (754 <_sercom_get_default_pad+0x128>)
     696:	e04a      	b.n	72e <_sercom_get_default_pad+0x102>
     698:	482f      	ldr	r0, [pc, #188]	; (758 <_sercom_get_default_pad+0x12c>)
     69a:	e048      	b.n	72e <_sercom_get_default_pad+0x102>
     69c:	2901      	cmp	r1, #1
     69e:	d006      	beq.n	6ae <_sercom_get_default_pad+0x82>
     6a0:	2900      	cmp	r1, #0
     6a2:	d03d      	beq.n	720 <_sercom_get_default_pad+0xf4>
     6a4:	2902      	cmp	r1, #2
     6a6:	d006      	beq.n	6b6 <_sercom_get_default_pad+0x8a>
     6a8:	2903      	cmp	r1, #3
     6aa:	d006      	beq.n	6ba <_sercom_get_default_pad+0x8e>
     6ac:	e001      	b.n	6b2 <_sercom_get_default_pad+0x86>
     6ae:	482b      	ldr	r0, [pc, #172]	; (75c <_sercom_get_default_pad+0x130>)
     6b0:	e03d      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     6b2:	2000      	movs	r0, #0
     6b4:	e03b      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b6:	482a      	ldr	r0, [pc, #168]	; (760 <_sercom_get_default_pad+0x134>)
     6b8:	e039      	b.n	72e <_sercom_get_default_pad+0x102>
     6ba:	482a      	ldr	r0, [pc, #168]	; (764 <_sercom_get_default_pad+0x138>)
     6bc:	e037      	b.n	72e <_sercom_get_default_pad+0x102>
     6be:	2901      	cmp	r1, #1
     6c0:	d006      	beq.n	6d0 <_sercom_get_default_pad+0xa4>
     6c2:	2900      	cmp	r1, #0
     6c4:	d02e      	beq.n	724 <_sercom_get_default_pad+0xf8>
     6c6:	2902      	cmp	r1, #2
     6c8:	d006      	beq.n	6d8 <_sercom_get_default_pad+0xac>
     6ca:	2903      	cmp	r1, #3
     6cc:	d006      	beq.n	6dc <_sercom_get_default_pad+0xb0>
     6ce:	e001      	b.n	6d4 <_sercom_get_default_pad+0xa8>
     6d0:	4825      	ldr	r0, [pc, #148]	; (768 <_sercom_get_default_pad+0x13c>)
     6d2:	e02c      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     6d4:	2000      	movs	r0, #0
     6d6:	e02a      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d8:	4824      	ldr	r0, [pc, #144]	; (76c <_sercom_get_default_pad+0x140>)
     6da:	e028      	b.n	72e <_sercom_get_default_pad+0x102>
     6dc:	4824      	ldr	r0, [pc, #144]	; (770 <_sercom_get_default_pad+0x144>)
     6de:	e026      	b.n	72e <_sercom_get_default_pad+0x102>
     6e0:	2902      	cmp	r1, #2
     6e2:	d002      	beq.n	6ea <_sercom_get_default_pad+0xbe>
     6e4:	2903      	cmp	r1, #3
     6e6:	d002      	beq.n	6ee <_sercom_get_default_pad+0xc2>
     6e8:	e01e      	b.n	728 <_sercom_get_default_pad+0xfc>
     6ea:	4822      	ldr	r0, [pc, #136]	; (774 <_sercom_get_default_pad+0x148>)
     6ec:	e01f      	b.n	72e <_sercom_get_default_pad+0x102>
     6ee:	4822      	ldr	r0, [pc, #136]	; (778 <_sercom_get_default_pad+0x14c>)
     6f0:	e01d      	b.n	72e <_sercom_get_default_pad+0x102>
     6f2:	2901      	cmp	r1, #1
     6f4:	d006      	beq.n	704 <_sercom_get_default_pad+0xd8>
     6f6:	2900      	cmp	r1, #0
     6f8:	d018      	beq.n	72c <_sercom_get_default_pad+0x100>
     6fa:	2902      	cmp	r1, #2
     6fc:	d006      	beq.n	70c <_sercom_get_default_pad+0xe0>
     6fe:	2903      	cmp	r1, #3
     700:	d006      	beq.n	710 <_sercom_get_default_pad+0xe4>
     702:	e001      	b.n	708 <_sercom_get_default_pad+0xdc>
     704:	481d      	ldr	r0, [pc, #116]	; (77c <_sercom_get_default_pad+0x150>)
     706:	e012      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     708:	2000      	movs	r0, #0
     70a:	e010      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     70c:	481c      	ldr	r0, [pc, #112]	; (780 <_sercom_get_default_pad+0x154>)
     70e:	e00e      	b.n	72e <_sercom_get_default_pad+0x102>
     710:	481c      	ldr	r0, [pc, #112]	; (784 <_sercom_get_default_pad+0x158>)
     712:	e00c      	b.n	72e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     714:	2000      	movs	r0, #0
     716:	e00a      	b.n	72e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     718:	481b      	ldr	r0, [pc, #108]	; (788 <_sercom_get_default_pad+0x15c>)
     71a:	e008      	b.n	72e <_sercom_get_default_pad+0x102>
     71c:	2003      	movs	r0, #3
     71e:	e006      	b.n	72e <_sercom_get_default_pad+0x102>
     720:	481a      	ldr	r0, [pc, #104]	; (78c <_sercom_get_default_pad+0x160>)
     722:	e004      	b.n	72e <_sercom_get_default_pad+0x102>
     724:	481a      	ldr	r0, [pc, #104]	; (790 <_sercom_get_default_pad+0x164>)
     726:	e002      	b.n	72e <_sercom_get_default_pad+0x102>
     728:	2000      	movs	r0, #0
     72a:	e000      	b.n	72e <_sercom_get_default_pad+0x102>
     72c:	4819      	ldr	r0, [pc, #100]	; (794 <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
     72e:	4770      	bx	lr
     730:	42000800 	.word	0x42000800
     734:	42000400 	.word	0x42000400
     738:	42001000 	.word	0x42001000
     73c:	43000400 	.word	0x43000400
     740:	42000c00 	.word	0x42000c00
     744:	00050003 	.word	0x00050003
     748:	00060003 	.word	0x00060003
     74c:	00070003 	.word	0x00070003
     750:	00010003 	.word	0x00010003
     754:	001e0003 	.word	0x001e0003
     758:	001f0003 	.word	0x001f0003
     75c:	00090003 	.word	0x00090003
     760:	000a0003 	.word	0x000a0003
     764:	000b0003 	.word	0x000b0003
     768:	00110003 	.word	0x00110003
     76c:	00120003 	.word	0x00120003
     770:	00130003 	.word	0x00130003
     774:	000e0003 	.word	0x000e0003
     778:	000f0003 	.word	0x000f0003
     77c:	00170003 	.word	0x00170003
     780:	00180003 	.word	0x00180003
     784:	00190003 	.word	0x00190003
     788:	00040003 	.word	0x00040003
     78c:	00080003 	.word	0x00080003
     790:	00100003 	.word	0x00100003
     794:	00160003 	.word	0x00160003

00000798 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     798:	b530      	push	{r4, r5, lr}
     79a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     79c:	4b0c      	ldr	r3, [pc, #48]	; (7d0 <_sercom_get_sercom_inst_index+0x38>)
     79e:	466a      	mov	r2, sp
     7a0:	cb32      	ldmia	r3!, {r1, r4, r5}
     7a2:	c232      	stmia	r2!, {r1, r4, r5}
     7a4:	cb32      	ldmia	r3!, {r1, r4, r5}
     7a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7a8:	9b00      	ldr	r3, [sp, #0]
     7aa:	4283      	cmp	r3, r0
     7ac:	d006      	beq.n	7bc <_sercom_get_sercom_inst_index+0x24>
     7ae:	2301      	movs	r3, #1
     7b0:	009a      	lsls	r2, r3, #2
     7b2:	4669      	mov	r1, sp
     7b4:	5852      	ldr	r2, [r2, r1]
     7b6:	4282      	cmp	r2, r0
     7b8:	d103      	bne.n	7c2 <_sercom_get_sercom_inst_index+0x2a>
     7ba:	e000      	b.n	7be <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7bc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     7be:	b2d8      	uxtb	r0, r3
     7c0:	e003      	b.n	7ca <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7c2:	3301      	adds	r3, #1
     7c4:	2b06      	cmp	r3, #6
     7c6:	d1f3      	bne.n	7b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     7c8:	2000      	movs	r0, #0
}
     7ca:	b007      	add	sp, #28
     7cc:	bd30      	pop	{r4, r5, pc}
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	00002210 	.word	0x00002210

000007d4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d6:	4647      	mov	r7, r8
     7d8:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     7da:	0080      	lsls	r0, r0, #2
     7dc:	4b0d      	ldr	r3, [pc, #52]	; (814 <_tcc_interrupt_handler+0x40>)
     7de:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     7e6:	401e      	ands	r6, r3
     7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7ea:	401e      	ands	r6, r3
     7ec:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     7ee:	4b0a      	ldr	r3, [pc, #40]	; (818 <_tcc_interrupt_handler+0x44>)
     7f0:	4698      	mov	r8, r3
     7f2:	4643      	mov	r3, r8
     7f4:	58e5      	ldr	r5, [r4, r3]
     7f6:	422e      	tst	r6, r5
     7f8:	d005      	beq.n	806 <_tcc_interrupt_handler+0x32>
     7fa:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     7fc:	685b      	ldr	r3, [r3, #4]
     7fe:	1c38      	adds	r0, r7, #0
     800:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     802:	683b      	ldr	r3, [r7, #0]
     804:	62dd      	str	r5, [r3, #44]	; 0x2c
     806:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     808:	2c30      	cmp	r4, #48	; 0x30
     80a:	d1f2      	bne.n	7f2 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     80c:	bc04      	pop	{r2}
     80e:	4690      	mov	r8, r2
     810:	bdf0      	pop	{r4, r5, r6, r7, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	2000015c 	.word	0x2000015c
     818:	00002228 	.word	0x00002228

0000081c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     81c:	b508      	push	{r3, lr}
     81e:	2000      	movs	r0, #0
     820:	4b01      	ldr	r3, [pc, #4]	; (828 <TCC0_Handler+0xc>)
     822:	4798      	blx	r3
     824:	bd08      	pop	{r3, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	000007d5 	.word	0x000007d5

0000082c <TCC1_Handler>:
     82c:	b508      	push	{r3, lr}
     82e:	2001      	movs	r0, #1
     830:	4b01      	ldr	r3, [pc, #4]	; (838 <TCC1_Handler+0xc>)
     832:	4798      	blx	r3
     834:	bd08      	pop	{r3, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	000007d5 	.word	0x000007d5

0000083c <TCC2_Handler>:
     83c:	b508      	push	{r3, lr}
     83e:	2002      	movs	r0, #2
     840:	4b01      	ldr	r3, [pc, #4]	; (848 <TCC2_Handler+0xc>)
     842:	4798      	blx	r3
     844:	bd08      	pop	{r3, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000007d5 	.word	0x000007d5

0000084c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     84c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     84e:	0080      	lsls	r0, r0, #2
     850:	4b14      	ldr	r3, [pc, #80]	; (8a4 <_tc_interrupt_handler+0x58>)
     852:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     854:	682b      	ldr	r3, [r5, #0]
     856:	7a9c      	ldrb	r4, [r3, #10]
     858:	7e2b      	ldrb	r3, [r5, #24]
     85a:	401c      	ands	r4, r3
     85c:	7e6b      	ldrb	r3, [r5, #25]
     85e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     860:	07e3      	lsls	r3, r4, #31
     862:	d505      	bpl.n	870 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     864:	1c28      	adds	r0, r5, #0
     866:	68ab      	ldr	r3, [r5, #8]
     868:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     86a:	2301      	movs	r3, #1
     86c:	682a      	ldr	r2, [r5, #0]
     86e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     870:	07a3      	lsls	r3, r4, #30
     872:	d505      	bpl.n	880 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     874:	1c28      	adds	r0, r5, #0
     876:	68eb      	ldr	r3, [r5, #12]
     878:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     87a:	2302      	movs	r3, #2
     87c:	682a      	ldr	r2, [r5, #0]
     87e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     880:	06e3      	lsls	r3, r4, #27
     882:	d505      	bpl.n	890 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     884:	1c28      	adds	r0, r5, #0
     886:	692b      	ldr	r3, [r5, #16]
     888:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     88a:	2310      	movs	r3, #16
     88c:	682a      	ldr	r2, [r5, #0]
     88e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     890:	06a3      	lsls	r3, r4, #26
     892:	d505      	bpl.n	8a0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     894:	1c28      	adds	r0, r5, #0
     896:	696b      	ldr	r3, [r5, #20]
     898:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     89a:	682b      	ldr	r3, [r5, #0]
     89c:	2220      	movs	r2, #32
     89e:	729a      	strb	r2, [r3, #10]
	}
}
     8a0:	bd38      	pop	{r3, r4, r5, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	20000168 	.word	0x20000168

000008a8 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
     8a8:	b508      	push	{r3, lr}
     8aa:	2000      	movs	r0, #0
     8ac:	4b01      	ldr	r3, [pc, #4]	; (8b4 <TC0_Handler+0xc>)
     8ae:	4798      	blx	r3
     8b0:	bd08      	pop	{r3, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	0000084d 	.word	0x0000084d

000008b8 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
     8b8:	b508      	push	{r3, lr}
     8ba:	2001      	movs	r0, #1
     8bc:	4b01      	ldr	r3, [pc, #4]	; (8c4 <TC1_Handler+0xc>)
     8be:	4798      	blx	r3
     8c0:	bd08      	pop	{r3, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000084d 	.word	0x0000084d

000008c8 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
     8c8:	b508      	push	{r3, lr}
     8ca:	2002      	movs	r0, #2
     8cc:	4b01      	ldr	r3, [pc, #4]	; (8d4 <TC4_Handler+0xc>)
     8ce:	4798      	blx	r3
     8d0:	bd08      	pop	{r3, pc}
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	0000084d 	.word	0x0000084d

000008d8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     8d8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8da:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8dc:	689a      	ldr	r2, [r3, #8]
     8de:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8e0:	689a      	ldr	r2, [r3, #8]
     8e2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     8e4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8e6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     8e8:	6803      	ldr	r3, [r0, #0]
     8ea:	3301      	adds	r3, #1
     8ec:	6003      	str	r3, [r0, #0]
}
     8ee:	4770      	bx	lr

000008f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     8f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8f2:	6842      	ldr	r2, [r0, #4]
     8f4:	6881      	ldr	r1, [r0, #8]
     8f6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8f8:	6882      	ldr	r2, [r0, #8]
     8fa:	6841      	ldr	r1, [r0, #4]
     8fc:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     8fe:	685a      	ldr	r2, [r3, #4]
     900:	4282      	cmp	r2, r0
     902:	d101      	bne.n	908 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     904:	6892      	ldr	r2, [r2, #8]
     906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     908:	2200      	movs	r2, #0
     90a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     90c:	681a      	ldr	r2, [r3, #0]
     90e:	1e50      	subs	r0, r2, #1
     910:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     912:	4770      	bx	lr

00000914 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     914:	4770      	bx	lr
     916:	46c0      	nop			; (mov r8, r8)

00000918 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     918:	f3ef 8010 	mrs	r0, PRIMASK
     91c:	b672      	cpsid	i
     91e:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     920:	2000      	movs	r0, #0
     922:	46c0      	nop			; (mov r8, r8)

00000924 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     924:	f380 8810 	msr	PRIMASK, r0
     928:	4770      	bx	lr
     92a:	46c0      	nop			; (mov r8, r8)

0000092c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     92c:	f3ef 8009 	mrs	r0, PSP
     930:	4b0e      	ldr	r3, [pc, #56]	; (96c <pxCurrentTCBConst>)
     932:	681a      	ldr	r2, [r3, #0]
     934:	3820      	subs	r0, #32
     936:	6010      	str	r0, [r2, #0]
     938:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     93a:	4644      	mov	r4, r8
     93c:	464d      	mov	r5, r9
     93e:	4656      	mov	r6, sl
     940:	465f      	mov	r7, fp
     942:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     944:	b508      	push	{r3, lr}
     946:	b672      	cpsid	i
     948:	f000 f8d2 	bl	af0 <vTaskSwitchContext>
     94c:	b662      	cpsie	i
     94e:	bc0c      	pop	{r2, r3}
     950:	6811      	ldr	r1, [r2, #0]
     952:	6808      	ldr	r0, [r1, #0]
     954:	3010      	adds	r0, #16
     956:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     958:	46a0      	mov	r8, r4
     95a:	46a9      	mov	r9, r5
     95c:	46b2      	mov	sl, r6
     95e:	46bb      	mov	fp, r7
     960:	f380 8809 	msr	PSP, r0
     964:	3820      	subs	r0, #32
     966:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     968:	4718      	bx	r3
     96a:	46c0      	nop			; (mov r8, r8)

0000096c <pxCurrentTCBConst>:
     96c:	200000c4 	.word	0x200000c4

00000970 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     970:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     972:	4b07      	ldr	r3, [pc, #28]	; (990 <SysTick_Handler+0x20>)
     974:	4798      	blx	r3
     976:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     978:	4b06      	ldr	r3, [pc, #24]	; (994 <SysTick_Handler+0x24>)
     97a:	4798      	blx	r3
     97c:	2800      	cmp	r0, #0
     97e:	d003      	beq.n	988 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     980:	2280      	movs	r2, #128	; 0x80
     982:	0552      	lsls	r2, r2, #21
     984:	4b04      	ldr	r3, [pc, #16]	; (998 <SysTick_Handler+0x28>)
     986:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     988:	1c20      	adds	r0, r4, #0
     98a:	4b04      	ldr	r3, [pc, #16]	; (99c <SysTick_Handler+0x2c>)
     98c:	4798      	blx	r3
}
     98e:	bd10      	pop	{r4, pc}
     990:	00000919 	.word	0x00000919
     994:	000009cd 	.word	0x000009cd
     998:	e000ed04 	.word	0xe000ed04
     99c:	00000925 	.word	0x00000925

000009a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     9a0:	4b08      	ldr	r3, [pc, #32]	; (9c4 <prvResetNextTaskUnblockTime+0x24>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d104      	bne.n	9b4 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     9aa:	2201      	movs	r2, #1
     9ac:	4252      	negs	r2, r2
     9ae:	4b06      	ldr	r3, [pc, #24]	; (9c8 <prvResetNextTaskUnblockTime+0x28>)
     9b0:	601a      	str	r2, [r3, #0]
     9b2:	e006      	b.n	9c2 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     9b4:	4b03      	ldr	r3, [pc, #12]	; (9c4 <prvResetNextTaskUnblockTime+0x24>)
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
     9ba:	68db      	ldr	r3, [r3, #12]
     9bc:	685a      	ldr	r2, [r3, #4]
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <prvResetNextTaskUnblockTime+0x28>)
     9c0:	601a      	str	r2, [r3, #0]
	}
}
     9c2:	4770      	bx	lr
     9c4:	20000058 	.word	0x20000058
     9c8:	20000000 	.word	0x20000000

000009cc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     9d0:	4b39      	ldr	r3, [pc, #228]	; (ab8 <xTaskIncrementTick+0xec>)
     9d2:	681b      	ldr	r3, [r3, #0]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d162      	bne.n	a9e <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
     9d8:	4b38      	ldr	r3, [pc, #224]	; (abc <xTaskIncrementTick+0xf0>)
     9da:	681a      	ldr	r2, [r3, #0]
     9dc:	3201      	adds	r2, #1
     9de:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
     9e0:	681c      	ldr	r4, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
     9e2:	2c00      	cmp	r4, #0
     9e4:	d112      	bne.n	a0c <xTaskIncrementTick+0x40>
			{
				taskSWITCH_DELAYED_LISTS();
     9e6:	4b36      	ldr	r3, [pc, #216]	; (ac0 <xTaskIncrementTick+0xf4>)
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d001      	beq.n	9f4 <xTaskIncrementTick+0x28>
     9f0:	b672      	cpsid	i
     9f2:	e7fe      	b.n	9f2 <xTaskIncrementTick+0x26>
     9f4:	4a32      	ldr	r2, [pc, #200]	; (ac0 <xTaskIncrementTick+0xf4>)
     9f6:	6811      	ldr	r1, [r2, #0]
     9f8:	4b32      	ldr	r3, [pc, #200]	; (ac4 <xTaskIncrementTick+0xf8>)
     9fa:	6818      	ldr	r0, [r3, #0]
     9fc:	6010      	str	r0, [r2, #0]
     9fe:	6019      	str	r1, [r3, #0]
     a00:	4a31      	ldr	r2, [pc, #196]	; (ac8 <xTaskIncrementTick+0xfc>)
     a02:	6813      	ldr	r3, [r2, #0]
     a04:	3301      	adds	r3, #1
     a06:	6013      	str	r3, [r2, #0]
     a08:	4b30      	ldr	r3, [pc, #192]	; (acc <xTaskIncrementTick+0x100>)
     a0a:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     a0c:	4b30      	ldr	r3, [pc, #192]	; (ad0 <xTaskIncrementTick+0x104>)
     a0e:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     a10:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     a12:	429c      	cmp	r4, r3
     a14:	d337      	bcc.n	a86 <xTaskIncrementTick+0xba>
     a16:	2600      	movs	r6, #0
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     a18:	4d29      	ldr	r5, [pc, #164]	; (ac0 <xTaskIncrementTick+0xf4>)
     a1a:	682b      	ldr	r3, [r5, #0]
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	2b00      	cmp	r3, #0
     a20:	d104      	bne.n	a2c <xTaskIncrementTick+0x60>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
     a22:	2201      	movs	r2, #1
     a24:	4252      	negs	r2, r2
     a26:	4b2a      	ldr	r3, [pc, #168]	; (ad0 <xTaskIncrementTick+0x104>)
     a28:	601a      	str	r2, [r3, #0]
						break;
     a2a:	e02c      	b.n	a86 <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     a2c:	4b24      	ldr	r3, [pc, #144]	; (ac0 <xTaskIncrementTick+0xf4>)
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	68db      	ldr	r3, [r3, #12]
     a32:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     a34:	687b      	ldr	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
     a36:	429c      	cmp	r4, r3
     a38:	d202      	bcs.n	a40 <xTaskIncrementTick+0x74>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
     a3a:	4a25      	ldr	r2, [pc, #148]	; (ad0 <xTaskIncrementTick+0x104>)
     a3c:	6013      	str	r3, [r2, #0]
							break;
     a3e:	e022      	b.n	a86 <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     a40:	1d3b      	adds	r3, r7, #4
     a42:	9301      	str	r3, [sp, #4]
     a44:	1c18      	adds	r0, r3, #0
     a46:	4b23      	ldr	r3, [pc, #140]	; (ad4 <xTaskIncrementTick+0x108>)
     a48:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a4c:	2b00      	cmp	r3, #0
     a4e:	d003      	beq.n	a58 <xTaskIncrementTick+0x8c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     a50:	1c38      	adds	r0, r7, #0
     a52:	3018      	adds	r0, #24
     a54:	4b1f      	ldr	r3, [pc, #124]	; (ad4 <xTaskIncrementTick+0x108>)
     a56:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
     a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a5a:	4a1f      	ldr	r2, [pc, #124]	; (ad8 <xTaskIncrementTick+0x10c>)
     a5c:	6812      	ldr	r2, [r2, #0]
     a5e:	4293      	cmp	r3, r2
     a60:	d901      	bls.n	a66 <xTaskIncrementTick+0x9a>
     a62:	4a1d      	ldr	r2, [pc, #116]	; (ad8 <xTaskIncrementTick+0x10c>)
     a64:	6013      	str	r3, [r2, #0]
     a66:	0098      	lsls	r0, r3, #2
     a68:	18c3      	adds	r3, r0, r3
     a6a:	009b      	lsls	r3, r3, #2
     a6c:	481b      	ldr	r0, [pc, #108]	; (adc <xTaskIncrementTick+0x110>)
     a6e:	18c0      	adds	r0, r0, r3
     a70:	9901      	ldr	r1, [sp, #4]
     a72:	4b1b      	ldr	r3, [pc, #108]	; (ae0 <xTaskIncrementTick+0x114>)
     a74:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     a76:	4b1b      	ldr	r3, [pc, #108]	; (ae4 <xTaskIncrementTick+0x118>)
     a78:	681b      	ldr	r3, [r3, #0]
     a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a7e:	429a      	cmp	r2, r3
     a80:	d3cb      	bcc.n	a1a <xTaskIncrementTick+0x4e>
							{
								xSwitchRequired = pdTRUE;
     a82:	2601      	movs	r6, #1
     a84:	e7c9      	b.n	a1a <xTaskIncrementTick+0x4e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     a86:	4b17      	ldr	r3, [pc, #92]	; (ae4 <xTaskIncrementTick+0x118>)
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a8c:	009a      	lsls	r2, r3, #2
     a8e:	18d3      	adds	r3, r2, r3
     a90:	009b      	lsls	r3, r3, #2
     a92:	4a12      	ldr	r2, [pc, #72]	; (adc <xTaskIncrementTick+0x110>)
     a94:	589b      	ldr	r3, [r3, r2]
     a96:	2b01      	cmp	r3, #1
     a98:	d906      	bls.n	aa8 <xTaskIncrementTick+0xdc>
			{
				xSwitchRequired = pdTRUE;
     a9a:	2601      	movs	r6, #1
     a9c:	e004      	b.n	aa8 <xTaskIncrementTick+0xdc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     a9e:	4a12      	ldr	r2, [pc, #72]	; (ae8 <xTaskIncrementTick+0x11c>)
     aa0:	6813      	ldr	r3, [r2, #0]
     aa2:	3301      	adds	r3, #1
     aa4:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     aa6:	2600      	movs	r6, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     aa8:	4b10      	ldr	r3, [pc, #64]	; (aec <xTaskIncrementTick+0x120>)
     aaa:	681b      	ldr	r3, [r3, #0]
     aac:	2b00      	cmp	r3, #0
     aae:	d000      	beq.n	ab2 <xTaskIncrementTick+0xe6>
		{
			xSwitchRequired = pdTRUE;
     ab0:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     ab2:	1c30      	adds	r0, r6, #0
     ab4:	b003      	add	sp, #12
     ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab8:	200000c8 	.word	0x200000c8
     abc:	200000cc 	.word	0x200000cc
     ac0:	20000058 	.word	0x20000058
     ac4:	200000d0 	.word	0x200000d0
     ac8:	20000054 	.word	0x20000054
     acc:	000009a1 	.word	0x000009a1
     ad0:	20000000 	.word	0x20000000
     ad4:	000008f1 	.word	0x000008f1
     ad8:	200000d4 	.word	0x200000d4
     adc:	20000060 	.word	0x20000060
     ae0:	000008d9 	.word	0x000008d9
     ae4:	200000c4 	.word	0x200000c4
     ae8:	2000005c 	.word	0x2000005c
     aec:	200000d8 	.word	0x200000d8

00000af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     af0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     af2:	4b25      	ldr	r3, [pc, #148]	; (b88 <vTaskSwitchContext+0x98>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	2b00      	cmp	r3, #0
     af8:	d003      	beq.n	b02 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     afa:	2201      	movs	r2, #1
     afc:	4b23      	ldr	r3, [pc, #140]	; (b8c <vTaskSwitchContext+0x9c>)
     afe:	601a      	str	r2, [r3, #0]
     b00:	e041      	b.n	b86 <vTaskSwitchContext+0x96>
	}
	else
	{
		xYieldPending = pdFALSE;
     b02:	2200      	movs	r2, #0
     b04:	4b21      	ldr	r3, [pc, #132]	; (b8c <vTaskSwitchContext+0x9c>)
     b06:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     b08:	4b21      	ldr	r3, [pc, #132]	; (b90 <vTaskSwitchContext+0xa0>)
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	009a      	lsls	r2, r3, #2
     b0e:	18d3      	adds	r3, r2, r3
     b10:	009b      	lsls	r3, r3, #2
     b12:	4a20      	ldr	r2, [pc, #128]	; (b94 <vTaskSwitchContext+0xa4>)
     b14:	589b      	ldr	r3, [r3, r2]
     b16:	2b00      	cmp	r3, #0
     b18:	d116      	bne.n	b48 <vTaskSwitchContext+0x58>
     b1a:	4b1d      	ldr	r3, [pc, #116]	; (b90 <vTaskSwitchContext+0xa0>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	2b00      	cmp	r3, #0
     b20:	d006      	beq.n	b30 <vTaskSwitchContext+0x40>
     b22:	4a1b      	ldr	r2, [pc, #108]	; (b90 <vTaskSwitchContext+0xa0>)
     b24:	4c1b      	ldr	r4, [pc, #108]	; (b94 <vTaskSwitchContext+0xa4>)
     b26:	1c10      	adds	r0, r2, #0
     b28:	e004      	b.n	b34 <vTaskSwitchContext+0x44>
     b2a:	6803      	ldr	r3, [r0, #0]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d101      	bne.n	b34 <vTaskSwitchContext+0x44>
     b30:	b672      	cpsid	i
     b32:	e7fe      	b.n	b32 <vTaskSwitchContext+0x42>
     b34:	6813      	ldr	r3, [r2, #0]
     b36:	3b01      	subs	r3, #1
     b38:	6013      	str	r3, [r2, #0]
     b3a:	6813      	ldr	r3, [r2, #0]
     b3c:	0099      	lsls	r1, r3, #2
     b3e:	18cb      	adds	r3, r1, r3
     b40:	009b      	lsls	r3, r3, #2
     b42:	591b      	ldr	r3, [r3, r4]
     b44:	2b00      	cmp	r3, #0
     b46:	d0f0      	beq.n	b2a <vTaskSwitchContext+0x3a>
     b48:	4b11      	ldr	r3, [pc, #68]	; (b90 <vTaskSwitchContext+0xa0>)
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	4c11      	ldr	r4, [pc, #68]	; (b94 <vTaskSwitchContext+0xa4>)
     b4e:	009a      	lsls	r2, r3, #2
     b50:	18d1      	adds	r1, r2, r3
     b52:	0089      	lsls	r1, r1, #2
     b54:	1861      	adds	r1, r4, r1
     b56:	6848      	ldr	r0, [r1, #4]
     b58:	6840      	ldr	r0, [r0, #4]
     b5a:	6048      	str	r0, [r1, #4]
     b5c:	18d2      	adds	r2, r2, r3
     b5e:	0092      	lsls	r2, r2, #2
     b60:	3208      	adds	r2, #8
     b62:	18a2      	adds	r2, r4, r2
     b64:	4290      	cmp	r0, r2
     b66:	d105      	bne.n	b74 <vTaskSwitchContext+0x84>
     b68:	6841      	ldr	r1, [r0, #4]
     b6a:	009a      	lsls	r2, r3, #2
     b6c:	18d2      	adds	r2, r2, r3
     b6e:	0092      	lsls	r2, r2, #2
     b70:	18a2      	adds	r2, r4, r2
     b72:	6051      	str	r1, [r2, #4]
     b74:	009a      	lsls	r2, r3, #2
     b76:	18d3      	adds	r3, r2, r3
     b78:	009b      	lsls	r3, r3, #2
     b7a:	4a06      	ldr	r2, [pc, #24]	; (b94 <vTaskSwitchContext+0xa4>)
     b7c:	18d3      	adds	r3, r2, r3
     b7e:	685b      	ldr	r3, [r3, #4]
     b80:	68da      	ldr	r2, [r3, #12]
     b82:	4b05      	ldr	r3, [pc, #20]	; (b98 <vTaskSwitchContext+0xa8>)
     b84:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     b86:	bd10      	pop	{r4, pc}
     b88:	200000c8 	.word	0x200000c8
     b8c:	200000d8 	.word	0x200000d8
     b90:	200000d4 	.word	0x200000d4
     b94:	20000060 	.word	0x20000060
     b98:	200000c4 	.word	0x200000c4

00000b9c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9e:	4647      	mov	r7, r8
     ba0:	b480      	push	{r7}
     ba2:	b088      	sub	sp, #32
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     ba4:	6001      	str	r1, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ba6:	680c      	ldr	r4, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     ba8:	231c      	movs	r3, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     baa:	07a4      	lsls	r4, r4, #30
     bac:	d500      	bpl.n	bb0 <spi_init+0x14>
     bae:	e0d0      	b.n	d52 <spi_init+0x1b6>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bb0:	680c      	ldr	r4, [r1, #0]
		return STATUS_BUSY;
     bb2:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bb4:	07e4      	lsls	r4, r4, #31
     bb6:	d500      	bpl.n	bba <spi_init+0x1e>
     bb8:	e0cb      	b.n	d52 <spi_init+0x1b6>
     bba:	1c16      	adds	r6, r2, #0
     bbc:	4688      	mov	r8, r1
     bbe:	1c05      	adds	r5, r0, #0
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	4b66      	ldr	r3, [pc, #408]	; (d5c <spi_init+0x1c0>)
     bc4:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
     bc6:	2805      	cmp	r0, #5
     bc8:	d100      	bne.n	bcc <spi_init+0x30>
     bca:	e0b5      	b.n	d38 <spi_init+0x19c>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bcc:	1c07      	adds	r7, r0, #0
     bce:	3712      	adds	r7, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     bd0:	4963      	ldr	r1, [pc, #396]	; (d60 <spi_init+0x1c4>)
     bd2:	69cb      	ldr	r3, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2201      	movs	r2, #1
     bd6:	4082      	lsls	r2, r0
     bd8:	1c10      	adds	r0, r2, #0
     bda:	4318      	orrs	r0, r3
     bdc:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     bde:	a907      	add	r1, sp, #28
     be0:	2424      	movs	r4, #36	; 0x24
     be2:	5d33      	ldrb	r3, [r6, r4]
     be4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be6:	b2ff      	uxtb	r7, r7
     be8:	1c38      	adds	r0, r7, #0
     bea:	4b5e      	ldr	r3, [pc, #376]	; (d64 <spi_init+0x1c8>)
     bec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bee:	1c38      	adds	r0, r7, #0
     bf0:	4b5d      	ldr	r3, [pc, #372]	; (d68 <spi_init+0x1cc>)
     bf2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf4:	5d30      	ldrb	r0, [r6, r4]
     bf6:	2100      	movs	r1, #0
     bf8:	4b5c      	ldr	r3, [pc, #368]	; (d6c <spi_init+0x1d0>)
     bfa:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     bfc:	7833      	ldrb	r3, [r6, #0]
     bfe:	2b01      	cmp	r3, #1
     c00:	d000      	beq.n	c04 <spi_init+0x68>
     c02:	e0a0      	b.n	d46 <spi_init+0x1aa>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c04:	4643      	mov	r3, r8
     c06:	681a      	ldr	r2, [r3, #0]
     c08:	230c      	movs	r3, #12
     c0a:	4313      	orrs	r3, r2
     c0c:	4642      	mov	r2, r8
     c0e:	6013      	str	r3, [r2, #0]
     c10:	e099      	b.n	d46 <spi_init+0x1aa>
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     c12:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c14:	428b      	cmp	r3, r1
     c16:	d1fc      	bne.n	c12 <spi_init+0x76>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     c18:	2300      	movs	r3, #0
     c1a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c1c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c1e:	2400      	movs	r4, #0
     c20:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c22:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c24:	3336      	adds	r3, #54	; 0x36
     c26:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     c28:	3301      	adds	r3, #1
     c2a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     c2c:	3301      	adds	r3, #1
     c2e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     c30:	3b35      	subs	r3, #53	; 0x35
     c32:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     c34:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c36:	6828      	ldr	r0, [r5, #0]
     c38:	4b48      	ldr	r3, [pc, #288]	; (d5c <spi_init+0x1c0>)
     c3a:	4798      	blx	r3
     c3c:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c3e:	494c      	ldr	r1, [pc, #304]	; (d70 <spi_init+0x1d4>)
     c40:	4b4c      	ldr	r3, [pc, #304]	; (d74 <spi_init+0x1d8>)
     c42:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c44:	00bf      	lsls	r7, r7, #2
     c46:	4b4c      	ldr	r3, [pc, #304]	; (d78 <spi_init+0x1dc>)
     c48:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c4a:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c4c:	ab02      	add	r3, sp, #8
     c4e:	2280      	movs	r2, #128	; 0x80
     c50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c52:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c54:	3a7f      	subs	r2, #127	; 0x7f
     c56:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     c58:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     c5a:	7833      	ldrb	r3, [r6, #0]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d102      	bne.n	c66 <spi_init+0xca>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c60:	2200      	movs	r2, #0
     c62:	ab02      	add	r3, sp, #8
     c64:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     c66:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c68:	9303      	str	r3, [sp, #12]
     c6a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     c6c:	9304      	str	r3, [sp, #16]
     c6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     c70:	9305      	str	r3, [sp, #20]
     c72:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c74:	9306      	str	r3, [sp, #24]
     c76:	2400      	movs	r4, #0
     c78:	b2e1      	uxtb	r1, r4
     c7a:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c7c:	aa03      	add	r2, sp, #12
     c7e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     c80:	2800      	cmp	r0, #0
     c82:	d102      	bne.n	c8a <spi_init+0xee>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c84:	1c38      	adds	r0, r7, #0
     c86:	4b3d      	ldr	r3, [pc, #244]	; (d7c <spi_init+0x1e0>)
     c88:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c8a:	1c43      	adds	r3, r0, #1
     c8c:	d006      	beq.n	c9c <spi_init+0x100>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c8e:	466b      	mov	r3, sp
     c90:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c92:	0c00      	lsrs	r0, r0, #16
     c94:	b2c0      	uxtb	r0, r0
     c96:	a902      	add	r1, sp, #8
     c98:	4b39      	ldr	r3, [pc, #228]	; (d80 <spi_init+0x1e4>)
     c9a:	4798      	blx	r3
     c9c:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c9e:	2c04      	cmp	r4, #4
     ca0:	d1ea      	bne.n	c78 <spi_init+0xdc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     ca2:	7833      	ldrb	r3, [r6, #0]
     ca4:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     ca6:	7c33      	ldrb	r3, [r6, #16]
     ca8:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     caa:	7cb3      	ldrb	r3, [r6, #18]
     cac:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     cae:	7d33      	ldrb	r3, [r6, #20]
     cb0:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     cb2:	2200      	movs	r2, #0
     cb4:	466b      	mov	r3, sp
     cb6:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     cb8:	7833      	ldrb	r3, [r6, #0]
     cba:	2b01      	cmp	r3, #1
     cbc:	d113      	bne.n	ce6 <spi_init+0x14a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cbe:	6828      	ldr	r0, [r5, #0]
     cc0:	4b26      	ldr	r3, [pc, #152]	; (d5c <spi_init+0x1c0>)
     cc2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cc4:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     cc6:	b2c0      	uxtb	r0, r0
     cc8:	4b2e      	ldr	r3, [pc, #184]	; (d84 <spi_init+0x1e8>)
     cca:	4798      	blx	r3
     ccc:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     cce:	69b0      	ldr	r0, [r6, #24]
     cd0:	466b      	mov	r3, sp
     cd2:	1d9a      	adds	r2, r3, #6
     cd4:	4b2c      	ldr	r3, [pc, #176]	; (d88 <spi_init+0x1ec>)
     cd6:	4798      	blx	r3
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     cd8:	2317      	movs	r3, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     cda:	2800      	cmp	r0, #0
     cdc:	d139      	bne.n	d52 <spi_init+0x1b6>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     cde:	466b      	mov	r3, sp
     ce0:	3306      	adds	r3, #6
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     ce6:	68b3      	ldr	r3, [r6, #8]
     ce8:	6872      	ldr	r2, [r6, #4]
     cea:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     cec:	68f2      	ldr	r2, [r6, #12]
     cee:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     cf0:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     cf2:	7c71      	ldrb	r1, [r6, #17]
     cf4:	2900      	cmp	r1, #0
     cf6:	d103      	bne.n	d00 <spi_init+0x164>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     cf8:	4924      	ldr	r1, [pc, #144]	; (d8c <spi_init+0x1f0>)
     cfa:	7889      	ldrb	r1, [r1, #2]
     cfc:	0789      	lsls	r1, r1, #30
     cfe:	d501      	bpl.n	d04 <spi_init+0x168>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d00:	2180      	movs	r1, #128	; 0x80
     d02:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     d04:	7cb1      	ldrb	r1, [r6, #18]
     d06:	2900      	cmp	r1, #0
     d08:	d002      	beq.n	d10 <spi_init+0x174>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d0a:	2180      	movs	r1, #128	; 0x80
     d0c:	0289      	lsls	r1, r1, #10
     d0e:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     d10:	7cf1      	ldrb	r1, [r6, #19]
     d12:	2900      	cmp	r1, #0
     d14:	d002      	beq.n	d1c <spi_init+0x180>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     d16:	2180      	movs	r1, #128	; 0x80
     d18:	0089      	lsls	r1, r1, #2
     d1a:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     d1c:	7d31      	ldrb	r1, [r6, #20]
     d1e:	2900      	cmp	r1, #0
     d20:	d002      	beq.n	d28 <spi_init+0x18c>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d22:	2180      	movs	r1, #128	; 0x80
     d24:	0189      	lsls	r1, r1, #6
     d26:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     d28:	6839      	ldr	r1, [r7, #0]
     d2a:	430b      	orrs	r3, r1
     d2c:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	431a      	orrs	r2, r3
     d32:	607a      	str	r2, [r7, #4]

	return STATUS_OK;
     d34:	2300      	movs	r3, #0
     d36:	e00c      	b.n	d52 <spi_init+0x1b6>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     d38:	4a09      	ldr	r2, [pc, #36]	; (d60 <spi_init+0x1c4>)
     d3a:	6a11      	ldr	r1, [r2, #32]
     d3c:	2302      	movs	r3, #2
     d3e:	430b      	orrs	r3, r1
     d40:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
     d42:	2718      	movs	r7, #24
     d44:	e74b      	b.n	bde <spi_init+0x42>
     d46:	1c2b      	adds	r3, r5, #0
     d48:	330c      	adds	r3, #12
     d4a:	1c29      	adds	r1, r5, #0
     d4c:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d4e:	2200      	movs	r2, #0
     d50:	e75f      	b.n	c12 <spi_init+0x76>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d52:	1c18      	adds	r0, r3, #0
     d54:	b008      	add	sp, #32
     d56:	bc04      	pop	{r2}
     d58:	4690      	mov	r8, r2
     d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d5c:	00000799 	.word	0x00000799
     d60:	40000400 	.word	0x40000400
     d64:	00001991 	.word	0x00001991
     d68:	00001929 	.word	0x00001929
     d6c:	000005e1 	.word	0x000005e1
     d70:	00000fa5 	.word	0x00000fa5
     d74:	00001159 	.word	0x00001159
     d78:	20000178 	.word	0x20000178
     d7c:	0000062d 	.word	0x0000062d
     d80:	00001a8d 	.word	0x00001a8d
     d84:	000019b5 	.word	0x000019b5
     d88:	000005b9 	.word	0x000005b9
     d8c:	41002000 	.word	0x41002000

00000d90 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     d90:	b5f0      	push	{r4, r5, r6, r7, lr}
     d92:	465f      	mov	r7, fp
     d94:	4656      	mov	r6, sl
     d96:	464d      	mov	r5, r9
     d98:	4644      	mov	r4, r8
     d9a:	b4f0      	push	{r4, r5, r6, r7}
     d9c:	b085      	sub	sp, #20
     d9e:	4688      	mov	r8, r1
	
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     da0:	2338      	movs	r3, #56	; 0x38
     da2:	5cc3      	ldrb	r3, [r0, r3]
     da4:	b2db      	uxtb	r3, r3
     da6:	2b05      	cmp	r3, #5
     da8:	d06a      	beq.n	e80 <spi_write_buffer_wait+0xf0>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     daa:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     dac:	2a00      	cmp	r2, #0
     dae:	d067      	beq.n	e80 <spi_write_buffer_wait+0xf0>
     db0:	e05a      	b.n	e68 <spi_write_buffer_wait+0xd8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     db2:	6804      	ldr	r4, [r0, #0]
     db4:	9f00      	ldr	r7, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     db6:	7e23      	ldrb	r3, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     db8:	4213      	tst	r3, r2
     dba:	d0fc      	beq.n	db6 <spi_write_buffer_wait+0x26>
     dbc:	9700      	str	r7, [sp, #0]
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     dbe:	1c4b      	adds	r3, r1, #1
     dc0:	b29b      	uxth	r3, r3
     dc2:	4698      	mov	r8, r3
     dc4:	5c7b      	ldrb	r3, [r7, r1]
     dc6:	469a      	mov	sl, r3

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dc8:	7983      	ldrb	r3, [r0, #6]
     dca:	2b01      	cmp	r3, #1
     dcc:	d006      	beq.n	ddc <spi_write_buffer_wait+0x4c>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     dce:	4653      	mov	r3, sl
     dd0:	4669      	mov	r1, sp
     dd2:	80cb      	strh	r3, [r1, #6]
     dd4:	88cb      	ldrh	r3, [r1, #6]
     dd6:	469c      	mov	ip, r3
     dd8:	4641      	mov	r1, r8
     dda:	e008      	b.n	dee <spi_write_buffer_wait+0x5e>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     ddc:	3102      	adds	r1, #2
     dde:	b289      	uxth	r1, r1
     de0:	4643      	mov	r3, r8
     de2:	9f00      	ldr	r7, [sp, #0]
     de4:	5cfb      	ldrb	r3, [r7, r3]
     de6:	021b      	lsls	r3, r3, #8
     de8:	4657      	mov	r7, sl
     dea:	433b      	orrs	r3, r7
     dec:	469c      	mov	ip, r3
     dee:	7e23      	ldrb	r3, [r4, #24]
     df0:	4698      	mov	r8, r3
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     df2:	2305      	movs	r3, #5
     df4:	1c1f      	adds	r7, r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     df6:	4643      	mov	r3, r8
     df8:	4213      	tst	r3, r2
     dfa:	d005      	beq.n	e08 <spi_write_buffer_wait+0x78>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     dfc:	4663      	mov	r3, ip
     dfe:	05db      	lsls	r3, r3, #23
     e00:	0ddb      	lsrs	r3, r3, #23
     e02:	62a3      	str	r3, [r4, #40]	; 0x28

	return STATUS_OK;
     e04:	2300      	movs	r3, #0
     e06:	1c1f      	adds	r7, r3, #0
		}

		/* Write the data to send */
		statuscode = spi_write(module, data_to_send);
     e08:	ab02      	add	r3, sp, #8
     e0a:	71df      	strb	r7, [r3, #7]

		if (module->receiver_enabled) {
     e0c:	79c3      	ldrb	r3, [r0, #7]
     e0e:	2b00      	cmp	r3, #0
     e10:	d01b      	beq.n	e4a <spi_write_buffer_wait+0xba>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e12:	6803      	ldr	r3, [r0, #0]
     e14:	1c1c      	adds	r4, r3, #0
     e16:	9f00      	ldr	r7, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e18:	7e23      	ldrb	r3, [r4, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     e1a:	422b      	tst	r3, r5
     e1c:	d0fc      	beq.n	e18 <spi_write_buffer_wait+0x88>
     e1e:	46a4      	mov	ip, r4
     e20:	9700      	str	r7, [sp, #0]
     e22:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     e24:	422b      	tst	r3, r5
     e26:	d010      	beq.n	e4a <spi_write_buffer_wait+0xba>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e28:	8b63      	ldrh	r3, [r4, #26]
     e2a:	422b      	tst	r3, r5
     e2c:	d005      	beq.n	e3a <spi_write_buffer_wait+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     e2e:	8b63      	ldrh	r3, [r4, #26]
     e30:	465c      	mov	r4, fp
     e32:	4323      	orrs	r3, r4
     e34:	b29b      	uxth	r3, r3
     e36:	4664      	mov	r4, ip
     e38:	8363      	strh	r3, [r4, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e3a:	7983      	ldrb	r3, [r0, #6]
     e3c:	2b01      	cmp	r3, #1
     e3e:	d102      	bne.n	e46 <spi_write_buffer_wait+0xb6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e40:	4663      	mov	r3, ip
     e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e44:	e001      	b.n	e4a <spi_write_buffer_wait+0xba>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e46:	4663      	mov	r3, ip
     e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     e4a:	3e01      	subs	r6, #1
     e4c:	b2b6      	uxth	r6, r6
     e4e:	454e      	cmp	r6, r9
     e50:	d1af      	bne.n	db2 <spi_write_buffer_wait+0x22>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     e52:	7942      	ldrb	r2, [r0, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     e54:	2300      	movs	r3, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     e56:	2a01      	cmp	r2, #1
     e58:	d112      	bne.n	e80 <spi_write_buffer_wait+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e5a:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e5c:	3201      	adds	r2, #1
     e5e:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     e60:	4213      	tst	r3, r2
     e62:	d0fc      	beq.n	e5e <spi_write_buffer_wait+0xce>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     e64:	2300      	movs	r3, #0
     e66:	e00b      	b.n	e80 <spi_write_buffer_wait+0xf0>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     e68:	3a01      	subs	r2, #1
     e6a:	b296      	uxth	r6, r2
     e6c:	2100      	movs	r1, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e6e:	2201      	movs	r2, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e70:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     e72:	2304      	movs	r3, #4
     e74:	469b      	mov	fp, r3
     e76:	4b06      	ldr	r3, [pc, #24]	; (e90 <spi_write_buffer_wait+0x100>)
     e78:	4699      	mov	r9, r3
     e7a:	4643      	mov	r3, r8
     e7c:	9300      	str	r3, [sp, #0]
     e7e:	e798      	b.n	db2 <spi_write_buffer_wait+0x22>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     e80:	1c18      	adds	r0, r3, #0
     e82:	b005      	add	sp, #20
     e84:	bc3c      	pop	{r2, r3, r4, r5}
     e86:	4690      	mov	r8, r2
     e88:	4699      	mov	r9, r3
     e8a:	46a2      	mov	sl, r4
     e8c:	46ab      	mov	fp, r5
     e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e90:	0000ffff 	.word	0x0000ffff

00000e94 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	465f      	mov	r7, fp
     e98:	4656      	mov	r6, sl
     e9a:	464d      	mov	r5, r9
     e9c:	4644      	mov	r4, r8
     e9e:	b4f0      	push	{r4, r5, r6, r7}
     ea0:	b083      	sub	sp, #12
     ea2:	1c07      	adds	r7, r0, #0
     ea4:	4691      	mov	r9, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     ea6:	2238      	movs	r2, #56	; 0x38
     ea8:	5c80      	ldrb	r0, [r0, r2]
     eaa:	b2c0      	uxtb	r0, r0
     eac:	2805      	cmp	r0, #5
     eae:	d072      	beq.n	f96 <spi_transceive_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     eb0:	2017      	movs	r0, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     eb2:	2b00      	cmp	r3, #0
     eb4:	d06f      	beq.n	f96 <spi_transceive_buffer_wait+0x102>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     eb6:	79fa      	ldrb	r2, [r7, #7]
		return STATUS_ERR_DENIED;
     eb8:	3005      	adds	r0, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     eba:	2a00      	cmp	r2, #0
     ebc:	d06b      	beq.n	f96 <spi_transceive_buffer_wait+0x102>
     ebe:	2200      	movs	r2, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ec0:	2601      	movs	r6, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ec2:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ec4:	2004      	movs	r0, #4
     ec6:	4683      	mov	fp, r0
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     ec8:	9300      	str	r3, [sp, #0]
     eca:	468c      	mov	ip, r1
     ecc:	1c11      	adds	r1, r2, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ece:	683c      	ldr	r4, [r7, #0]
     ed0:	9b00      	ldr	r3, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	7e20      	ldrb	r0, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     ed4:	4230      	tst	r0, r6
     ed6:	d0fc      	beq.n	ed2 <spi_transceive_buffer_wait+0x3e>
     ed8:	9300      	str	r3, [sp, #0]
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     eda:	1c50      	adds	r0, r2, #1
     edc:	b280      	uxth	r0, r0
     ede:	4680      	mov	r8, r0
     ee0:	4660      	mov	r0, ip
     ee2:	5c83      	ldrb	r3, [r0, r2]
     ee4:	1c18      	adds	r0, r3, #0
     ee6:	9301      	str	r3, [sp, #4]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ee8:	79bb      	ldrb	r3, [r7, #6]
     eea:	2b01      	cmp	r3, #1
     eec:	d002      	beq.n	ef4 <spi_transceive_buffer_wait+0x60>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     eee:	b280      	uxth	r0, r0
     ef0:	4642      	mov	r2, r8
     ef2:	e007      	b.n	f04 <spi_transceive_buffer_wait+0x70>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     ef4:	3202      	adds	r2, #2
     ef6:	b292      	uxth	r2, r2
     ef8:	4663      	mov	r3, ip
     efa:	4640      	mov	r0, r8
     efc:	5c1b      	ldrb	r3, [r3, r0]
     efe:	021b      	lsls	r3, r3, #8
     f00:	9801      	ldr	r0, [sp, #4]
     f02:	4318      	orrs	r0, r3
     f04:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     f06:	4233      	tst	r3, r6
     f08:	d002      	beq.n	f10 <spi_transceive_buffer_wait+0x7c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f0a:	05c0      	lsls	r0, r0, #23
     f0c:	0dc0      	lsrs	r0, r0, #23
     f0e:	62a0      	str	r0, [r4, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f10:	683c      	ldr	r4, [r7, #0]
     f12:	9b00      	ldr	r3, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f14:	7e20      	ldrb	r0, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     f16:	4228      	tst	r0, r5
     f18:	d0fc      	beq.n	f14 <spi_transceive_buffer_wait+0x80>
     f1a:	9300      	str	r3, [sp, #0]
     f1c:	7e20      	ldrb	r0, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f1e:	4228      	tst	r0, r5
     f20:	d017      	beq.n	f52 <spi_transceive_buffer_wait+0xbe>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f22:	8b63      	ldrh	r3, [r4, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     f24:	2000      	movs	r0, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f26:	422b      	tst	r3, r5
     f28:	d005      	beq.n	f36 <spi_transceive_buffer_wait+0xa2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f2a:	8b60      	ldrh	r0, [r4, #26]
     f2c:	465b      	mov	r3, fp
     f2e:	4318      	orrs	r0, r3
     f30:	b280      	uxth	r0, r0
     f32:	8360      	strh	r0, [r4, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     f34:	201e      	movs	r0, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f36:	79bb      	ldrb	r3, [r7, #6]
     f38:	2b01      	cmp	r3, #1
     f3a:	d104      	bne.n	f46 <spi_transceive_buffer_wait+0xb2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f3c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f3e:	05e4      	lsls	r4, r4, #23
     f40:	0de3      	lsrs	r3, r4, #23
     f42:	4698      	mov	r8, r3
     f44:	e002      	b.n	f4c <spi_transceive_buffer_wait+0xb8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f46:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f48:	b2e3      	uxtb	r3, r4
     f4a:	4698      	mov	r8, r3
		uint16_t received_data = 0;
		rx_length--;

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     f4c:	2800      	cmp	r0, #0
     f4e:	d002      	beq.n	f56 <spi_transceive_buffer_wait+0xc2>
     f50:	e021      	b.n	f96 <spi_transceive_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     f52:	2010      	movs	r0, #16
     f54:	e01f      	b.n	f96 <spi_transceive_buffer_wait+0x102>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     f56:	1c48      	adds	r0, r1, #1
     f58:	b280      	uxth	r0, r0
     f5a:	464b      	mov	r3, r9
     f5c:	4644      	mov	r4, r8
     f5e:	545c      	strb	r4, [r3, r1]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f60:	79bc      	ldrb	r4, [r7, #6]
     f62:	2c01      	cmp	r4, #1
     f64:	d106      	bne.n	f74 <spi_transceive_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     f66:	3102      	adds	r1, #2
     f68:	b289      	uxth	r1, r1
     f6a:	4643      	mov	r3, r8
     f6c:	0a1c      	lsrs	r4, r3, #8
     f6e:	464b      	mov	r3, r9
     f70:	541c      	strb	r4, [r3, r0]
     f72:	e000      	b.n	f76 <spi_transceive_buffer_wait+0xe2>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     f74:	1c01      	adds	r1, r0, #0
     f76:	9b00      	ldr	r3, [sp, #0]
     f78:	3b01      	subs	r3, #1
     f7a:	b29b      	uxth	r3, r3
     f7c:	9300      	str	r3, [sp, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     f7e:	2b00      	cmp	r3, #0
     f80:	d1a5      	bne.n	ece <spi_transceive_buffer_wait+0x3a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f82:	797b      	ldrb	r3, [r7, #5]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     f84:	2000      	movs	r0, #0
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f86:	2b01      	cmp	r3, #1
     f88:	d105      	bne.n	f96 <spi_transceive_buffer_wait+0x102>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f8a:	6839      	ldr	r1, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f8c:	2202      	movs	r2, #2
     f8e:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     f90:	4213      	tst	r3, r2
     f92:	d0fc      	beq.n	f8e <spi_transceive_buffer_wait+0xfa>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     f94:	2000      	movs	r0, #0
}
     f96:	b003      	add	sp, #12
     f98:	bc3c      	pop	{r2, r3, r4, r5}
     f9a:	4690      	mov	r8, r2
     f9c:	4699      	mov	r9, r3
     f9e:	46a2      	mov	sl, r4
     fa0:	46ab      	mov	fp, r5
     fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fa4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     fa6:	0080      	lsls	r0, r0, #2
     fa8:	4b68      	ldr	r3, [pc, #416]	; (114c <_spi_interrupt_handler+0x1a8>)
     faa:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fac:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     fae:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     fb0:	5ce3      	ldrb	r3, [r4, r3]
     fb2:	2237      	movs	r2, #55	; 0x37
     fb4:	5ca7      	ldrb	r7, [r4, r2]
     fb6:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     fb8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     fba:	7db5      	ldrb	r5, [r6, #22]
     fbc:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     fbe:	07eb      	lsls	r3, r5, #31
     fc0:	d53d      	bpl.n	103e <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     fc2:	7963      	ldrb	r3, [r4, #5]
     fc4:	2b01      	cmp	r3, #1
     fc6:	d13a      	bne.n	103e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
     fc8:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     fca:	2b00      	cmp	r3, #0
     fcc:	d10f      	bne.n	fee <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     fce:	4b60      	ldr	r3, [pc, #384]	; (1150 <_spi_interrupt_handler+0x1ac>)
     fd0:	881b      	ldrh	r3, [r3, #0]
     fd2:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     fd4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fd6:	3b01      	subs	r3, #1
     fd8:	b29b      	uxth	r3, r3
     fda:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     fdc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fde:	b29b      	uxth	r3, r3
     fe0:	2b00      	cmp	r3, #0
     fe2:	d101      	bne.n	fe8 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     fe4:	3301      	adds	r3, #1
     fe6:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
     fe8:	7963      	ldrb	r3, [r4, #5]
     fea:	2b01      	cmp	r3, #1
     fec:	d127      	bne.n	103e <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     fee:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     ff0:	2b00      	cmp	r3, #0
     ff2:	d024      	beq.n	103e <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ff4:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     ff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     ff8:	780b      	ldrb	r3, [r1, #0]
     ffa:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     ffc:	1c4b      	adds	r3, r1, #1
     ffe:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1000:	79a3      	ldrb	r3, [r4, #6]
    1002:	2b01      	cmp	r3, #1
    1004:	d001      	beq.n	100a <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1006:	b293      	uxth	r3, r2
    1008:	e004      	b.n	1014 <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    100a:	784b      	ldrb	r3, [r1, #1]
    100c:	021b      	lsls	r3, r3, #8
    100e:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1010:	3102      	adds	r1, #2
    1012:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1014:	05db      	lsls	r3, r3, #23
    1016:	0ddb      	lsrs	r3, r3, #23
    1018:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    101a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    101c:	3b01      	subs	r3, #1
    101e:	b29b      	uxth	r3, r3
    1020:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1022:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1024:	b29b      	uxth	r3, r3
    1026:	2b00      	cmp	r3, #0
    1028:	d109      	bne.n	103e <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    102a:	3301      	adds	r3, #1
    102c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    102e:	7a63      	ldrb	r3, [r4, #9]
    1030:	2b01      	cmp	r3, #1
    1032:	d104      	bne.n	103e <_spi_interrupt_handler+0x9a>
    1034:	79e3      	ldrb	r3, [r4, #7]
    1036:	2b00      	cmp	r3, #0
    1038:	d101      	bne.n	103e <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    103a:	3302      	adds	r3, #2
    103c:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    103e:	076b      	lsls	r3, r5, #29
    1040:	d561      	bpl.n	1106 <_spi_interrupt_handler+0x162>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1042:	8b73      	ldrh	r3, [r6, #26]
    1044:	075b      	lsls	r3, r3, #29
    1046:	d514      	bpl.n	1072 <_spi_interrupt_handler+0xce>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1048:	7a63      	ldrb	r3, [r4, #9]
    104a:	2b01      	cmp	r3, #1
    104c:	d00b      	beq.n	1066 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    104e:	221e      	movs	r2, #30
    1050:	2338      	movs	r3, #56	; 0x38
    1052:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1054:	3b35      	subs	r3, #53	; 0x35
    1056:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1058:	3302      	adds	r3, #2
    105a:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    105c:	073b      	lsls	r3, r7, #28
    105e:	d502      	bpl.n	1066 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1060:	1c20      	adds	r0, r4, #0
    1062:	69a3      	ldr	r3, [r4, #24]
    1064:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1066:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1068:	8b72      	ldrh	r2, [r6, #26]
    106a:	2304      	movs	r3, #4
    106c:	4313      	orrs	r3, r2
    106e:	8373      	strh	r3, [r6, #26]
    1070:	e049      	b.n	1106 <_spi_interrupt_handler+0x162>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1072:	7a63      	ldrb	r3, [r4, #9]
    1074:	2b01      	cmp	r3, #1
    1076:	d116      	bne.n	10a6 <_spi_interrupt_handler+0x102>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1078:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    107c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    107e:	3b01      	subs	r3, #1
    1080:	b29b      	uxth	r3, r3
    1082:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    1084:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1086:	b29b      	uxth	r3, r3
    1088:	2b00      	cmp	r3, #0
    108a:	d13c      	bne.n	1106 <_spi_interrupt_handler+0x162>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    108c:	3304      	adds	r3, #4
    108e:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1090:	2200      	movs	r2, #0
    1092:	3334      	adds	r3, #52	; 0x34
    1094:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1096:	3b35      	subs	r3, #53	; 0x35
    1098:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    109a:	07fb      	lsls	r3, r7, #31
    109c:	d533      	bpl.n	1106 <_spi_interrupt_handler+0x162>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    109e:	1c20      	adds	r0, r4, #0
    10a0:	68e3      	ldr	r3, [r4, #12]
    10a2:	4798      	blx	r3
    10a4:	e02f      	b.n	1106 <_spi_interrupt_handler+0x162>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10a6:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10aa:	05db      	lsls	r3, r3, #23
    10ac:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    10ae:	b2da      	uxtb	r2, r3
    10b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    10b2:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    10b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    10b6:	1c51      	adds	r1, r2, #1
    10b8:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10ba:	79a1      	ldrb	r1, [r4, #6]
    10bc:	2901      	cmp	r1, #1
    10be:	d104      	bne.n	10ca <_spi_interrupt_handler+0x126>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10c0:	0a1b      	lsrs	r3, r3, #8
    10c2:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    10c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c6:	3301      	adds	r3, #1
    10c8:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    10ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10cc:	3b01      	subs	r3, #1
    10ce:	b29b      	uxth	r3, r3
    10d0:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    10d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10d4:	b29b      	uxth	r3, r3
    10d6:	2b00      	cmp	r3, #0
    10d8:	d115      	bne.n	1106 <_spi_interrupt_handler+0x162>
					module->status = STATUS_OK;
    10da:	2200      	movs	r2, #0
    10dc:	3338      	adds	r3, #56	; 0x38
    10de:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    10e0:	3b34      	subs	r3, #52	; 0x34
    10e2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    10e4:	7a63      	ldrb	r3, [r4, #9]
    10e6:	2b02      	cmp	r3, #2
    10e8:	d105      	bne.n	10f6 <_spi_interrupt_handler+0x152>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    10ea:	077b      	lsls	r3, r7, #29
    10ec:	d50b      	bpl.n	1106 <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    10ee:	1c20      	adds	r0, r4, #0
    10f0:	6963      	ldr	r3, [r4, #20]
    10f2:	4798      	blx	r3
    10f4:	e007      	b.n	1106 <_spi_interrupt_handler+0x162>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    10f6:	7a63      	ldrb	r3, [r4, #9]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d104      	bne.n	1106 <_spi_interrupt_handler+0x162>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    10fc:	07bb      	lsls	r3, r7, #30
    10fe:	d502      	bpl.n	1106 <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1100:	1c20      	adds	r0, r4, #0
    1102:	6923      	ldr	r3, [r4, #16]
    1104:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1106:	07ab      	lsls	r3, r5, #30
    1108:	d514      	bpl.n	1134 <_spi_interrupt_handler+0x190>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    110a:	7963      	ldrb	r3, [r4, #5]
    110c:	2b01      	cmp	r3, #1
    110e:	d111      	bne.n	1134 <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1110:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1112:	2b01      	cmp	r3, #1
    1114:	d10e      	bne.n	1134 <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1116:	79e3      	ldrb	r3, [r4, #7]
    1118:	2b00      	cmp	r3, #0
    111a:	d10b      	bne.n	1134 <_spi_interrupt_handler+0x190>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    111c:	3302      	adds	r3, #2
    111e:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1120:	3301      	adds	r3, #1
    1122:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1124:	2200      	movs	r2, #0
    1126:	3335      	adds	r3, #53	; 0x35
    1128:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    112a:	07fb      	lsls	r3, r7, #31
    112c:	d502      	bpl.n	1134 <_spi_interrupt_handler+0x190>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    112e:	1c20      	adds	r0, r4, #0
    1130:	68e3      	ldr	r3, [r4, #12]
    1132:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1134:	09ed      	lsrs	r5, r5, #7
    1136:	d007      	beq.n	1148 <_spi_interrupt_handler+0x1a4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1138:	2380      	movs	r3, #128	; 0x80
    113a:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    113c:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    113e:	067b      	lsls	r3, r7, #25
    1140:	d502      	bpl.n	1148 <_spi_interrupt_handler+0x1a4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1142:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1144:	1c20      	adds	r0, r4, #0
    1146:	4798      	blx	r3
		}
	}
#  endif
}
    1148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	20000178 	.word	0x20000178
    1150:	20000174 	.word	0x20000174

00001154 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1154:	4770      	bx	lr
    1156:	46c0      	nop			; (mov r8, r8)

00001158 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1158:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <_sercom_set_handler+0x2c>)
    115c:	781b      	ldrb	r3, [r3, #0]
    115e:	2b00      	cmp	r3, #0
    1160:	d10c      	bne.n	117c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1162:	4f09      	ldr	r7, [pc, #36]	; (1188 <_sercom_set_handler+0x30>)
    1164:	4e09      	ldr	r6, [pc, #36]	; (118c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1166:	4d0a      	ldr	r5, [pc, #40]	; (1190 <_sercom_set_handler+0x38>)
    1168:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    116a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    116c:	195a      	adds	r2, r3, r5
    116e:	6014      	str	r4, [r2, #0]
    1170:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1172:	2b18      	cmp	r3, #24
    1174:	d1f9      	bne.n	116a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1176:	2201      	movs	r2, #1
    1178:	4b02      	ldr	r3, [pc, #8]	; (1184 <_sercom_set_handler+0x2c>)
    117a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    117c:	0080      	lsls	r0, r0, #2
    117e:	4b02      	ldr	r3, [pc, #8]	; (1188 <_sercom_set_handler+0x30>)
    1180:	50c1      	str	r1, [r0, r3]
}
    1182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1184:	200000dc 	.word	0x200000dc
    1188:	200000e0 	.word	0x200000e0
    118c:	00001155 	.word	0x00001155
    1190:	20000178 	.word	0x20000178

00001194 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1194:	b510      	push	{r4, lr}
    1196:	b082      	sub	sp, #8
    1198:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    119a:	4668      	mov	r0, sp
    119c:	4905      	ldr	r1, [pc, #20]	; (11b4 <_sercom_get_interrupt_vector+0x20>)
    119e:	2206      	movs	r2, #6
    11a0:	4b05      	ldr	r3, [pc, #20]	; (11b8 <_sercom_get_interrupt_vector+0x24>)
    11a2:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11a4:	1c20      	adds	r0, r4, #0
    11a6:	4b05      	ldr	r3, [pc, #20]	; (11bc <_sercom_get_interrupt_vector+0x28>)
    11a8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11aa:	466b      	mov	r3, sp
    11ac:	5618      	ldrsb	r0, [r3, r0]
}
    11ae:	b002      	add	sp, #8
    11b0:	bd10      	pop	{r4, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	00002258 	.word	0x00002258
    11b8:	000021fd 	.word	0x000021fd
    11bc:	00000799 	.word	0x00000799

000011c0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11c0:	b508      	push	{r3, lr}
    11c2:	4b02      	ldr	r3, [pc, #8]	; (11cc <SERCOM0_Handler+0xc>)
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	2000      	movs	r0, #0
    11c8:	4798      	blx	r3
    11ca:	bd08      	pop	{r3, pc}
    11cc:	200000e0 	.word	0x200000e0

000011d0 <SERCOM1_Handler>:
    11d0:	b508      	push	{r3, lr}
    11d2:	4b02      	ldr	r3, [pc, #8]	; (11dc <SERCOM1_Handler+0xc>)
    11d4:	685b      	ldr	r3, [r3, #4]
    11d6:	2001      	movs	r0, #1
    11d8:	4798      	blx	r3
    11da:	bd08      	pop	{r3, pc}
    11dc:	200000e0 	.word	0x200000e0

000011e0 <SERCOM2_Handler>:
    11e0:	b508      	push	{r3, lr}
    11e2:	4b02      	ldr	r3, [pc, #8]	; (11ec <SERCOM2_Handler+0xc>)
    11e4:	689b      	ldr	r3, [r3, #8]
    11e6:	2002      	movs	r0, #2
    11e8:	4798      	blx	r3
    11ea:	bd08      	pop	{r3, pc}
    11ec:	200000e0 	.word	0x200000e0

000011f0 <SERCOM3_Handler>:
    11f0:	b508      	push	{r3, lr}
    11f2:	4b02      	ldr	r3, [pc, #8]	; (11fc <SERCOM3_Handler+0xc>)
    11f4:	68db      	ldr	r3, [r3, #12]
    11f6:	2003      	movs	r0, #3
    11f8:	4798      	blx	r3
    11fa:	bd08      	pop	{r3, pc}
    11fc:	200000e0 	.word	0x200000e0

00001200 <SERCOM4_Handler>:
    1200:	b508      	push	{r3, lr}
    1202:	4b02      	ldr	r3, [pc, #8]	; (120c <SERCOM4_Handler+0xc>)
    1204:	691b      	ldr	r3, [r3, #16]
    1206:	2004      	movs	r0, #4
    1208:	4798      	blx	r3
    120a:	bd08      	pop	{r3, pc}
    120c:	200000e0 	.word	0x200000e0

00001210 <SERCOM5_Handler>:
    1210:	b508      	push	{r3, lr}
    1212:	4b02      	ldr	r3, [pc, #8]	; (121c <SERCOM5_Handler+0xc>)
    1214:	695b      	ldr	r3, [r3, #20]
    1216:	2005      	movs	r0, #5
    1218:	4798      	blx	r3
    121a:	bd08      	pop	{r3, pc}
    121c:	200000e0 	.word	0x200000e0

00001220 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1220:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1222:	2000      	movs	r0, #0
    1224:	4b08      	ldr	r3, [pc, #32]	; (1248 <delay_init+0x28>)
    1226:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1228:	4c08      	ldr	r4, [pc, #32]	; (124c <delay_init+0x2c>)
    122a:	21fa      	movs	r1, #250	; 0xfa
    122c:	0089      	lsls	r1, r1, #2
    122e:	47a0      	blx	r4
    1230:	4b07      	ldr	r3, [pc, #28]	; (1250 <delay_init+0x30>)
    1232:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1234:	21fa      	movs	r1, #250	; 0xfa
    1236:	0089      	lsls	r1, r1, #2
    1238:	47a0      	blx	r4
    123a:	4b06      	ldr	r3, [pc, #24]	; (1254 <delay_init+0x34>)
    123c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    123e:	2205      	movs	r2, #5
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <delay_init+0x38>)
    1242:	601a      	str	r2, [r3, #0]
}
    1244:	bd10      	pop	{r4, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	000018bd 	.word	0x000018bd
    124c:	00001fc1 	.word	0x00001fc1
    1250:	20000008 	.word	0x20000008
    1254:	20000004 	.word	0x20000004
    1258:	e000e010 	.word	0xe000e010

0000125c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    125c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    125e:	4b08      	ldr	r3, [pc, #32]	; (1280 <delay_cycles_us+0x24>)
    1260:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1262:	4a08      	ldr	r2, [pc, #32]	; (1284 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1264:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1266:	2180      	movs	r1, #128	; 0x80
    1268:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    126a:	e006      	b.n	127a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    126c:	2c00      	cmp	r4, #0
    126e:	d004      	beq.n	127a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    1270:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1272:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1274:	6813      	ldr	r3, [r2, #0]
    1276:	420b      	tst	r3, r1
    1278:	d0fc      	beq.n	1274 <delay_cycles_us+0x18>
    127a:	3801      	subs	r0, #1
    127c:	d2f6      	bcs.n	126c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    127e:	bd30      	pop	{r4, r5, pc}
    1280:	20000004 	.word	0x20000004
    1284:	e000e010 	.word	0xe000e010

00001288 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1288:	b500      	push	{lr}
    128a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    128c:	ab01      	add	r3, sp, #4
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1292:	780a      	ldrb	r2, [r1, #0]
    1294:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1296:	784a      	ldrb	r2, [r1, #1]
    1298:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    129a:	788a      	ldrb	r2, [r1, #2]
    129c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    129e:	1c19      	adds	r1, r3, #0
    12a0:	4b01      	ldr	r3, [pc, #4]	; (12a8 <port_pin_set_config+0x20>)
    12a2:	4798      	blx	r3
}
    12a4:	b003      	add	sp, #12
    12a6:	bd00      	pop	{pc}
    12a8:	00001a8d 	.word	0x00001a8d

000012ac <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    12ac:	4770      	bx	lr
    12ae:	46c0      	nop			; (mov r8, r8)

000012b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    12b0:	4b0c      	ldr	r3, [pc, #48]	; (12e4 <cpu_irq_enter_critical+0x34>)
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d110      	bne.n	12da <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12b8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    12bc:	2b00      	cmp	r3, #0
    12be:	d109      	bne.n	12d4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12c2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    12c6:	2200      	movs	r2, #0
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <cpu_irq_enter_critical+0x38>)
    12ca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    12cc:	3201      	adds	r2, #1
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <cpu_irq_enter_critical+0x3c>)
    12d0:	701a      	strb	r2, [r3, #0]
    12d2:	e002      	b.n	12da <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    12d4:	2200      	movs	r2, #0
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <cpu_irq_enter_critical+0x3c>)
    12d8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    12da:	4a02      	ldr	r2, [pc, #8]	; (12e4 <cpu_irq_enter_critical+0x34>)
    12dc:	6813      	ldr	r3, [r2, #0]
    12de:	3301      	adds	r3, #1
    12e0:	6013      	str	r3, [r2, #0]
}
    12e2:	4770      	bx	lr
    12e4:	200000f8 	.word	0x200000f8
    12e8:	2000000c 	.word	0x2000000c
    12ec:	200000fc 	.word	0x200000fc

000012f0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    12f0:	4b08      	ldr	r3, [pc, #32]	; (1314 <cpu_irq_leave_critical+0x24>)
    12f2:	681a      	ldr	r2, [r3, #0]
    12f4:	3a01      	subs	r2, #1
    12f6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d109      	bne.n	1312 <cpu_irq_leave_critical+0x22>
    12fe:	4b06      	ldr	r3, [pc, #24]	; (1318 <cpu_irq_leave_critical+0x28>)
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	2b00      	cmp	r3, #0
    1304:	d005      	beq.n	1312 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1306:	2201      	movs	r2, #1
    1308:	4b04      	ldr	r3, [pc, #16]	; (131c <cpu_irq_leave_critical+0x2c>)
    130a:	701a      	strb	r2, [r3, #0]
    130c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1310:	b662      	cpsie	i
	}
}
    1312:	4770      	bx	lr
    1314:	200000f8 	.word	0x200000f8
    1318:	200000fc 	.word	0x200000fc
    131c:	2000000c 	.word	0x2000000c

00001320 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1320:	b508      	push	{r3, lr}
	switch (clock_source) {
    1322:	2808      	cmp	r0, #8
    1324:	d803      	bhi.n	132e <system_clock_source_get_hz+0xe>
    1326:	0080      	lsls	r0, r0, #2
    1328:	4b1c      	ldr	r3, [pc, #112]	; (139c <system_clock_source_get_hz+0x7c>)
    132a:	581b      	ldr	r3, [r3, r0]
    132c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    132e:	2000      	movs	r0, #0
    1330:	e032      	b.n	1398 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1332:	4b1b      	ldr	r3, [pc, #108]	; (13a0 <system_clock_source_get_hz+0x80>)
    1334:	6918      	ldr	r0, [r3, #16]
    1336:	e02f      	b.n	1398 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1338:	4b1a      	ldr	r3, [pc, #104]	; (13a4 <system_clock_source_get_hz+0x84>)
    133a:	7d18      	ldrb	r0, [r3, #20]
    133c:	0700      	lsls	r0, r0, #28
    133e:	0f80      	lsrs	r0, r0, #30
    1340:	3001      	adds	r0, #1
    1342:	4b19      	ldr	r3, [pc, #100]	; (13a8 <system_clock_source_get_hz+0x88>)
    1344:	4358      	muls	r0, r3
    1346:	e027      	b.n	1398 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1348:	4b15      	ldr	r3, [pc, #84]	; (13a0 <system_clock_source_get_hz+0x80>)
    134a:	6958      	ldr	r0, [r3, #20]
    134c:	e024      	b.n	1398 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    134e:	4b14      	ldr	r3, [pc, #80]	; (13a0 <system_clock_source_get_hz+0x80>)
    1350:	681b      	ldr	r3, [r3, #0]
    1352:	2002      	movs	r0, #2
    1354:	4018      	ands	r0, r3
    1356:	d01f      	beq.n	1398 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1358:	4912      	ldr	r1, [pc, #72]	; (13a4 <system_clock_source_get_hz+0x84>)
    135a:	2280      	movs	r2, #128	; 0x80
    135c:	0052      	lsls	r2, r2, #1
    135e:	68cb      	ldr	r3, [r1, #12]
    1360:	4213      	tst	r3, r2
    1362:	d0fc      	beq.n	135e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1364:	4b0e      	ldr	r3, [pc, #56]	; (13a0 <system_clock_source_get_hz+0x80>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	075b      	lsls	r3, r3, #29
    136a:	d514      	bpl.n	1396 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    136c:	2000      	movs	r0, #0
    136e:	4b0f      	ldr	r3, [pc, #60]	; (13ac <system_clock_source_get_hz+0x8c>)
    1370:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1372:	4b0b      	ldr	r3, [pc, #44]	; (13a0 <system_clock_source_get_hz+0x80>)
    1374:	689b      	ldr	r3, [r3, #8]
    1376:	041b      	lsls	r3, r3, #16
    1378:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    137a:	4358      	muls	r0, r3
    137c:	e00c      	b.n	1398 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    137e:	2328      	movs	r3, #40	; 0x28
    1380:	4a08      	ldr	r2, [pc, #32]	; (13a4 <system_clock_source_get_hz+0x84>)
    1382:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1384:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1386:	079b      	lsls	r3, r3, #30
    1388:	d506      	bpl.n	1398 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    138a:	4b05      	ldr	r3, [pc, #20]	; (13a0 <system_clock_source_get_hz+0x80>)
    138c:	68d8      	ldr	r0, [r3, #12]
    138e:	e003      	b.n	1398 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1390:	2080      	movs	r0, #128	; 0x80
    1392:	0200      	lsls	r0, r0, #8
    1394:	e000      	b.n	1398 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1396:	4806      	ldr	r0, [pc, #24]	; (13b0 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1398:	bd08      	pop	{r3, pc}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	00002260 	.word	0x00002260
    13a0:	20000100 	.word	0x20000100
    13a4:	40000c00 	.word	0x40000c00
    13a8:	003d0900 	.word	0x003d0900
    13ac:	000019b5 	.word	0x000019b5
    13b0:	02dc6c00 	.word	0x02dc6c00

000013b4 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    13b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b6:	4647      	mov	r7, r8
    13b8:	b480      	push	{r7}
    13ba:	1c02      	adds	r2, r0, #0
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    13bc:	4b28      	ldr	r3, [pc, #160]	; (1460 <system_clock_source_xosc_set_config+0xac>)
    13be:	8a19      	ldrh	r1, [r3, #16]
    13c0:	054d      	lsls	r5, r1, #21
    13c2:	0f6d      	lsrs	r5, r5, #29

	temp.bit.STARTUP = config->startup_time;
    13c4:	7843      	ldrb	r3, [r0, #1]
    13c6:	240f      	movs	r4, #15
    13c8:	401c      	ands	r4, r3

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    13ca:	7806      	ldrb	r6, [r0, #0]
    13cc:	4273      	negs	r3, r6
    13ce:	415e      	adcs	r6, r3
    13d0:	b2f6      	uxtb	r6, r6
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    13d2:	7883      	ldrb	r3, [r0, #2]

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    13d4:	2b00      	cmp	r3, #0
    13d6:	d118      	bne.n	140a <system_clock_source_xosc_set_config+0x56>
		if (config->frequency <= 2000000) {
    13d8:	6840      	ldr	r0, [r0, #4]
    13da:	4f22      	ldr	r7, [pc, #136]	; (1464 <system_clock_source_xosc_set_config+0xb0>)
    13dc:	42b8      	cmp	r0, r7
    13de:	d90d      	bls.n	13fc <system_clock_source_xosc_set_config+0x48>
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
    13e0:	4f21      	ldr	r7, [pc, #132]	; (1468 <system_clock_source_xosc_set_config+0xb4>)
    13e2:	42b8      	cmp	r0, r7
    13e4:	d90c      	bls.n	1400 <system_clock_source_xosc_set_config+0x4c>
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
    13e6:	4f21      	ldr	r7, [pc, #132]	; (146c <system_clock_source_xosc_set_config+0xb8>)
    13e8:	42b8      	cmp	r0, r7
    13ea:	d90b      	bls.n	1404 <system_clock_source_xosc_set_config+0x50>
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
    13ec:	4f20      	ldr	r7, [pc, #128]	; (1470 <system_clock_source_xosc_set_config+0xbc>)
    13ee:	42b8      	cmp	r0, r7
    13f0:	d90a      	bls.n	1408 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 3;
		} else if (config->frequency <= 30000000) {
    13f2:	4f20      	ldr	r7, [pc, #128]	; (1474 <system_clock_source_xosc_set_config+0xc0>)
    13f4:	42b8      	cmp	r0, r7
    13f6:	d808      	bhi.n	140a <system_clock_source_xosc_set_config+0x56>
			temp.bit.GAIN = 4;
    13f8:	2504      	movs	r5, #4
    13fa:	e006      	b.n	140a <system_clock_source_xosc_set_config+0x56>
	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
    13fc:	2500      	movs	r5, #0
    13fe:	e004      	b.n	140a <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
    1400:	2501      	movs	r5, #1
    1402:	e002      	b.n	140a <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
    1404:	2502      	movs	r5, #2
    1406:	e000      	b.n	140a <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
    1408:	2503      	movs	r5, #3
			temp.bit.GAIN = 4;
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    140a:	7a57      	ldrb	r7, [r2, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    140c:	7a10      	ldrb	r0, [r2, #8]
    140e:	4680      	mov	r8, r0

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    1410:	6852      	ldr	r2, [r2, #4]
    1412:	4694      	mov	ip, r2
    1414:	4a18      	ldr	r2, [pc, #96]	; (1478 <system_clock_source_xosc_set_config+0xc4>)
    1416:	4660      	mov	r0, ip
    1418:	6110      	str	r0, [r2, #16]

	OSCCTRL->XOSCCTRL = temp;
    141a:	2201      	movs	r2, #1
    141c:	00b6      	lsls	r6, r6, #2
    141e:	2004      	movs	r0, #4
    1420:	4381      	bics	r1, r0
    1422:	4331      	orrs	r1, r6
    1424:	4640      	mov	r0, r8
    1426:	4010      	ands	r0, r2
    1428:	0180      	lsls	r0, r0, #6
    142a:	2640      	movs	r6, #64	; 0x40
    142c:	43b1      	bics	r1, r6
    142e:	4301      	orrs	r1, r0
    1430:	1c38      	adds	r0, r7, #0
    1432:	4010      	ands	r0, r2
    1434:	01c0      	lsls	r0, r0, #7
    1436:	3640      	adds	r6, #64	; 0x40
    1438:	43b1      	bics	r1, r6
    143a:	4301      	orrs	r1, r0
    143c:	022d      	lsls	r5, r5, #8
    143e:	480f      	ldr	r0, [pc, #60]	; (147c <system_clock_source_xosc_set_config+0xc8>)
    1440:	4001      	ands	r1, r0
    1442:	4329      	orrs	r1, r5
    1444:	4013      	ands	r3, r2
    1446:	02da      	lsls	r2, r3, #11
    1448:	4b0d      	ldr	r3, [pc, #52]	; (1480 <system_clock_source_xosc_set_config+0xcc>)
    144a:	400b      	ands	r3, r1
    144c:	4313      	orrs	r3, r2
    144e:	0324      	lsls	r4, r4, #12
    1450:	051b      	lsls	r3, r3, #20
    1452:	0d1b      	lsrs	r3, r3, #20
    1454:	4323      	orrs	r3, r4
    1456:	4a02      	ldr	r2, [pc, #8]	; (1460 <system_clock_source_xosc_set_config+0xac>)
    1458:	8213      	strh	r3, [r2, #16]
}
    145a:	bc04      	pop	{r2}
    145c:	4690      	mov	r8, r2
    145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1460:	40000c00 	.word	0x40000c00
    1464:	001e8480 	.word	0x001e8480
    1468:	003d0900 	.word	0x003d0900
    146c:	007a1200 	.word	0x007a1200
    1470:	00f42400 	.word	0x00f42400
    1474:	01c9c380 	.word	0x01c9c380
    1478:	20000100 	.word	0x20000100
    147c:	fffff8ff 	.word	0xfffff8ff
    1480:	fffff7ff 	.word	0xfffff7ff

00001484 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1486:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1488:	68c6      	ldr	r6, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    148a:	7d03      	ldrb	r3, [r0, #20]
    148c:	2b01      	cmp	r3, #1
    148e:	d106      	bne.n	149e <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    1490:	8a01      	ldrh	r1, [r0, #16]
    1492:	3101      	adds	r1, #1
    1494:	0049      	lsls	r1, r1, #1
    1496:	1c30      	adds	r0, r6, #0
    1498:	4b29      	ldr	r3, [pc, #164]	; (1540 <system_clock_source_dpll_set_config+0xbc>)
    149a:	4798      	blx	r3
    149c:	1c06      	adds	r6, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    149e:	68a3      	ldr	r3, [r4, #8]
    14a0:	0118      	lsls	r0, r3, #4
    14a2:	1c31      	adds	r1, r6, #0
    14a4:	4b26      	ldr	r3, [pc, #152]	; (1540 <system_clock_source_dpll_set_config+0xbc>)
    14a6:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    14a8:	270f      	movs	r7, #15
    14aa:	4007      	ands	r7, r0
	tmpldr = (tmpldr >> 4) - 1;
    14ac:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    14ae:	7863      	ldrb	r3, [r4, #1]
    14b0:	019a      	lsls	r2, r3, #6
    14b2:	7823      	ldrb	r3, [r4, #0]
    14b4:	01db      	lsls	r3, r3, #7
    14b6:	4313      	orrs	r3, r2
    14b8:	b2db      	uxtb	r3, r3
    14ba:	4a22      	ldr	r2, [pc, #136]	; (1544 <system_clock_source_dpll_set_config+0xc0>)
    14bc:	2128      	movs	r1, #40	; 0x28
    14be:	5453      	strb	r3, [r2, r1]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    14c0:	0439      	lsls	r1, r7, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    14c2:	1e43      	subs	r3, r0, #1
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    14c4:	051b      	lsls	r3, r3, #20
    14c6:	0d1b      	lsrs	r3, r3, #20
	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    14c8:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    14ca:	62d3      	str	r3, [r2, #44]	; 0x2c
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    14cc:	1c15      	adds	r5, r2, #0
    14ce:	2138      	movs	r1, #56	; 0x38
    14d0:	2204      	movs	r2, #4
    14d2:	5c6b      	ldrb	r3, [r5, r1]
    14d4:	4213      	tst	r3, r2
    14d6:	d1fc      	bne.n	14d2 <system_clock_source_dpll_set_config+0x4e>
	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    14d8:	78e1      	ldrb	r1, [r4, #3]
    14da:	00c9      	lsls	r1, r1, #3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    14dc:	78a3      	ldrb	r3, [r4, #2]
    14de:	031b      	lsls	r3, r3, #12
    14e0:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    14e2:	7923      	ldrb	r3, [r4, #4]
    14e4:	009b      	lsls	r3, r3, #2
    14e6:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    14e8:	7ca3      	ldrb	r3, [r4, #18]
    14ea:	2203      	movs	r2, #3
    14ec:	4694      	mov	ip, r2
    14ee:	4013      	ands	r3, r2
    14f0:	4319      	orrs	r1, r3

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    14f2:	8a25      	ldrh	r5, [r4, #16]
    14f4:	042d      	lsls	r5, r5, #16
    14f6:	4a14      	ldr	r2, [pc, #80]	; (1548 <system_clock_source_dpll_set_config+0xc4>)
    14f8:	1c2b      	adds	r3, r5, #0
    14fa:	4013      	ands	r3, r2
    14fc:	4319      	orrs	r1, r3
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    14fe:	7ce3      	ldrb	r3, [r4, #19]
    1500:	021b      	lsls	r3, r3, #8
    1502:	22e0      	movs	r2, #224	; 0xe0
    1504:	00d2      	lsls	r2, r2, #3
    1506:	4013      	ands	r3, r2
    1508:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    150a:	7d22      	ldrb	r2, [r4, #20]
    150c:	0112      	lsls	r2, r2, #4
    150e:	2330      	movs	r3, #48	; 0x30
    1510:	4013      	ands	r3, r2
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1512:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    1514:	4a0b      	ldr	r2, [pc, #44]	; (1544 <system_clock_source_dpll_set_config+0xc0>)
    1516:	6313      	str	r3, [r2, #48]	; 0x30
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    1518:	7d63      	ldrb	r3, [r4, #21]
    151a:	4661      	mov	r1, ip
    151c:	400b      	ands	r3, r1
    151e:	3131      	adds	r1, #49	; 0x31
    1520:	5453      	strb	r3, [r2, r1]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    1522:	1c15      	adds	r5, r2, #0
    1524:	3104      	adds	r1, #4
    1526:	2208      	movs	r2, #8
    1528:	5c6b      	ldrb	r3, [r5, r1]
    152a:	4213      	tst	r3, r2
    152c:	d1fc      	bne.n	1528 <system_clock_source_dpll_set_config+0xa4>
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
    152e:	0100      	lsls	r0, r0, #4
    1530:	183f      	adds	r7, r7, r0
    1532:	437e      	muls	r6, r7
    1534:	7d67      	ldrb	r7, [r4, #21]
    1536:	3704      	adds	r7, #4
    1538:	40fe      	lsrs	r6, r7
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    153a:	4b04      	ldr	r3, [pc, #16]	; (154c <system_clock_source_dpll_set_config+0xc8>)
    153c:	60de      	str	r6, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
}
    153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1540:	00001fc1 	.word	0x00001fc1
    1544:	40000c00 	.word	0x40000c00
    1548:	07ff0000 	.word	0x07ff0000
    154c:	20000100 	.word	0x20000100

00001550 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1550:	2808      	cmp	r0, #8
    1552:	d803      	bhi.n	155c <system_clock_source_enable+0xc>
    1554:	0080      	lsls	r0, r0, #2
    1556:	4b29      	ldr	r3, [pc, #164]	; (15fc <system_clock_source_enable+0xac>)
    1558:	581b      	ldr	r3, [r3, r0]
    155a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    155c:	2017      	movs	r0, #23
    155e:	e04b      	b.n	15f8 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    1560:	4a27      	ldr	r2, [pc, #156]	; (1600 <system_clock_source_enable+0xb0>)
    1562:	7d11      	ldrb	r1, [r2, #20]
    1564:	2302      	movs	r3, #2
    1566:	430b      	orrs	r3, r1
    1568:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    156a:	2000      	movs	r0, #0
    156c:	e044      	b.n	15f8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    156e:	4a25      	ldr	r2, [pc, #148]	; (1604 <system_clock_source_enable+0xb4>)
    1570:	6991      	ldr	r1, [r2, #24]
    1572:	2302      	movs	r3, #2
    1574:	430b      	orrs	r3, r1
    1576:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1578:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    157a:	e03d      	b.n	15f8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    157c:	4a20      	ldr	r2, [pc, #128]	; (1600 <system_clock_source_enable+0xb0>)
    157e:	8a11      	ldrh	r1, [r2, #16]
    1580:	2302      	movs	r3, #2
    1582:	430b      	orrs	r3, r1
    1584:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1586:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    1588:	e036      	b.n	15f8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    158a:	4a1e      	ldr	r2, [pc, #120]	; (1604 <system_clock_source_enable+0xb4>)
    158c:	6951      	ldr	r1, [r2, #20]
    158e:	2302      	movs	r3, #2
    1590:	430b      	orrs	r3, r1
    1592:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1594:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    1596:	e02f      	b.n	15f8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1598:	491b      	ldr	r1, [pc, #108]	; (1608 <system_clock_source_enable+0xb8>)
    159a:	680b      	ldr	r3, [r1, #0]
    159c:	2202      	movs	r2, #2
    159e:	4313      	orrs	r3, r2
    15a0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    15a2:	4b17      	ldr	r3, [pc, #92]	; (1600 <system_clock_source_enable+0xb0>)
    15a4:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    15a6:	1c19      	adds	r1, r3, #0
    15a8:	32fe      	adds	r2, #254	; 0xfe
    15aa:	68cb      	ldr	r3, [r1, #12]
    15ac:	4213      	tst	r3, r2
    15ae:	d0fc      	beq.n	15aa <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    15b0:	4a15      	ldr	r2, [pc, #84]	; (1608 <system_clock_source_enable+0xb8>)
    15b2:	6891      	ldr	r1, [r2, #8]
    15b4:	4b12      	ldr	r3, [pc, #72]	; (1600 <system_clock_source_enable+0xb0>)
    15b6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    15b8:	6852      	ldr	r2, [r2, #4]
    15ba:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    15bc:	2200      	movs	r2, #0
    15be:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    15c0:	1c19      	adds	r1, r3, #0
    15c2:	3201      	adds	r2, #1
    15c4:	32ff      	adds	r2, #255	; 0xff
    15c6:	68cb      	ldr	r3, [r1, #12]
    15c8:	4213      	tst	r3, r2
    15ca:	d0fc      	beq.n	15c6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    15cc:	4b0e      	ldr	r3, [pc, #56]	; (1608 <system_clock_source_enable+0xb8>)
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	b29b      	uxth	r3, r3
    15d2:	4a0b      	ldr	r2, [pc, #44]	; (1600 <system_clock_source_enable+0xb0>)
    15d4:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    15d6:	2000      	movs	r0, #0
    15d8:	e00e      	b.n	15f8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    15da:	4909      	ldr	r1, [pc, #36]	; (1600 <system_clock_source_enable+0xb0>)
    15dc:	2228      	movs	r2, #40	; 0x28
    15de:	5c88      	ldrb	r0, [r1, r2]
    15e0:	2302      	movs	r3, #2
    15e2:	4303      	orrs	r3, r0
    15e4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    15e6:	1c08      	adds	r0, r1, #0
    15e8:	2138      	movs	r1, #56	; 0x38
    15ea:	3a26      	subs	r2, #38	; 0x26
    15ec:	5c43      	ldrb	r3, [r0, r1]
    15ee:	4213      	tst	r3, r2
    15f0:	d1fc      	bne.n	15ec <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    15f2:	2000      	movs	r0, #0
    15f4:	e000      	b.n	15f8 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    15f6:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    15f8:	4770      	bx	lr
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00002284 	.word	0x00002284
    1600:	40000c00 	.word	0x40000c00
    1604:	40001000 	.word	0x40001000
    1608:	20000100 	.word	0x20000100

0000160c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	4657      	mov	r7, sl
    1610:	464e      	mov	r6, r9
    1612:	4645      	mov	r5, r8
    1614:	b4e0      	push	{r5, r6, r7}
    1616:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1618:	2280      	movs	r2, #128	; 0x80
    161a:	0052      	lsls	r2, r2, #1
    161c:	4b55      	ldr	r3, [pc, #340]	; (1774 <system_clock_init+0x168>)
    161e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1620:	3afd      	subs	r2, #253	; 0xfd
    1622:	4b55      	ldr	r3, [pc, #340]	; (1778 <system_clock_init+0x16c>)
    1624:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1626:	4955      	ldr	r1, [pc, #340]	; (177c <system_clock_init+0x170>)
    1628:	684b      	ldr	r3, [r1, #4]
    162a:	321b      	adds	r2, #27
    162c:	4393      	bics	r3, r2
    162e:	3a1c      	subs	r2, #28
    1630:	4313      	orrs	r3, r2
    1632:	604b      	str	r3, [r1, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1634:	2380      	movs	r3, #128	; 0x80
    1636:	05db      	lsls	r3, r3, #23
    1638:	789b      	ldrb	r3, [r3, #2]
    163a:	2b02      	cmp	r3, #2
    163c:	d009      	beq.n	1652 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    163e:	2380      	movs	r3, #128	; 0x80
    1640:	05db      	lsls	r3, r3, #23
    1642:	3a01      	subs	r2, #1
    1644:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1646:	3201      	adds	r2, #1
    1648:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    164a:	1c1a      	adds	r2, r3, #0
    164c:	7993      	ldrb	r3, [r2, #6]
    164e:	2b00      	cmp	r3, #0
    1650:	d0fc      	beq.n	164c <system_clock_init+0x40>
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1652:	a809      	add	r0, sp, #36	; 0x24
    1654:	2400      	movs	r4, #0
    1656:	7004      	strb	r4, [r0, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
	config->auto_gain_control = true;
    1658:	2501      	movs	r5, #1
    165a:	7085      	strb	r5, [r0, #2]
	config->frequency         = 12000000UL;
	config->run_in_standby    = false;
    165c:	7204      	strb	r4, [r0, #8]
	config->on_demand         = true;
    165e:	7245      	strb	r5, [r0, #9]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    1660:	230f      	movs	r3, #15
    1662:	7043      	strb	r3, [r0, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    1664:	26e1      	movs	r6, #225	; 0xe1
    1666:	0436      	lsls	r6, r6, #16
    1668:	6046      	str	r6, [r0, #4]
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;

	system_clock_source_xosc_set_config(&xosc_conf);
    166a:	4b45      	ldr	r3, [pc, #276]	; (1780 <system_clock_init+0x174>)
    166c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    166e:	2000      	movs	r0, #0
    1670:	4f44      	ldr	r7, [pc, #272]	; (1784 <system_clock_init+0x178>)
    1672:	47b8      	blx	r7
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1674:	4b3f      	ldr	r3, [pc, #252]	; (1774 <system_clock_init+0x168>)
    1676:	7d1a      	ldrb	r2, [r3, #20]
    1678:	217f      	movs	r1, #127	; 0x7f
    167a:	400a      	ands	r2, r1
    167c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    167e:	7d1a      	ldrb	r2, [r3, #20]
    1680:	393f      	subs	r1, #63	; 0x3f
    1682:	438a      	bics	r2, r1
    1684:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1686:	4b40      	ldr	r3, [pc, #256]	; (1788 <system_clock_init+0x17c>)
    1688:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    168a:	466b      	mov	r3, sp
    168c:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    168e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1690:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1692:	2308      	movs	r3, #8
    1694:	469a      	mov	sl, r3
    1696:	466b      	mov	r3, sp
    1698:	4652      	mov	r2, sl
    169a:	701a      	strb	r2, [r3, #0]
    169c:	2302      	movs	r3, #2
    169e:	9301      	str	r3, [sp, #4]
    16a0:	2001      	movs	r0, #1
    16a2:	4669      	mov	r1, sp
    16a4:	4b39      	ldr	r3, [pc, #228]	; (178c <system_clock_init+0x180>)
    16a6:	4699      	mov	r9, r3
    16a8:	4798      	blx	r3
    16aa:	2001      	movs	r0, #1
    16ac:	4b38      	ldr	r3, [pc, #224]	; (1790 <system_clock_init+0x184>)
    16ae:	4698      	mov	r8, r3
    16b0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    16b2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    16b4:	466b      	mov	r3, sp
    16b6:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    16b8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    16ba:	725c      	strb	r4, [r3, #9]
    16bc:	4652      	mov	r2, sl
    16be:	701a      	strb	r2, [r3, #0]
    16c0:	2002      	movs	r0, #2
    16c2:	4669      	mov	r1, sp
    16c4:	47c8      	blx	r9
    16c6:	2002      	movs	r0, #2
    16c8:	47c0      	blx	r8
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    16ca:	a803      	add	r0, sp, #12
    16cc:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    16ce:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    16d0:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;

	config->output_frequency    = 48000000;
    16d2:	4b30      	ldr	r3, [pc, #192]	; (1794 <system_clock_init+0x188>)
    16d4:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    16d6:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    16d8:	7544      	strb	r4, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    16da:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    16dc:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    16de:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    16e0:	2301      	movs	r3, #1
    16e2:	7103      	strb	r3, [r0, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    16e4:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    16e6:	60c6      	str	r6, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    16e8:	4b2b      	ldr	r3, [pc, #172]	; (1798 <system_clock_init+0x18c>)
    16ea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    16ec:	2008      	movs	r0, #8
    16ee:	47b8      	blx	r7
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    16f0:	4820      	ldr	r0, [pc, #128]	; (1774 <system_clock_init+0x168>)
    16f2:	213c      	movs	r1, #60	; 0x3c
    16f4:	2203      	movs	r2, #3
    16f6:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    16f8:	4013      	ands	r3, r2
    16fa:	2b03      	cmp	r3, #3
    16fc:	d1fb      	bne.n	16f6 <system_clock_init+0xea>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    16fe:	491d      	ldr	r1, [pc, #116]	; (1774 <system_clock_init+0x168>)
    1700:	2228      	movs	r2, #40	; 0x28
    1702:	5c8b      	ldrb	r3, [r1, r2]
    1704:	2080      	movs	r0, #128	; 0x80
    1706:	4240      	negs	r0, r0
    1708:	4303      	orrs	r3, r0
    170a:	548b      	strb	r3, [r1, r2]
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    170c:	4c23      	ldr	r4, [pc, #140]	; (179c <system_clock_init+0x190>)
    170e:	2301      	movs	r3, #1
    1710:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1712:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1714:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1716:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    1718:	2300      	movs	r3, #0
    171a:	466a      	mov	r2, sp
    171c:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    171e:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    1720:	7253      	strb	r3, [r2, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1722:	3308      	adds	r3, #8
    1724:	7013      	strb	r3, [r2, #0]
    1726:	2000      	movs	r0, #0
    1728:	4669      	mov	r1, sp
    172a:	4b18      	ldr	r3, [pc, #96]	; (178c <system_clock_init+0x180>)
    172c:	4798      	blx	r3
    172e:	2000      	movs	r0, #0
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <system_clock_init+0x184>)
    1732:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1734:	2000      	movs	r0, #0
    1736:	4b1a      	ldr	r3, [pc, #104]	; (17a0 <system_clock_init+0x194>)
    1738:	4798      	blx	r3
    173a:	7921      	ldrb	r1, [r4, #4]
    173c:	b2c9      	uxtb	r1, r1
    173e:	4b19      	ldr	r3, [pc, #100]	; (17a4 <system_clock_init+0x198>)
    1740:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    1742:	4b19      	ldr	r3, [pc, #100]	; (17a8 <system_clock_init+0x19c>)
    1744:	4298      	cmp	r0, r3
    1746:	d80e      	bhi.n	1766 <system_clock_init+0x15a>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1748:	2380      	movs	r3, #128	; 0x80
    174a:	05db      	lsls	r3, r3, #23
    174c:	789b      	ldrb	r3, [r3, #2]
    174e:	2b00      	cmp	r3, #0
    1750:	d009      	beq.n	1766 <system_clock_init+0x15a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1752:	2380      	movs	r3, #128	; 0x80
    1754:	05db      	lsls	r3, r3, #23
    1756:	2201      	movs	r2, #1
    1758:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    175a:	2200      	movs	r2, #0
    175c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    175e:	1c1a      	adds	r2, r3, #0
    1760:	7993      	ldrb	r3, [r2, #6]
    1762:	2b00      	cmp	r3, #0
    1764:	d0fc      	beq.n	1760 <system_clock_init+0x154>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1766:	b00c      	add	sp, #48	; 0x30
    1768:	bc1c      	pop	{r2, r3, r4}
    176a:	4690      	mov	r8, r2
    176c:	4699      	mov	r9, r3
    176e:	46a2      	mov	sl, r4
    1770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	40000c00 	.word	0x40000c00
    1778:	40001400 	.word	0x40001400
    177c:	41004000 	.word	0x41004000
    1780:	000013b5 	.word	0x000013b5
    1784:	00001551 	.word	0x00001551
    1788:	000017ad 	.word	0x000017ad
    178c:	000017d1 	.word	0x000017d1
    1790:	0000187d 	.word	0x0000187d
    1794:	02dc6c00 	.word	0x02dc6c00
    1798:	00001485 	.word	0x00001485
    179c:	40000400 	.word	0x40000400
    17a0:	000018bd 	.word	0x000018bd
    17a4:	00001fc1 	.word	0x00001fc1
    17a8:	00b71b00 	.word	0x00b71b00

000017ac <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    17ac:	4a06      	ldr	r2, [pc, #24]	; (17c8 <system_gclk_init+0x1c>)
    17ae:	6951      	ldr	r1, [r2, #20]
    17b0:	2340      	movs	r3, #64	; 0x40
    17b2:	430b      	orrs	r3, r1
    17b4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    17b6:	2201      	movs	r2, #1
    17b8:	4b04      	ldr	r3, [pc, #16]	; (17cc <system_gclk_init+0x20>)
    17ba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    17bc:	1c19      	adds	r1, r3, #0
    17be:	780b      	ldrb	r3, [r1, #0]
    17c0:	4213      	tst	r3, r2
    17c2:	d1fc      	bne.n	17be <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17c4:	4770      	bx	lr
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	40000400 	.word	0x40000400
    17cc:	40001800 	.word	0x40001800

000017d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17d0:	b570      	push	{r4, r5, r6, lr}
    17d2:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17d4:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    17d6:	784b      	ldrb	r3, [r1, #1]
    17d8:	2b00      	cmp	r3, #0
    17da:	d002      	beq.n	17e2 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    17dc:	2380      	movs	r3, #128	; 0x80
    17de:	00db      	lsls	r3, r3, #3
    17e0:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    17e2:	7a4b      	ldrb	r3, [r1, #9]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d002      	beq.n	17ee <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    17e8:	2380      	movs	r3, #128	; 0x80
    17ea:	011b      	lsls	r3, r3, #4
    17ec:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    17ee:	684a      	ldr	r2, [r1, #4]
    17f0:	2a01      	cmp	r2, #1
    17f2:	d917      	bls.n	1824 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17f4:	1e53      	subs	r3, r2, #1
    17f6:	421a      	tst	r2, r3
    17f8:	d10f      	bne.n	181a <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17fa:	2a02      	cmp	r2, #2
    17fc:	d906      	bls.n	180c <system_gclk_gen_set_config+0x3c>
    17fe:	2302      	movs	r3, #2
    1800:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1802:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1804:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1806:	429a      	cmp	r2, r3
    1808:	d8fb      	bhi.n	1802 <system_gclk_gen_set_config+0x32>
    180a:	e000      	b.n	180e <system_gclk_gen_set_config+0x3e>
    180c:	2000      	movs	r0, #0
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	015b      	lsls	r3, r3, #5
    1812:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1814:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1816:	4305      	orrs	r5, r0
    1818:	e004      	b.n	1824 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    181a:	0412      	lsls	r2, r2, #16
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	009b      	lsls	r3, r3, #2
    1820:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1822:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1824:	7a0b      	ldrb	r3, [r1, #8]
    1826:	2b00      	cmp	r3, #0
    1828:	d002      	beq.n	1830 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    182a:	2380      	movs	r3, #128	; 0x80
    182c:	019b      	lsls	r3, r3, #6
    182e:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1830:	2604      	movs	r6, #4
    1832:	40a6      	lsls	r6, r4
    1834:	490d      	ldr	r1, [pc, #52]	; (186c <system_gclk_gen_set_config+0x9c>)
    1836:	4a0e      	ldr	r2, [pc, #56]	; (1870 <system_gclk_gen_set_config+0xa0>)
    1838:	684b      	ldr	r3, [r1, #4]
    183a:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    183c:	421e      	tst	r6, r3
    183e:	d1fb      	bne.n	1838 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1840:	4b0c      	ldr	r3, [pc, #48]	; (1874 <system_gclk_gen_set_config+0xa4>)
    1842:	4798      	blx	r3
    1844:	00a4      	lsls	r4, r4, #2
    1846:	4b09      	ldr	r3, [pc, #36]	; (186c <system_gclk_gen_set_config+0x9c>)
    1848:	469c      	mov	ip, r3
    184a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    184c:	6a20      	ldr	r0, [r4, #32]
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	005b      	lsls	r3, r3, #1
    1852:	4018      	ands	r0, r3
    1854:	4328      	orrs	r0, r5
    1856:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1858:	4661      	mov	r1, ip
    185a:	4a05      	ldr	r2, [pc, #20]	; (1870 <system_gclk_gen_set_config+0xa0>)
    185c:	684b      	ldr	r3, [r1, #4]
    185e:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1860:	421e      	tst	r6, r3
    1862:	d1fb      	bne.n	185c <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <system_gclk_gen_set_config+0xa8>)
    1866:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1868:	bd70      	pop	{r4, r5, r6, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	40001800 	.word	0x40001800
    1870:	000007fc 	.word	0x000007fc
    1874:	000012b1 	.word	0x000012b1
    1878:	000012f1 	.word	0x000012f1

0000187c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    187c:	b510      	push	{r4, lr}
    187e:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1880:	2204      	movs	r2, #4
    1882:	4082      	lsls	r2, r0
    1884:	4809      	ldr	r0, [pc, #36]	; (18ac <system_gclk_gen_enable+0x30>)
    1886:	490a      	ldr	r1, [pc, #40]	; (18b0 <system_gclk_gen_enable+0x34>)
    1888:	6843      	ldr	r3, [r0, #4]
    188a:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    188c:	421a      	tst	r2, r3
    188e:	d1fb      	bne.n	1888 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1890:	4b08      	ldr	r3, [pc, #32]	; (18b4 <system_gclk_gen_enable+0x38>)
    1892:	4798      	blx	r3
    1894:	00a4      	lsls	r4, r4, #2
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <system_gclk_gen_enable+0x30>)
    1898:	469c      	mov	ip, r3
    189a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    189c:	6a23      	ldr	r3, [r4, #32]
    189e:	2280      	movs	r2, #128	; 0x80
    18a0:	0052      	lsls	r2, r2, #1
    18a2:	4313      	orrs	r3, r2
    18a4:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <system_gclk_gen_enable+0x3c>)
    18a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18aa:	bd10      	pop	{r4, pc}
    18ac:	40001800 	.word	0x40001800
    18b0:	000007fc 	.word	0x000007fc
    18b4:	000012b1 	.word	0x000012b1
    18b8:	000012f1 	.word	0x000012f1

000018bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18be:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    18c0:	2204      	movs	r2, #4
    18c2:	4082      	lsls	r2, r0
    18c4:	4812      	ldr	r0, [pc, #72]	; (1910 <system_gclk_gen_get_hz+0x54>)
    18c6:	4913      	ldr	r1, [pc, #76]	; (1914 <system_gclk_gen_get_hz+0x58>)
    18c8:	6843      	ldr	r3, [r0, #4]
    18ca:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    18cc:	421a      	tst	r2, r3
    18ce:	d1fb      	bne.n	18c8 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18d0:	4b11      	ldr	r3, [pc, #68]	; (1918 <system_gclk_gen_get_hz+0x5c>)
    18d2:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    18d4:	4f0e      	ldr	r7, [pc, #56]	; (1910 <system_gclk_gen_get_hz+0x54>)
    18d6:	3408      	adds	r4, #8
    18d8:	00a4      	lsls	r4, r4, #2
    18da:	59e3      	ldr	r3, [r4, r7]
    18dc:	200f      	movs	r0, #15
    18de:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18e0:	4b0e      	ldr	r3, [pc, #56]	; (191c <system_gclk_gen_get_hz+0x60>)
    18e2:	4798      	blx	r3
    18e4:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    18e6:	59e5      	ldr	r5, [r4, r7]
    18e8:	04ed      	lsls	r5, r5, #19
    18ea:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    18ec:	59e4      	ldr	r4, [r4, r7]
    18ee:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <system_gclk_gen_get_hz+0x64>)
    18f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18f4:	2d00      	cmp	r5, #0
    18f6:	d107      	bne.n	1908 <system_gclk_gen_get_hz+0x4c>
    18f8:	2c01      	cmp	r4, #1
    18fa:	d907      	bls.n	190c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    18fc:	1c30      	adds	r0, r6, #0
    18fe:	1c21      	adds	r1, r4, #0
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <system_gclk_gen_get_hz+0x68>)
    1902:	4798      	blx	r3
    1904:	1c06      	adds	r6, r0, #0
    1906:	e001      	b.n	190c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1908:	3401      	adds	r4, #1
    190a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    190c:	1c30      	adds	r0, r6, #0
    190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1910:	40001800 	.word	0x40001800
    1914:	000007fc 	.word	0x000007fc
    1918:	000012b1 	.word	0x000012b1
    191c:	00001321 	.word	0x00001321
    1920:	000012f1 	.word	0x000012f1
    1924:	00001fc1 	.word	0x00001fc1

00001928 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1928:	b510      	push	{r4, lr}
    192a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    192c:	4b08      	ldr	r3, [pc, #32]	; (1950 <system_gclk_chan_enable+0x28>)
    192e:	4798      	blx	r3
    1930:	00a4      	lsls	r4, r4, #2
    1932:	4b08      	ldr	r3, [pc, #32]	; (1954 <system_gclk_chan_enable+0x2c>)
    1934:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1936:	2280      	movs	r2, #128	; 0x80
    1938:	5881      	ldr	r1, [r0, r2]
    193a:	2340      	movs	r3, #64	; 0x40
    193c:	430b      	orrs	r3, r1
    193e:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1940:	2180      	movs	r1, #128	; 0x80
    1942:	3a40      	subs	r2, #64	; 0x40
    1944:	5843      	ldr	r3, [r0, r1]
    1946:	421a      	tst	r2, r3
    1948:	d0fc      	beq.n	1944 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    194a:	4b03      	ldr	r3, [pc, #12]	; (1958 <system_gclk_chan_enable+0x30>)
    194c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    194e:	bd10      	pop	{r4, pc}
    1950:	000012b1 	.word	0x000012b1
    1954:	40001800 	.word	0x40001800
    1958:	000012f1 	.word	0x000012f1

0000195c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    195c:	b510      	push	{r4, lr}
    195e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <system_gclk_chan_disable+0x28>)
    1962:	4798      	blx	r3
    1964:	00a4      	lsls	r4, r4, #2
    1966:	4b08      	ldr	r3, [pc, #32]	; (1988 <system_gclk_chan_disable+0x2c>)
    1968:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    196a:	2280      	movs	r2, #128	; 0x80
    196c:	5883      	ldr	r3, [r0, r2]
    196e:	2140      	movs	r1, #64	; 0x40
    1970:	438b      	bics	r3, r1
    1972:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1974:	3140      	adds	r1, #64	; 0x40
    1976:	3a40      	subs	r2, #64	; 0x40
    1978:	5843      	ldr	r3, [r0, r1]
    197a:	421a      	tst	r2, r3
    197c:	d1fc      	bne.n	1978 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    197e:	4b03      	ldr	r3, [pc, #12]	; (198c <system_gclk_chan_disable+0x30>)
    1980:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1982:	bd10      	pop	{r4, pc}
    1984:	000012b1 	.word	0x000012b1
    1988:	40001800 	.word	0x40001800
    198c:	000012f1 	.word	0x000012f1

00001990 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1990:	b538      	push	{r3, r4, r5, lr}
    1992:	1c04      	adds	r4, r0, #0
    1994:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_gclk_chan_set_config+0x1c>)
    1998:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    199a:	782b      	ldrb	r3, [r5, #0]
    199c:	220f      	movs	r2, #15
    199e:	4013      	ands	r3, r2
    19a0:	3420      	adds	r4, #32
    19a2:	00a4      	lsls	r4, r4, #2
    19a4:	4a02      	ldr	r2, [pc, #8]	; (19b0 <system_gclk_chan_set_config+0x20>)
    19a6:	50a3      	str	r3, [r4, r2]


}
    19a8:	bd38      	pop	{r3, r4, r5, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	0000195d 	.word	0x0000195d
    19b0:	40001800 	.word	0x40001800

000019b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19b4:	b510      	push	{r4, lr}
    19b6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19b8:	4b06      	ldr	r3, [pc, #24]	; (19d4 <system_gclk_chan_get_hz+0x20>)
    19ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    19bc:	3420      	adds	r4, #32
    19be:	00a4      	lsls	r4, r4, #2
    19c0:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_gclk_chan_get_hz+0x24>)
    19c2:	58e3      	ldr	r3, [r4, r3]
    19c4:	240f      	movs	r4, #15
    19c6:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <system_gclk_chan_get_hz+0x28>)
    19ca:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19cc:	1c20      	adds	r0, r4, #0
    19ce:	4b04      	ldr	r3, [pc, #16]	; (19e0 <system_gclk_chan_get_hz+0x2c>)
    19d0:	4798      	blx	r3
}
    19d2:	bd10      	pop	{r4, pc}
    19d4:	000012b1 	.word	0x000012b1
    19d8:	40001800 	.word	0x40001800
    19dc:	000012f1 	.word	0x000012f1
    19e0:	000018bd 	.word	0x000018bd

000019e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19e6:	78d3      	ldrb	r3, [r2, #3]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d11e      	bne.n	1a2a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19ec:	7814      	ldrb	r4, [r2, #0]
    19ee:	2c80      	cmp	r4, #128	; 0x80
    19f0:	d004      	beq.n	19fc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    19f2:	0624      	lsls	r4, r4, #24
    19f4:	2380      	movs	r3, #128	; 0x80
    19f6:	025b      	lsls	r3, r3, #9
    19f8:	431c      	orrs	r4, r3
    19fa:	e000      	b.n	19fe <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    19fc:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    19fe:	7853      	ldrb	r3, [r2, #1]
    1a00:	2502      	movs	r5, #2
    1a02:	43ab      	bics	r3, r5
    1a04:	d10a      	bne.n	1a1c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a06:	7893      	ldrb	r3, [r2, #2]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d103      	bne.n	1a14 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a0c:	2380      	movs	r3, #128	; 0x80
    1a0e:	029b      	lsls	r3, r3, #10
    1a10:	431c      	orrs	r4, r3
    1a12:	e002      	b.n	1a1a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a14:	23c0      	movs	r3, #192	; 0xc0
    1a16:	02db      	lsls	r3, r3, #11
    1a18:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a1a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a1c:	7853      	ldrb	r3, [r2, #1]
    1a1e:	3b01      	subs	r3, #1
    1a20:	2b01      	cmp	r3, #1
    1a22:	d812      	bhi.n	1a4a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a24:	4b18      	ldr	r3, [pc, #96]	; (1a88 <_system_pinmux_config+0xa4>)
    1a26:	401c      	ands	r4, r3
    1a28:	e00f      	b.n	1a4a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1a2a:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a2c:	040b      	lsls	r3, r1, #16
    1a2e:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a30:	24a0      	movs	r4, #160	; 0xa0
    1a32:	05e4      	lsls	r4, r4, #23
    1a34:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a36:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a38:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a3a:	24d0      	movs	r4, #208	; 0xd0
    1a3c:	0624      	lsls	r4, r4, #24
    1a3e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a40:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a42:	78d3      	ldrb	r3, [r2, #3]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d018      	beq.n	1a7a <_system_pinmux_config+0x96>
    1a48:	e01c      	b.n	1a84 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a4a:	040b      	lsls	r3, r1, #16
    1a4c:	0c1b      	lsrs	r3, r3, #16
    1a4e:	25a0      	movs	r5, #160	; 0xa0
    1a50:	05ed      	lsls	r5, r5, #23
    1a52:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a54:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a56:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a58:	0c0b      	lsrs	r3, r1, #16
    1a5a:	25d0      	movs	r5, #208	; 0xd0
    1a5c:	062d      	lsls	r5, r5, #24
    1a5e:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a60:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a62:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a64:	78d3      	ldrb	r3, [r2, #3]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d10c      	bne.n	1a84 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a6a:	0363      	lsls	r3, r4, #13
    1a6c:	d505      	bpl.n	1a7a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a6e:	7893      	ldrb	r3, [r2, #2]
    1a70:	2b01      	cmp	r3, #1
    1a72:	d101      	bne.n	1a78 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1a74:	6181      	str	r1, [r0, #24]
    1a76:	e000      	b.n	1a7a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1a78:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a7a:	7853      	ldrb	r3, [r2, #1]
    1a7c:	3b01      	subs	r3, #1
    1a7e:	2b01      	cmp	r3, #1
    1a80:	d800      	bhi.n	1a84 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1a82:	6081      	str	r1, [r0, #8]
		}
	}
}
    1a84:	bd30      	pop	{r4, r5, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	fffbffff 	.word	0xfffbffff

00001a8c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a8c:	b508      	push	{r3, lr}
    1a8e:	1c03      	adds	r3, r0, #0
    1a90:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a92:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a94:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a96:	2900      	cmp	r1, #0
    1a98:	d104      	bne.n	1aa4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1a9a:	0958      	lsrs	r0, r3, #5
    1a9c:	01c0      	lsls	r0, r0, #7
    1a9e:	4905      	ldr	r1, [pc, #20]	; (1ab4 <system_pinmux_pin_set_config+0x28>)
    1aa0:	468c      	mov	ip, r1
    1aa2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1aa4:	211f      	movs	r1, #31
    1aa6:	400b      	ands	r3, r1
    1aa8:	391e      	subs	r1, #30
    1aaa:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1aac:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <system_pinmux_pin_set_config+0x2c>)
    1aae:	4798      	blx	r3
}
    1ab0:	bd08      	pop	{r3, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	40002800 	.word	0x40002800
    1ab8:	000019e5 	.word	0x000019e5

00001abc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1abc:	4770      	bx	lr
    1abe:	46c0      	nop			; (mov r8, r8)

00001ac0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ac0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <system_init+0x28>)
    1ac4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ac6:	4b09      	ldr	r3, [pc, #36]	; (1aec <system_init+0x2c>)
    1ac8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1aca:	4b09      	ldr	r3, [pc, #36]	; (1af0 <system_init+0x30>)
    1acc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1ace:	4b09      	ldr	r3, [pc, #36]	; (1af4 <system_init+0x34>)
    1ad0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1ad2:	4b09      	ldr	r3, [pc, #36]	; (1af8 <system_init+0x38>)
    1ad4:	4798      	blx	r3
	
	
	//select_buck_regulator_as_main_vreg
	SUPC->VREG.bit.SEL = 1;	
    1ad6:	4909      	ldr	r1, [pc, #36]	; (1afc <system_init+0x3c>)
    1ad8:	698b      	ldr	r3, [r1, #24]
    1ada:	220c      	movs	r2, #12
    1adc:	4393      	bics	r3, r2
    1ade:	3a08      	subs	r2, #8
    1ae0:	4313      	orrs	r3, r2
    1ae2:	618b      	str	r3, [r1, #24]
	
}
    1ae4:	bd08      	pop	{r3, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	0000160d 	.word	0x0000160d
    1aec:	000012ad 	.word	0x000012ad
    1af0:	00001abd 	.word	0x00001abd
    1af4:	00000495 	.word	0x00000495
    1af8:	00001abd 	.word	0x00001abd
    1afc:	40001400 	.word	0x40001400

00001b00 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1b00:	e7fe      	b.n	1b00 <Dummy_Handler>
    1b02:	46c0      	nop			; (mov r8, r8)

00001b04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1b04:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1b06:	4b1d      	ldr	r3, [pc, #116]	; (1b7c <Reset_Handler+0x78>)
    1b08:	4a1d      	ldr	r2, [pc, #116]	; (1b80 <Reset_Handler+0x7c>)
    1b0a:	429a      	cmp	r2, r3
    1b0c:	d003      	beq.n	1b16 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1b0e:	4b1d      	ldr	r3, [pc, #116]	; (1b84 <Reset_Handler+0x80>)
    1b10:	4a1a      	ldr	r2, [pc, #104]	; (1b7c <Reset_Handler+0x78>)
    1b12:	429a      	cmp	r2, r3
    1b14:	d304      	bcc.n	1b20 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b16:	4b1c      	ldr	r3, [pc, #112]	; (1b88 <Reset_Handler+0x84>)
    1b18:	4a1c      	ldr	r2, [pc, #112]	; (1b8c <Reset_Handler+0x88>)
    1b1a:	429a      	cmp	r2, r3
    1b1c:	d310      	bcc.n	1b40 <Reset_Handler+0x3c>
    1b1e:	e01e      	b.n	1b5e <Reset_Handler+0x5a>
    1b20:	4a1b      	ldr	r2, [pc, #108]	; (1b90 <Reset_Handler+0x8c>)
    1b22:	4b18      	ldr	r3, [pc, #96]	; (1b84 <Reset_Handler+0x80>)
    1b24:	3303      	adds	r3, #3
    1b26:	1a9b      	subs	r3, r3, r2
    1b28:	089b      	lsrs	r3, r3, #2
    1b2a:	3301      	adds	r3, #1
    1b2c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1b2e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b30:	4812      	ldr	r0, [pc, #72]	; (1b7c <Reset_Handler+0x78>)
    1b32:	4913      	ldr	r1, [pc, #76]	; (1b80 <Reset_Handler+0x7c>)
    1b34:	588c      	ldr	r4, [r1, r2]
    1b36:	5084      	str	r4, [r0, r2]
    1b38:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1b3a:	429a      	cmp	r2, r3
    1b3c:	d1fa      	bne.n	1b34 <Reset_Handler+0x30>
    1b3e:	e7ea      	b.n	1b16 <Reset_Handler+0x12>
    1b40:	4a14      	ldr	r2, [pc, #80]	; (1b94 <Reset_Handler+0x90>)
    1b42:	4b11      	ldr	r3, [pc, #68]	; (1b88 <Reset_Handler+0x84>)
    1b44:	3303      	adds	r3, #3
    1b46:	1a9b      	subs	r3, r3, r2
    1b48:	089b      	lsrs	r3, r3, #2
    1b4a:	3301      	adds	r3, #1
    1b4c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b4e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1b50:	480e      	ldr	r0, [pc, #56]	; (1b8c <Reset_Handler+0x88>)
    1b52:	2100      	movs	r1, #0
    1b54:	1814      	adds	r4, r2, r0
    1b56:	6021      	str	r1, [r4, #0]
    1b58:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b5a:	429a      	cmp	r2, r3
    1b5c:	d1fa      	bne.n	1b54 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b5e:	4a0e      	ldr	r2, [pc, #56]	; (1b98 <Reset_Handler+0x94>)
    1b60:	21ff      	movs	r1, #255	; 0xff
    1b62:	4b0e      	ldr	r3, [pc, #56]	; (1b9c <Reset_Handler+0x98>)
    1b64:	438b      	bics	r3, r1
    1b66:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1b68:	4a0d      	ldr	r2, [pc, #52]	; (1ba0 <Reset_Handler+0x9c>)
    1b6a:	6851      	ldr	r1, [r2, #4]
    1b6c:	2380      	movs	r3, #128	; 0x80
    1b6e:	430b      	orrs	r3, r1
    1b70:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1b72:	4b0c      	ldr	r3, [pc, #48]	; (1ba4 <Reset_Handler+0xa0>)
    1b74:	4798      	blx	r3

        /* Branch to main function */
        main();
    1b76:	4b0c      	ldr	r3, [pc, #48]	; (1ba8 <Reset_Handler+0xa4>)
    1b78:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1b7a:	e7fe      	b.n	1b7a <Reset_Handler+0x76>
    1b7c:	20000000 	.word	0x20000000
    1b80:	000022c8 	.word	0x000022c8
    1b84:	2000001c 	.word	0x2000001c
    1b88:	20000468 	.word	0x20000468
    1b8c:	20000020 	.word	0x20000020
    1b90:	20000004 	.word	0x20000004
    1b94:	20000024 	.word	0x20000024
    1b98:	e000ed00 	.word	0xe000ed00
    1b9c:	00000000 	.word	0x00000000
    1ba0:	41004000 	.word	0x41004000
    1ba4:	000021b1 	.word	0x000021b1
    1ba8:	00001e51 	.word	0x00001e51

00001bac <extint_detection_callback_1>:
	
	//X = ADXL345_GetX();
	//Y = ADXL345_GetY();
	//Z = ADXL345_GetZ();
	
}
    1bac:	4770      	bx	lr
    1bae:	46c0      	nop			; (mov r8, r8)

00001bb0 <configure_spi_master_AD5421>:
	
}


void configure_spi_master_AD5421(void)
{
    1bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb2:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1bb4:	4c29      	ldr	r4, [pc, #164]	; (1c5c <configure_spi_master_AD5421+0xac>)
    1bb6:	2312      	movs	r3, #18
    1bb8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1bba:	2300      	movs	r3, #0
    1bbc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1bbe:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1bc0:	a901      	add	r1, sp, #4
    1bc2:	2201      	movs	r2, #1
    1bc4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1bc6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1bc8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1bca:	2012      	movs	r0, #18
    1bcc:	4b24      	ldr	r3, [pc, #144]	; (1c60 <configure_spi_master_AD5421+0xb0>)
    1bce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1bd0:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bd2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1bd4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d104      	bne.n	1be4 <configure_spi_master_AD5421+0x34>
		return &(ports[port_index]->Group[group_index]);
    1bda:	095a      	lsrs	r2, r3, #5
    1bdc:	01d2      	lsls	r2, r2, #7
    1bde:	4921      	ldr	r1, [pc, #132]	; (1c64 <configure_spi_master_AD5421+0xb4>)
    1be0:	468c      	mov	ip, r1
    1be2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1be4:	251f      	movs	r5, #31
    1be6:	402b      	ands	r3, r5
    1be8:	2401      	movs	r4, #1
    1bea:	1c21      	adds	r1, r4, #0
    1bec:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1bee:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1bf0:	aa02      	add	r2, sp, #8
    1bf2:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1bf4:	2300      	movs	r3, #0
    1bf6:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1bf8:	21c0      	movs	r1, #192	; 0xc0
    1bfa:	0389      	lsls	r1, r1, #14
    1bfc:	60d1      	str	r1, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1bfe:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1c00:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    1c02:	7494      	strb	r4, [r2, #18]
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1c04:	9309      	str	r3, [sp, #36]	; 0x24
    1c06:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
	//! [mux_setting]
	
	/* Configure pad 0 for MOSI */
	//! [di]
	config_spi_master.pinmux_pad0 =  PINMUX_PA16D_SERCOM3_PAD0;
    1c08:	4917      	ldr	r1, [pc, #92]	; (1c68 <configure_spi_master_AD5421+0xb8>)
    1c0a:	6291      	str	r1, [r2, #40]	; 0x28
	//! [di]
	/* Configure pad 1 for CLOCK */
	//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;
    1c0c:	4917      	ldr	r1, [pc, #92]	; (1c6c <configure_spi_master_AD5421+0xbc>)
    1c0e:	62d1      	str	r1, [r2, #44]	; 0x2c
	//! [ss]
	/* Configure pad 2 for CS */
	//! [do]
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    1c10:	2101      	movs	r1, #1
    1c12:	4249      	negs	r1, r1
    1c14:	6311      	str	r1, [r2, #48]	; 0x30
	//! [do]
	/* Configure pad 3 for MISO */
	//! [sck]
	config_spi_master.pinmux_pad3 = PINMUX_PA19D_SERCOM3_PAD3;
    1c16:	4916      	ldr	r1, [pc, #88]	; (1c70 <configure_spi_master_AD5421+0xc0>)
    1c18:	6351      	str	r1, [r2, #52]	; 0x34
	//! [sck]
	
	
	config_spi_master.mode             = SPI_MODE_MASTER;
	config_spi_master.data_order       = SPI_DATA_ORDER_MSB;
	config_spi_master.transfer_mode    = SPI_TRANSFER_MODE_2;
    1c1a:	2180      	movs	r1, #128	; 0x80
    1c1c:	0589      	lsls	r1, r1, #22
    1c1e:	6091      	str	r1, [r2, #8]
	config_spi_master.character_size   = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master.run_in_standby   = false;
	config_spi_master.receiver_enable  = true;
	config_spi_master.generator_source = GCLK_GENERATOR_2;
    1c20:	2002      	movs	r0, #2
    1c22:	2124      	movs	r1, #36	; 0x24
    1c24:	5450      	strb	r0, [r2, r1]
	config_spi_master.mode_specific.master.baudrate = 1000000;
    1c26:	4913      	ldr	r1, [pc, #76]	; (1c74 <configure_spi_master_AD5421+0xc4>)
    1c28:	6191      	str	r1, [r2, #24]
	config_spi_master.master_slave_select_enable = true;
    1c2a:	7514      	strb	r4, [r2, #20]
	config_spi_master.select_slave_low_detect_enable = false;
    1c2c:	74d3      	strb	r3, [r2, #19]
	
	//! [init]
	spi_init(&spi_master_instance_AD5421, SERCOM3, &config_spi_master);
    1c2e:	4f12      	ldr	r7, [pc, #72]	; (1c78 <configure_spi_master_AD5421+0xc8>)
    1c30:	1c38      	adds	r0, r7, #0
    1c32:	4912      	ldr	r1, [pc, #72]	; (1c7c <configure_spi_master_AD5421+0xcc>)
    1c34:	4b12      	ldr	r3, [pc, #72]	; (1c80 <configure_spi_master_AD5421+0xd0>)
    1c36:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c38:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c3a:	1c30      	adds	r0, r6, #0
    1c3c:	4b11      	ldr	r3, [pc, #68]	; (1c84 <configure_spi_master_AD5421+0xd4>)
    1c3e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c40:	4005      	ands	r5, r0
    1c42:	40ac      	lsls	r4, r5
    1c44:	4b10      	ldr	r3, [pc, #64]	; (1c88 <configure_spi_master_AD5421+0xd8>)
    1c46:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c48:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1c4a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d1fc      	bne.n	1c4a <configure_spi_master_AD5421+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1c50:	6832      	ldr	r2, [r6, #0]
    1c52:	3302      	adds	r3, #2
    1c54:	4313      	orrs	r3, r2
    1c56:	6033      	str	r3, [r6, #0]

	//! [enable]
	spi_enable(&spi_master_instance_AD5421);
	//! [enable]

}
    1c58:	b011      	add	sp, #68	; 0x44
    1c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c5c:	200002a8 	.word	0x200002a8
    1c60:	00001289 	.word	0x00001289
    1c64:	40002800 	.word	0x40002800
    1c68:	00100003 	.word	0x00100003
    1c6c:	00110003 	.word	0x00110003
    1c70:	00130003 	.word	0x00130003
    1c74:	000f4240 	.word	0x000f4240
    1c78:	20000390 	.word	0x20000390
    1c7c:	42000c00 	.word	0x42000c00
    1c80:	00000b9d 	.word	0x00000b9d
    1c84:	00001195 	.word	0x00001195
    1c88:	e000e100 	.word	0xe000e100

00001c8c <configure_spi_master_ADXL>:

void configure_spi_master_ADXL(void)
{
    1c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1c90:	4c2a      	ldr	r4, [pc, #168]	; (1d3c <configure_spi_master_ADXL+0xb0>)
    1c92:	2306      	movs	r3, #6
    1c94:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1c96:	2300      	movs	r3, #0
    1c98:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1c9a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1c9c:	a901      	add	r1, sp, #4
    1c9e:	2201      	movs	r2, #1
    1ca0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1ca2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1ca4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1ca6:	2006      	movs	r0, #6
    1ca8:	4b25      	ldr	r3, [pc, #148]	; (1d40 <configure_spi_master_ADXL+0xb4>)
    1caa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1cac:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1cae:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1cb0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1cb2:	2900      	cmp	r1, #0
    1cb4:	d104      	bne.n	1cc0 <configure_spi_master_ADXL+0x34>
		return &(ports[port_index]->Group[group_index]);
    1cb6:	095a      	lsrs	r2, r3, #5
    1cb8:	01d2      	lsls	r2, r2, #7
    1cba:	4922      	ldr	r1, [pc, #136]	; (1d44 <configure_spi_master_ADXL+0xb8>)
    1cbc:	468c      	mov	ip, r1
    1cbe:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cc0:	251f      	movs	r5, #31
    1cc2:	402b      	ands	r3, r5
    1cc4:	2401      	movs	r4, #1
    1cc6:	1c21      	adds	r1, r4, #0
    1cc8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1cca:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1ccc:	aa02      	add	r2, sp, #8
    1cce:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1cd0:	2300      	movs	r3, #0
    1cd2:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1cd4:	21c0      	movs	r1, #192	; 0xc0
    1cd6:	0389      	lsls	r1, r1, #14
    1cd8:	60d1      	str	r1, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1cda:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1cdc:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    1cde:	7494      	strb	r4, [r2, #18]
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1ce0:	9309      	str	r3, [sp, #36]	; 0x24
    1ce2:	930a      	str	r3, [sp, #40]	; 0x28
	spi_attach_slave(&slave_ADXL, &slave_dev_config_adxl);
	
	spi_get_config_defaults(&config_spi_master_adxl);
	
	config_spi_master_adxl.mux_setting = SPI_SIGNAL_MUX_SETTING_D;	
	config_spi_master_adxl.pinmux_pad0 =  PINMUX_PA04D_SERCOM0_PAD0;	
    1ce4:	4918      	ldr	r1, [pc, #96]	; (1d48 <configure_spi_master_ADXL+0xbc>)
    1ce6:	6291      	str	r1, [r2, #40]	; 0x28
	config_spi_master_adxl.pinmux_pad1 = PINMUX_PA05D_SERCOM0_PAD1;	
    1ce8:	4918      	ldr	r1, [pc, #96]	; (1d4c <configure_spi_master_ADXL+0xc0>)
    1cea:	62d1      	str	r1, [r2, #44]	; 0x2c
	config_spi_master_adxl.pinmux_pad2 = PINMUX_UNUSED;	
    1cec:	2101      	movs	r1, #1
    1cee:	4249      	negs	r1, r1
    1cf0:	6311      	str	r1, [r2, #48]	; 0x30
	
	
	config_spi_master_adxl.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    1cf2:	4917      	ldr	r1, [pc, #92]	; (1d50 <configure_spi_master_ADXL+0xc4>)
    1cf4:	6351      	str	r1, [r2, #52]	; 0x34
		
	config_spi_master_adxl.mode             = SPI_MODE_MASTER;
	config_spi_master_adxl.data_order       = SPI_DATA_ORDER_MSB;
	config_spi_master_adxl.transfer_mode    = SPI_TRANSFER_MODE_3;
    1cf6:	21c0      	movs	r1, #192	; 0xc0
    1cf8:	0589      	lsls	r1, r1, #22
    1cfa:	6091      	str	r1, [r2, #8]
	config_spi_master_adxl.character_size   = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master_adxl.run_in_standby   = false;
	config_spi_master_adxl.receiver_enable  = true;
	config_spi_master_adxl.generator_source = GCLK_GENERATOR_2;
    1cfc:	2002      	movs	r0, #2
    1cfe:	2124      	movs	r1, #36	; 0x24
    1d00:	5450      	strb	r0, [r2, r1]
	config_spi_master_adxl.mode_specific.master.baudrate = 4000000;
    1d02:	4914      	ldr	r1, [pc, #80]	; (1d54 <configure_spi_master_ADXL+0xc8>)
    1d04:	6191      	str	r1, [r2, #24]
	config_spi_master_adxl.master_slave_select_enable = true;
    1d06:	7514      	strb	r4, [r2, #20]
	config_spi_master_adxl.select_slave_low_detect_enable = false;
    1d08:	74d3      	strb	r3, [r2, #19]
		
	spi_init(&spi_master_instance_ADXL, SERCOM0, &config_spi_master_adxl);
    1d0a:	4f13      	ldr	r7, [pc, #76]	; (1d58 <configure_spi_master_ADXL+0xcc>)
    1d0c:	1c38      	adds	r0, r7, #0
    1d0e:	2184      	movs	r1, #132	; 0x84
    1d10:	05c9      	lsls	r1, r1, #23
    1d12:	4b12      	ldr	r3, [pc, #72]	; (1d5c <configure_spi_master_ADXL+0xd0>)
    1d14:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d16:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d18:	1c30      	adds	r0, r6, #0
    1d1a:	4b11      	ldr	r3, [pc, #68]	; (1d60 <configure_spi_master_ADXL+0xd4>)
    1d1c:	4798      	blx	r3
    1d1e:	4005      	ands	r5, r0
    1d20:	40ac      	lsls	r4, r5
    1d22:	4b10      	ldr	r3, [pc, #64]	; (1d64 <configure_spi_master_ADXL+0xd8>)
    1d24:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d26:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1d28:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d1fc      	bne.n	1d28 <configure_spi_master_ADXL+0x9c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1d2e:	6832      	ldr	r2, [r6, #0]
    1d30:	3302      	adds	r3, #2
    1d32:	4313      	orrs	r3, r2
    1d34:	6033      	str	r3, [r6, #0]
		
	spi_enable(&spi_master_instance_ADXL);
	

}
    1d36:	b011      	add	sp, #68	; 0x44
    1d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	2000037c 	.word	0x2000037c
    1d40:	00001289 	.word	0x00001289
    1d44:	40002800 	.word	0x40002800
    1d48:	00040003 	.word	0x00040003
    1d4c:	00050003 	.word	0x00050003
    1d50:	00070003 	.word	0x00070003
    1d54:	003d0900 	.word	0x003d0900
    1d58:	20000250 	.word	0x20000250
    1d5c:	00000b9d 	.word	0x00000b9d
    1d60:	00001195 	.word	0x00001195
    1d64:	e000e100 	.word	0xe000e100

00001d68 <SPI_Write_AD5421>:

void SPI_Write_AD5421(uint8_t* data)
{
    1d68:	b538      	push	{r3, r4, r5, lr}
    1d6a:	1c01      	adds	r1, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d6c:	4c04      	ldr	r4, [pc, #16]	; (1d80 <SPI_Write_AD5421+0x18>)
    1d6e:	2580      	movs	r5, #128	; 0x80
    1d70:	02ed      	lsls	r5, r5, #11
    1d72:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA18, 0);
	spi_write_buffer_wait(&spi_master_instance_AD5421, data, 3);
    1d74:	4803      	ldr	r0, [pc, #12]	; (1d84 <SPI_Write_AD5421+0x1c>)
    1d76:	2203      	movs	r2, #3
    1d78:	4b03      	ldr	r3, [pc, #12]	; (1d88 <SPI_Write_AD5421+0x20>)
    1d7a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d7c:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA18, 1);
}
    1d7e:	bd38      	pop	{r3, r4, r5, pc}
    1d80:	40002800 	.word	0x40002800
    1d84:	20000390 	.word	0x20000390
    1d88:	00000d91 	.word	0x00000d91

00001d8c <SPI_Read_AD5421>:

void SPI_Read_AD5421(uint8_t* data)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	1c02      	adds	r2, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d90:	4c05      	ldr	r4, [pc, #20]	; (1da8 <SPI_Read_AD5421+0x1c>)
    1d92:	2580      	movs	r5, #128	; 0x80
    1d94:	02ed      	lsls	r5, r5, #11
    1d96:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA18, 0);
	//spi_read_buffer_wait(&spi_master_instance_AD5421, data, 3, 0);
	spi_transceive_buffer_wait(&spi_master_instance_AD5421, data, data, 3);
    1d98:	4804      	ldr	r0, [pc, #16]	; (1dac <SPI_Read_AD5421+0x20>)
    1d9a:	1c11      	adds	r1, r2, #0
    1d9c:	2303      	movs	r3, #3
    1d9e:	4e04      	ldr	r6, [pc, #16]	; (1db0 <SPI_Read_AD5421+0x24>)
    1da0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1da2:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA18, 1);	
}
    1da4:	bd70      	pop	{r4, r5, r6, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	40002800 	.word	0x40002800
    1dac:	20000390 	.word	0x20000390
    1db0:	00000e95 	.word	0x00000e95

00001db4 <SPI_Write_ADXL>:

void SPI_Write_ADXL(uint8_t* data)
{
    1db4:	b538      	push	{r3, r4, r5, lr}
    1db6:	1c01      	adds	r1, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1db8:	4c04      	ldr	r4, [pc, #16]	; (1dcc <SPI_Write_ADXL+0x18>)
    1dba:	2540      	movs	r5, #64	; 0x40
    1dbc:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA06, 0);
	spi_write_buffer_wait(&spi_master_instance_ADXL, data, 2);	
    1dbe:	4804      	ldr	r0, [pc, #16]	; (1dd0 <SPI_Write_ADXL+0x1c>)
    1dc0:	2202      	movs	r2, #2
    1dc2:	4b04      	ldr	r3, [pc, #16]	; (1dd4 <SPI_Write_ADXL+0x20>)
    1dc4:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1dc6:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA06, 1);
}
    1dc8:	bd38      	pop	{r3, r4, r5, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	40002800 	.word	0x40002800
    1dd0:	20000250 	.word	0x20000250
    1dd4:	00000d91 	.word	0x00000d91

00001dd8 <SPI_Read_ADXL>:

void SPI_Read_ADXL(uint8_t* data)
{	
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	1c02      	adds	r2, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ddc:	4c04      	ldr	r4, [pc, #16]	; (1df0 <SPI_Read_ADXL+0x18>)
    1dde:	2540      	movs	r5, #64	; 0x40
    1de0:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA06, 0);
	//spi_read_buffer_wait(&spi_master_instance_ADXL, data, 2, 0);
	spi_transceive_buffer_wait(&spi_master_instance_ADXL, data, data, 2);
    1de2:	4804      	ldr	r0, [pc, #16]	; (1df4 <SPI_Read_ADXL+0x1c>)
    1de4:	1c11      	adds	r1, r2, #0
    1de6:	2302      	movs	r3, #2
    1de8:	4e03      	ldr	r6, [pc, #12]	; (1df8 <SPI_Read_ADXL+0x20>)
    1dea:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1dec:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA06, 1);
}
    1dee:	bd70      	pop	{r4, r5, r6, pc}
    1df0:	40002800 	.word	0x40002800
    1df4:	20000250 	.word	0x20000250
    1df8:	00000e95 	.word	0x00000e95

00001dfc <configure_extint_channel>:




void configure_extint_channel(void)
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    1e00:	ac01      	add	r4, sp, #4
    1e02:	1c20      	adds	r0, r4, #0
    1e04:	4b07      	ldr	r3, [pc, #28]	; (1e24 <configure_extint_channel+0x28>)
    1e06:	4798      	blx	r3

	config_extint_chan.gpio_pin           = PIN_PA02A_EIC_EXTINT2;
    1e08:	2302      	movs	r3, #2
    1e0a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = PINMUX_PA02A_EIC_EXTINT2;
    1e0c:	2280      	movs	r2, #128	; 0x80
    1e0e:	0292      	lsls	r2, r2, #10
    1e10:	6062      	str	r2, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    1e12:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1e14:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(2, &config_extint_chan);
    1e16:	2002      	movs	r0, #2
    1e18:	1c21      	adds	r1, r4, #0
    1e1a:	4b03      	ldr	r3, [pc, #12]	; (1e28 <configure_extint_channel+0x2c>)
    1e1c:	4798      	blx	r3
}
    1e1e:	b004      	add	sp, #16
    1e20:	bd10      	pop	{r4, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	00000519 	.word	0x00000519
    1e28:	0000052d 	.word	0x0000052d

00001e2c <configure_extint_callbacks>:
	//Z = ADXL345_GetZ();
	
}

void configure_extint_callbacks(void)
{
    1e2c:	b508      	push	{r3, lr}
	extint_register_callback(extint_detection_callback_1, 2, EXTINT_CALLBACK_TYPE_DETECT);
    1e2e:	4805      	ldr	r0, [pc, #20]	; (1e44 <configure_extint_callbacks+0x18>)
    1e30:	2102      	movs	r1, #2
    1e32:	2200      	movs	r2, #0
    1e34:	4b04      	ldr	r3, [pc, #16]	; (1e48 <configure_extint_callbacks+0x1c>)
    1e36:	4798      	blx	r3
	extint_chan_enable_callback(2, EXTINT_CALLBACK_TYPE_DETECT);
    1e38:	2002      	movs	r0, #2
    1e3a:	2100      	movs	r1, #0
    1e3c:	4b03      	ldr	r3, [pc, #12]	; (1e4c <configure_extint_callbacks+0x20>)
    1e3e:	4798      	blx	r3
}
    1e40:	bd08      	pop	{r3, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00001bad 	.word	0x00001bad
    1e48:	000003a1 	.word	0x000003a1
    1e4c:	000003cd 	.word	0x000003cd

00001e50 <main>:
		vTaskDelay(100);
	}
}

int main (void)
{
    1e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e52:	b085      	sub	sp, #20
	volatile char temp = 1;
    1e54:	2301      	movs	r3, #1
    1e56:	220f      	movs	r2, #15
    1e58:	446a      	add	r2, sp
    1e5a:	7013      	strb	r3, [r2, #0]
	volatile uint16_t temp1 = 1;
    1e5c:	2501      	movs	r5, #1
    1e5e:	aa03      	add	r2, sp, #12
    1e60:	8013      	strh	r3, [r2, #0]
	volatile uint16_t temp2 = 1;
    1e62:	220a      	movs	r2, #10
    1e64:	446a      	add	r2, sp
    1e66:	8013      	strh	r3, [r2, #0]
	volatile bool state = false;
    1e68:	2600      	movs	r6, #0
    1e6a:	3308      	adds	r3, #8
    1e6c:	446b      	add	r3, sp
    1e6e:	701e      	strb	r6, [r3, #0]
	
	system_init();
    1e70:	4b42      	ldr	r3, [pc, #264]	; (1f7c <main+0x12c>)
    1e72:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1e74:	466b      	mov	r3, sp
    1e76:	701e      	strb	r6, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    1e78:	709e      	strb	r6, [r3, #2]
	
	struct port_config pin;
	port_get_config_defaults(&pin);
	
	pin.direction = PORT_PIN_DIR_INPUT;
	pin.input_pull = PORT_PIN_PULL_DOWN;
    1e7a:	2702      	movs	r7, #2
    1e7c:	705f      	strb	r7, [r3, #1]
	port_pin_set_config(PIN_PA00, &pin);
    1e7e:	2000      	movs	r0, #0
    1e80:	4669      	mov	r1, sp
    1e82:	4c3f      	ldr	r4, [pc, #252]	; (1f80 <main+0x130>)
    1e84:	47a0      	blx	r4
		
	pin.direction = PORT_PIN_DIR_INPUT;
    1e86:	466b      	mov	r3, sp
    1e88:	701e      	strb	r6, [r3, #0]
	pin.input_pull = PORT_PIN_PULL_DOWN;
    1e8a:	705f      	strb	r7, [r3, #1]
	port_pin_set_config(PIN_PA01, &pin);
    1e8c:	2001      	movs	r0, #1
    1e8e:	4669      	mov	r1, sp
    1e90:	47a0      	blx	r4
	
	pin.direction = PORT_PIN_DIR_INPUT;
    1e92:	466b      	mov	r3, sp
    1e94:	701e      	strb	r6, [r3, #0]
	pin.input_pull = PORT_PIN_PULL_NONE;
    1e96:	705e      	strb	r6, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin);
    1e98:	2002      	movs	r0, #2
    1e9a:	4669      	mov	r1, sp
    1e9c:	47a0      	blx	r4
	
		pin.direction = PORT_PIN_DIR_OUTPUT;
    1e9e:	466b      	mov	r3, sp
    1ea0:	701d      	strb	r5, [r3, #0]
		port_pin_set_config(PIN_PA03, &pin);
    1ea2:	2003      	movs	r0, #3
    1ea4:	4669      	mov	r1, sp
    1ea6:	47a0      	blx	r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ea8:	4f36      	ldr	r7, [pc, #216]	; (1f84 <main+0x134>)
    1eaa:	2308      	movs	r3, #8
    1eac:	617b      	str	r3, [r7, #20]
	//
	//pin.direction = PORT_PIN_DIR_INPUT;
	//pin.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(PIN_PA07, &pin);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1eae:	466b      	mov	r3, sp
    1eb0:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA08, &pin);
    1eb2:	2008      	movs	r0, #8
    1eb4:	4669      	mov	r1, sp
    1eb6:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1eb8:	2380      	movs	r3, #128	; 0x80
    1eba:	005b      	lsls	r3, r3, #1
    1ebc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA08, 1);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1ebe:	466b      	mov	r3, sp
    1ec0:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA09, &pin);
    1ec2:	2009      	movs	r0, #9
    1ec4:	4669      	mov	r1, sp
    1ec6:	47a0      	blx	r4
    1ec8:	2380      	movs	r3, #128	; 0x80
    1eca:	009b      	lsls	r3, r3, #2
    1ecc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA09, 1);
	
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1ece:	466b      	mov	r3, sp
    1ed0:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA10, &pin);
    1ed2:	200a      	movs	r0, #10
    1ed4:	4669      	mov	r1, sp
    1ed6:	47a0      	blx	r4
    1ed8:	2380      	movs	r3, #128	; 0x80
    1eda:	00db      	lsls	r3, r3, #3
    1edc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA10, 1);
	
	pin.direction = PORT_PIN_DIR_INPUT;
    1ede:	466b      	mov	r3, sp
    1ee0:	701e      	strb	r6, [r3, #0]
	pin.input_pull = PORT_PIN_PULL_NONE;
    1ee2:	705e      	strb	r6, [r3, #1]
	port_pin_set_config(PIN_PA11, &pin);
    1ee4:	200b      	movs	r0, #11
    1ee6:	4669      	mov	r1, sp
    1ee8:	47a0      	blx	r4
	//
	//pin.direction = PORT_PIN_DIR_INPUT;
	//pin.input_pull = PORT_PIN_PULL_NONE;
	//port_pin_set_config(PIN_PA19, &pin);	
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1eea:	466b      	mov	r3, sp
    1eec:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA22, &pin);
    1eee:	2016      	movs	r0, #22
    1ef0:	4669      	mov	r1, sp
    1ef2:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ef4:	2380      	movs	r3, #128	; 0x80
    1ef6:	03db      	lsls	r3, r3, #15
    1ef8:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA22, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1efa:	466b      	mov	r3, sp
    1efc:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA24, &pin);
    1efe:	2018      	movs	r0, #24
    1f00:	4669      	mov	r1, sp
    1f02:	47a0      	blx	r4
    1f04:	2380      	movs	r3, #128	; 0x80
    1f06:	045b      	lsls	r3, r3, #17
    1f08:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA24, 0);
		
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1f0a:	466b      	mov	r3, sp
    1f0c:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA27, &pin);
    1f0e:	201b      	movs	r0, #27
    1f10:	4669      	mov	r1, sp
    1f12:	47a0      	blx	r4
    1f14:	2380      	movs	r3, #128	; 0x80
    1f16:	051b      	lsls	r3, r3, #20
    1f18:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA27, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1f1a:	466b      	mov	r3, sp
    1f1c:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA30, &pin);
    1f1e:	201e      	movs	r0, #30
    1f20:	4669      	mov	r1, sp
    1f22:	47a0      	blx	r4
    1f24:	2380      	movs	r3, #128	; 0x80
    1f26:	05db      	lsls	r3, r3, #23
    1f28:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA30, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1f2a:	466b      	mov	r3, sp
    1f2c:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA31, &pin);
    1f2e:	201f      	movs	r0, #31
    1f30:	4669      	mov	r1, sp
    1f32:	47a0      	blx	r4
    1f34:	2380      	movs	r3, #128	; 0x80
    1f36:	061b      	lsls	r3, r3, #24
    1f38:	617b      	str	r3, [r7, #20]
	
	init_gpio();

	//clock_output();
	
	delay_init();
    1f3a:	4b13      	ldr	r3, [pc, #76]	; (1f88 <main+0x138>)
    1f3c:	4798      	blx	r3
	
		
	configure_spi_master_AD5421();
    1f3e:	4b13      	ldr	r3, [pc, #76]	; (1f8c <main+0x13c>)
    1f40:	4798      	blx	r3
	configure_spi_master_ADXL();
    1f42:	4b13      	ldr	r3, [pc, #76]	; (1f90 <main+0x140>)
    1f44:	4798      	blx	r3
	
	AD5421_Init();	
    1f46:	4b13      	ldr	r3, [pc, #76]	; (1f94 <main+0x144>)
    1f48:	4798      	blx	r3
	ADXL345_Init();
    1f4a:	4b13      	ldr	r3, [pc, #76]	; (1f98 <main+0x148>)
    1f4c:	4798      	blx	r3
	
	configure_extint_channel();		
    1f4e:	4b13      	ldr	r3, [pc, #76]	; (1f9c <main+0x14c>)
    1f50:	4798      	blx	r3
	configure_extint_callbacks();	
    1f52:	4b13      	ldr	r3, [pc, #76]	; (1fa0 <main+0x150>)
    1f54:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1f56:	4b13      	ldr	r3, [pc, #76]	; (1fa4 <main+0x154>)
    1f58:	701d      	strb	r5, [r3, #0]
    1f5a:	f3bf 8f5f 	dmb	sy
    1f5e:	b662      	cpsie	i
		//
		//dma_enable_callback(&dma_resource_tx, DMA_CALLBACK_TRANSFER_DONE);
		//dma_enable_callback(&dma_resource_rx, DMA_CALLBACK_TRANSFER_DONE);
	

	volatile int C = 0;	
    1f60:	9601      	str	r6, [sp, #4]
		//delay_ms(500);

		
		//state = port_pin_get_output_level(PIN_PA27);
	
	X = ADXL345_GetX();
    1f62:	4e11      	ldr	r6, [pc, #68]	; (1fa8 <main+0x158>)
    1f64:	4d11      	ldr	r5, [pc, #68]	; (1fac <main+0x15c>)
 	Y = ADXL345_GetY();
    1f66:	4c12      	ldr	r4, [pc, #72]	; (1fb0 <main+0x160>)
		//delay_ms(500);

		
		//state = port_pin_get_output_level(PIN_PA27);
	
	X = ADXL345_GetX();
    1f68:	47b0      	blx	r6
    1f6a:	6028      	str	r0, [r5, #0]
 	Y = ADXL345_GetY();
    1f6c:	47a0      	blx	r4
    1f6e:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <main+0x164>)
    1f70:	6018      	str	r0, [r3, #0]
 	Z = ADXL345_GetZ();
    1f72:	4b11      	ldr	r3, [pc, #68]	; (1fb8 <main+0x168>)
    1f74:	4798      	blx	r3
    1f76:	4b11      	ldr	r3, [pc, #68]	; (1fbc <main+0x16c>)
    1f78:	6018      	str	r0, [r3, #0]
	 
	 //buffer_x;
	 
	 //delay_ms(100);
		
	}	
    1f7a:	e7f5      	b.n	1f68 <main+0x118>
    1f7c:	00001ac1 	.word	0x00001ac1
    1f80:	00001289 	.word	0x00001289
    1f84:	40002800 	.word	0x40002800
    1f88:	00001221 	.word	0x00001221
    1f8c:	00001bb1 	.word	0x00001bb1
    1f90:	00001c8d 	.word	0x00001c8d
    1f94:	00000171 	.word	0x00000171
    1f98:	00000209 	.word	0x00000209
    1f9c:	00001dfd 	.word	0x00001dfd
    1fa0:	00001e2d 	.word	0x00001e2d
    1fa4:	2000000c 	.word	0x2000000c
    1fa8:	00000289 	.word	0x00000289
    1fac:	20000010 	.word	0x20000010
    1fb0:	000002ad 	.word	0x000002ad
    1fb4:	20000014 	.word	0x20000014
    1fb8:	000002d1 	.word	0x000002d1
    1fbc:	20000018 	.word	0x20000018

00001fc0 <__aeabi_uidiv>:
    1fc0:	2200      	movs	r2, #0
    1fc2:	0843      	lsrs	r3, r0, #1
    1fc4:	428b      	cmp	r3, r1
    1fc6:	d374      	bcc.n	20b2 <STACK_SIZE+0xb2>
    1fc8:	0903      	lsrs	r3, r0, #4
    1fca:	428b      	cmp	r3, r1
    1fcc:	d35f      	bcc.n	208e <STACK_SIZE+0x8e>
    1fce:	0a03      	lsrs	r3, r0, #8
    1fd0:	428b      	cmp	r3, r1
    1fd2:	d344      	bcc.n	205e <STACK_SIZE+0x5e>
    1fd4:	0b03      	lsrs	r3, r0, #12
    1fd6:	428b      	cmp	r3, r1
    1fd8:	d328      	bcc.n	202c <STACK_SIZE+0x2c>
    1fda:	0c03      	lsrs	r3, r0, #16
    1fdc:	428b      	cmp	r3, r1
    1fde:	d30d      	bcc.n	1ffc <__aeabi_uidiv+0x3c>
    1fe0:	22ff      	movs	r2, #255	; 0xff
    1fe2:	0209      	lsls	r1, r1, #8
    1fe4:	ba12      	rev	r2, r2
    1fe6:	0c03      	lsrs	r3, r0, #16
    1fe8:	428b      	cmp	r3, r1
    1fea:	d302      	bcc.n	1ff2 <__aeabi_uidiv+0x32>
    1fec:	1212      	asrs	r2, r2, #8
    1fee:	0209      	lsls	r1, r1, #8
    1ff0:	d065      	beq.n	20be <STACK_SIZE+0xbe>
    1ff2:	0b03      	lsrs	r3, r0, #12
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d319      	bcc.n	202c <STACK_SIZE+0x2c>
    1ff8:	e000      	b.n	1ffc <__aeabi_uidiv+0x3c>
    1ffa:	0a09      	lsrs	r1, r1, #8
    1ffc:	0bc3      	lsrs	r3, r0, #15
    1ffe:	428b      	cmp	r3, r1
    2000:	d301      	bcc.n	2006 <STACK_SIZE+0x6>
    2002:	03cb      	lsls	r3, r1, #15
    2004:	1ac0      	subs	r0, r0, r3
    2006:	4152      	adcs	r2, r2
    2008:	0b83      	lsrs	r3, r0, #14
    200a:	428b      	cmp	r3, r1
    200c:	d301      	bcc.n	2012 <STACK_SIZE+0x12>
    200e:	038b      	lsls	r3, r1, #14
    2010:	1ac0      	subs	r0, r0, r3
    2012:	4152      	adcs	r2, r2
    2014:	0b43      	lsrs	r3, r0, #13
    2016:	428b      	cmp	r3, r1
    2018:	d301      	bcc.n	201e <STACK_SIZE+0x1e>
    201a:	034b      	lsls	r3, r1, #13
    201c:	1ac0      	subs	r0, r0, r3
    201e:	4152      	adcs	r2, r2
    2020:	0b03      	lsrs	r3, r0, #12
    2022:	428b      	cmp	r3, r1
    2024:	d301      	bcc.n	202a <STACK_SIZE+0x2a>
    2026:	030b      	lsls	r3, r1, #12
    2028:	1ac0      	subs	r0, r0, r3
    202a:	4152      	adcs	r2, r2
    202c:	0ac3      	lsrs	r3, r0, #11
    202e:	428b      	cmp	r3, r1
    2030:	d301      	bcc.n	2036 <STACK_SIZE+0x36>
    2032:	02cb      	lsls	r3, r1, #11
    2034:	1ac0      	subs	r0, r0, r3
    2036:	4152      	adcs	r2, r2
    2038:	0a83      	lsrs	r3, r0, #10
    203a:	428b      	cmp	r3, r1
    203c:	d301      	bcc.n	2042 <STACK_SIZE+0x42>
    203e:	028b      	lsls	r3, r1, #10
    2040:	1ac0      	subs	r0, r0, r3
    2042:	4152      	adcs	r2, r2
    2044:	0a43      	lsrs	r3, r0, #9
    2046:	428b      	cmp	r3, r1
    2048:	d301      	bcc.n	204e <STACK_SIZE+0x4e>
    204a:	024b      	lsls	r3, r1, #9
    204c:	1ac0      	subs	r0, r0, r3
    204e:	4152      	adcs	r2, r2
    2050:	0a03      	lsrs	r3, r0, #8
    2052:	428b      	cmp	r3, r1
    2054:	d301      	bcc.n	205a <STACK_SIZE+0x5a>
    2056:	020b      	lsls	r3, r1, #8
    2058:	1ac0      	subs	r0, r0, r3
    205a:	4152      	adcs	r2, r2
    205c:	d2cd      	bcs.n	1ffa <__aeabi_uidiv+0x3a>
    205e:	09c3      	lsrs	r3, r0, #7
    2060:	428b      	cmp	r3, r1
    2062:	d301      	bcc.n	2068 <STACK_SIZE+0x68>
    2064:	01cb      	lsls	r3, r1, #7
    2066:	1ac0      	subs	r0, r0, r3
    2068:	4152      	adcs	r2, r2
    206a:	0983      	lsrs	r3, r0, #6
    206c:	428b      	cmp	r3, r1
    206e:	d301      	bcc.n	2074 <STACK_SIZE+0x74>
    2070:	018b      	lsls	r3, r1, #6
    2072:	1ac0      	subs	r0, r0, r3
    2074:	4152      	adcs	r2, r2
    2076:	0943      	lsrs	r3, r0, #5
    2078:	428b      	cmp	r3, r1
    207a:	d301      	bcc.n	2080 <STACK_SIZE+0x80>
    207c:	014b      	lsls	r3, r1, #5
    207e:	1ac0      	subs	r0, r0, r3
    2080:	4152      	adcs	r2, r2
    2082:	0903      	lsrs	r3, r0, #4
    2084:	428b      	cmp	r3, r1
    2086:	d301      	bcc.n	208c <STACK_SIZE+0x8c>
    2088:	010b      	lsls	r3, r1, #4
    208a:	1ac0      	subs	r0, r0, r3
    208c:	4152      	adcs	r2, r2
    208e:	08c3      	lsrs	r3, r0, #3
    2090:	428b      	cmp	r3, r1
    2092:	d301      	bcc.n	2098 <STACK_SIZE+0x98>
    2094:	00cb      	lsls	r3, r1, #3
    2096:	1ac0      	subs	r0, r0, r3
    2098:	4152      	adcs	r2, r2
    209a:	0883      	lsrs	r3, r0, #2
    209c:	428b      	cmp	r3, r1
    209e:	d301      	bcc.n	20a4 <STACK_SIZE+0xa4>
    20a0:	008b      	lsls	r3, r1, #2
    20a2:	1ac0      	subs	r0, r0, r3
    20a4:	4152      	adcs	r2, r2
    20a6:	0843      	lsrs	r3, r0, #1
    20a8:	428b      	cmp	r3, r1
    20aa:	d301      	bcc.n	20b0 <STACK_SIZE+0xb0>
    20ac:	004b      	lsls	r3, r1, #1
    20ae:	1ac0      	subs	r0, r0, r3
    20b0:	4152      	adcs	r2, r2
    20b2:	1a41      	subs	r1, r0, r1
    20b4:	d200      	bcs.n	20b8 <STACK_SIZE+0xb8>
    20b6:	4601      	mov	r1, r0
    20b8:	4152      	adcs	r2, r2
    20ba:	4610      	mov	r0, r2
    20bc:	4770      	bx	lr
    20be:	e7ff      	b.n	20c0 <STACK_SIZE+0xc0>
    20c0:	b501      	push	{r0, lr}
    20c2:	2000      	movs	r0, #0
    20c4:	f000 f80c 	bl	20e0 <__aeabi_idiv0>
    20c8:	bd02      	pop	{r1, pc}
    20ca:	46c0      	nop			; (mov r8, r8)

000020cc <__aeabi_uidivmod>:
    20cc:	2900      	cmp	r1, #0
    20ce:	d0f7      	beq.n	20c0 <STACK_SIZE+0xc0>
    20d0:	b503      	push	{r0, r1, lr}
    20d2:	f7ff ff75 	bl	1fc0 <__aeabi_uidiv>
    20d6:	bc0e      	pop	{r1, r2, r3}
    20d8:	4342      	muls	r2, r0
    20da:	1a89      	subs	r1, r1, r2
    20dc:	4718      	bx	r3
    20de:	46c0      	nop			; (mov r8, r8)

000020e0 <__aeabi_idiv0>:
    20e0:	4770      	bx	lr
    20e2:	46c0      	nop			; (mov r8, r8)

000020e4 <__aeabi_i2f>:
    20e4:	b570      	push	{r4, r5, r6, lr}
    20e6:	1e04      	subs	r4, r0, #0
    20e8:	d039      	beq.n	215e <__aeabi_i2f+0x7a>
    20ea:	0fc5      	lsrs	r5, r0, #31
    20ec:	d000      	beq.n	20f0 <__aeabi_i2f+0xc>
    20ee:	4244      	negs	r4, r0
    20f0:	1c20      	adds	r0, r4, #0
    20f2:	f000 f83f 	bl	2174 <__clzsi2>
    20f6:	239e      	movs	r3, #158	; 0x9e
    20f8:	1c26      	adds	r6, r4, #0
    20fa:	1a1b      	subs	r3, r3, r0
    20fc:	2b96      	cmp	r3, #150	; 0x96
    20fe:	dc07      	bgt.n	2110 <__aeabi_i2f+0x2c>
    2100:	2808      	cmp	r0, #8
    2102:	dd01      	ble.n	2108 <__aeabi_i2f+0x24>
    2104:	3808      	subs	r0, #8
    2106:	4084      	lsls	r4, r0
    2108:	0264      	lsls	r4, r4, #9
    210a:	0a64      	lsrs	r4, r4, #9
    210c:	b2d8      	uxtb	r0, r3
    210e:	e01e      	b.n	214e <__aeabi_i2f+0x6a>
    2110:	2b99      	cmp	r3, #153	; 0x99
    2112:	dd0a      	ble.n	212a <__aeabi_i2f+0x46>
    2114:	2205      	movs	r2, #5
    2116:	1c21      	adds	r1, r4, #0
    2118:	1a12      	subs	r2, r2, r0
    211a:	40d1      	lsrs	r1, r2
    211c:	1c0a      	adds	r2, r1, #0
    211e:	1c01      	adds	r1, r0, #0
    2120:	311b      	adds	r1, #27
    2122:	408e      	lsls	r6, r1
    2124:	1e71      	subs	r1, r6, #1
    2126:	418e      	sbcs	r6, r1
    2128:	4316      	orrs	r6, r2
    212a:	2805      	cmp	r0, #5
    212c:	dd01      	ble.n	2132 <__aeabi_i2f+0x4e>
    212e:	1f42      	subs	r2, r0, #5
    2130:	4096      	lsls	r6, r2
    2132:	4c0f      	ldr	r4, [pc, #60]	; (2170 <__aeabi_i2f+0x8c>)
    2134:	4034      	ands	r4, r6
    2136:	0772      	lsls	r2, r6, #29
    2138:	d004      	beq.n	2144 <__aeabi_i2f+0x60>
    213a:	220f      	movs	r2, #15
    213c:	4016      	ands	r6, r2
    213e:	2e04      	cmp	r6, #4
    2140:	d000      	beq.n	2144 <__aeabi_i2f+0x60>
    2142:	3404      	adds	r4, #4
    2144:	0162      	lsls	r2, r4, #5
    2146:	d40e      	bmi.n	2166 <__aeabi_i2f+0x82>
    2148:	01a4      	lsls	r4, r4, #6
    214a:	0a64      	lsrs	r4, r4, #9
    214c:	b2d8      	uxtb	r0, r3
    214e:	0264      	lsls	r4, r4, #9
    2150:	05c0      	lsls	r0, r0, #23
    2152:	0a64      	lsrs	r4, r4, #9
    2154:	07ed      	lsls	r5, r5, #31
    2156:	4304      	orrs	r4, r0
    2158:	432c      	orrs	r4, r5
    215a:	1c20      	adds	r0, r4, #0
    215c:	bd70      	pop	{r4, r5, r6, pc}
    215e:	2500      	movs	r5, #0
    2160:	2000      	movs	r0, #0
    2162:	2400      	movs	r4, #0
    2164:	e7f3      	b.n	214e <__aeabi_i2f+0x6a>
    2166:	4b02      	ldr	r3, [pc, #8]	; (2170 <__aeabi_i2f+0x8c>)
    2168:	401c      	ands	r4, r3
    216a:	239f      	movs	r3, #159	; 0x9f
    216c:	1a1b      	subs	r3, r3, r0
    216e:	e7eb      	b.n	2148 <__aeabi_i2f+0x64>
    2170:	fbffffff 	.word	0xfbffffff

00002174 <__clzsi2>:
    2174:	211c      	movs	r1, #28
    2176:	2301      	movs	r3, #1
    2178:	041b      	lsls	r3, r3, #16
    217a:	4298      	cmp	r0, r3
    217c:	d301      	bcc.n	2182 <__clzsi2+0xe>
    217e:	0c00      	lsrs	r0, r0, #16
    2180:	3910      	subs	r1, #16
    2182:	0a1b      	lsrs	r3, r3, #8
    2184:	4298      	cmp	r0, r3
    2186:	d301      	bcc.n	218c <__clzsi2+0x18>
    2188:	0a00      	lsrs	r0, r0, #8
    218a:	3908      	subs	r1, #8
    218c:	091b      	lsrs	r3, r3, #4
    218e:	4298      	cmp	r0, r3
    2190:	d301      	bcc.n	2196 <__clzsi2+0x22>
    2192:	0900      	lsrs	r0, r0, #4
    2194:	3904      	subs	r1, #4
    2196:	a202      	add	r2, pc, #8	; (adr r2, 21a0 <__clzsi2+0x2c>)
    2198:	5c10      	ldrb	r0, [r2, r0]
    219a:	1840      	adds	r0, r0, r1
    219c:	4770      	bx	lr
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	02020304 	.word	0x02020304
    21a4:	01010101 	.word	0x01010101
	...

000021b0 <__libc_init_array>:
    21b0:	4b0e      	ldr	r3, [pc, #56]	; (21ec <__libc_init_array+0x3c>)
    21b2:	b570      	push	{r4, r5, r6, lr}
    21b4:	2500      	movs	r5, #0
    21b6:	1c1e      	adds	r6, r3, #0
    21b8:	4c0d      	ldr	r4, [pc, #52]	; (21f0 <__libc_init_array+0x40>)
    21ba:	1ae4      	subs	r4, r4, r3
    21bc:	10a4      	asrs	r4, r4, #2
    21be:	42a5      	cmp	r5, r4
    21c0:	d004      	beq.n	21cc <__libc_init_array+0x1c>
    21c2:	00ab      	lsls	r3, r5, #2
    21c4:	58f3      	ldr	r3, [r6, r3]
    21c6:	4798      	blx	r3
    21c8:	3501      	adds	r5, #1
    21ca:	e7f8      	b.n	21be <__libc_init_array+0xe>
    21cc:	f000 f86c 	bl	22a8 <_init>
    21d0:	4b08      	ldr	r3, [pc, #32]	; (21f4 <__libc_init_array+0x44>)
    21d2:	2500      	movs	r5, #0
    21d4:	1c1e      	adds	r6, r3, #0
    21d6:	4c08      	ldr	r4, [pc, #32]	; (21f8 <__libc_init_array+0x48>)
    21d8:	1ae4      	subs	r4, r4, r3
    21da:	10a4      	asrs	r4, r4, #2
    21dc:	42a5      	cmp	r5, r4
    21de:	d004      	beq.n	21ea <__libc_init_array+0x3a>
    21e0:	00ab      	lsls	r3, r5, #2
    21e2:	58f3      	ldr	r3, [r6, r3]
    21e4:	4798      	blx	r3
    21e6:	3501      	adds	r5, #1
    21e8:	e7f8      	b.n	21dc <__libc_init_array+0x2c>
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    21ec:	000022b4 	.word	0x000022b4
    21f0:	000022b4 	.word	0x000022b4
    21f4:	000022b4 	.word	0x000022b4
    21f8:	000022b8 	.word	0x000022b8

000021fc <memcpy>:
    21fc:	2300      	movs	r3, #0
    21fe:	b510      	push	{r4, lr}
    2200:	4293      	cmp	r3, r2
    2202:	d003      	beq.n	220c <memcpy+0x10>
    2204:	5ccc      	ldrb	r4, [r1, r3]
    2206:	54c4      	strb	r4, [r0, r3]
    2208:	3301      	adds	r3, #1
    220a:	e7f9      	b.n	2200 <memcpy+0x4>
    220c:	bd10      	pop	{r4, pc}
    220e:	0000      	movs	r0, r0
    2210:	42000000 	.word	0x42000000
    2214:	42000400 	.word	0x42000400
    2218:	42000800 	.word	0x42000800
    221c:	42000c00 	.word	0x42000c00
    2220:	42001000 	.word	0x42001000
    2224:	43000400 	.word	0x43000400

00002228 <_tcc_intflag>:
    2228:	00000001 00000002 00000004 00000008     ................
    2238:	00001000 00002000 00004000 00008000     ..... ...@......
    2248:	00010000 00020000 00040000 00080000     ................
    2258:	0b0a0908 00000d0c 00001332 0000132e     ........2.......
    2268:	0000132e 00001390 00001390 00001348     ............H...
    2278:	00001338 0000134e 0000137e 0000157c     8...N...~...|...
    2288:	0000155c 0000155c 000015f6 0000156e     \...\.......n...
    2298:	0000158a 00001560 00001598 000015da     ....`...........

000022a8 <_init>:
    22a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ae:	bc08      	pop	{r3}
    22b0:	469e      	mov	lr, r3
    22b2:	4770      	bx	lr

000022b4 <__init_array_start>:
    22b4:	000000dd 	.word	0x000000dd

000022b8 <_fini>:
    22b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22be:	bc08      	pop	{r3}
    22c0:	469e      	mov	lr, r3
    22c2:	4770      	bx	lr

000022c4 <__fini_array_start>:
    22c4:	000000b5 	.word	0x000000b5
