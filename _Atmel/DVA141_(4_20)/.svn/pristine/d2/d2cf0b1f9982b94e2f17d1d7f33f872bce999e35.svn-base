
DVA141_(4_20).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ef4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001ef4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00010010  2**0
                  CONTENTS
  3 .bss          00000150  20000010  00001f04  00010010  2**2
                  ALLOC
  4 .stack        00002000  20000160  00002054  00010010  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020cec  00000000  00000000  00010093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000032e6  00000000  00000000  00030d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005d86  00000000  00000000  00034065  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005d8  00000000  00000000  00039deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006d8  00000000  00000000  0003a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c771  00000000  00000000  0003aa9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e205  00000000  00000000  0005720c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00092d81  00000000  00000000  00065411  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000eb0  00000000  00000000  000f8194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002160 	.word	0x20002160
       4:	00001739 	.word	0x00001739
       8:	00001735 	.word	0x00001735
       c:	00001735 	.word	0x00001735
	...
      2c:	00001735 	.word	0x00001735
	...
      38:	00001735 	.word	0x00001735
      3c:	00001735 	.word	0x00001735
      40:	00001735 	.word	0x00001735
      44:	00001735 	.word	0x00001735
      48:	00001735 	.word	0x00001735
      4c:	000002ed 	.word	0x000002ed
      50:	00001735 	.word	0x00001735
      54:	00001735 	.word	0x00001735
      58:	00001735 	.word	0x00001735
      5c:	00001735 	.word	0x00001735
      60:	00000dfd 	.word	0x00000dfd
      64:	00000e0d 	.word	0x00000e0d
      68:	00000e1d 	.word	0x00000e1d
      6c:	00000e2d 	.word	0x00000e2d
      70:	00000e3d 	.word	0x00000e3d
      74:	00000e4d 	.word	0x00000e4d
      78:	0000071d 	.word	0x0000071d
      7c:	0000072d 	.word	0x0000072d
      80:	0000073d 	.word	0x0000073d
      84:	000007a9 	.word	0x000007a9
      88:	000007b9 	.word	0x000007b9
	...
      94:	000007c9 	.word	0x000007c9
      98:	00001735 	.word	0x00001735
      9c:	00001735 	.word	0x00001735
      a0:	00001735 	.word	0x00001735
      a4:	00001735 	.word	0x00001735
      a8:	00001735 	.word	0x00001735
      ac:	00001735 	.word	0x00001735
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00001ef4 	.word	0x00001ef4

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00001ef4 	.word	0x00001ef4
     108:	20000014 	.word	0x20000014
     10c:	00001ef4 	.word	0x00001ef4
     110:	00000000 	.word	0x00000000

00000114 <AD5421_SetRegisterValue>:
#include "ad5421.h"
#include "main.h"


void AD5421_SetRegisterValue(uint8_t regAddress, uint16_t regValue)
{
     114:	b500      	push	{lr}
     116:	b083      	sub	sp, #12
	//volatile unsigned char statuscode;
	uint8_t data[] = {0x00, 0x00, 0x00};
	
	data[0] = regAddress;
     118:	ab01      	add	r3, sp, #4
     11a:	7018      	strb	r0, [r3, #0]
	data[1] = ((regValue & 0xFF00) >> 8);
     11c:	0a0a      	lsrs	r2, r1, #8
     11e:	705a      	strb	r2, [r3, #1]
	data[2] = ((regValue & 0x00FF) >> 0);
     120:	7099      	strb	r1, [r3, #2]
	
	SPI_Write_AD5421(data);
     122:	1c18      	adds	r0, r3, #0
     124:	4b01      	ldr	r3, [pc, #4]	; (12c <AD5421_SetRegisterValue+0x18>)
     126:	4798      	blx	r3
}
     128:	b003      	add	sp, #12
     12a:	bd00      	pop	{pc}
     12c:	000019c1 	.word	0x000019c1

00000130 <AD5421_GetRegisterValue>:

uint16_t AD5421_GetRegisterValue(uint8_t regAddress)
{
     130:	b510      	push	{r4, lr}
     132:	b082      	sub	sp, #8
	uint8_t data[] = {0x00, 0x00, 0x00};
     134:	ac01      	add	r4, sp, #4
     136:	2300      	movs	r3, #0
     138:	7063      	strb	r3, [r4, #1]
     13a:	70a3      	strb	r3, [r4, #2]
	uint16_t receivedData = 0x00;
	//volatile unsigned char statuscode;
	
	data[0] = regAddress | AD5421_READ;
     13c:	3b80      	subs	r3, #128	; 0x80
     13e:	4318      	orrs	r0, r3
     140:	7020      	strb	r0, [r4, #0]
	
	SPI_Write_AD5421(data);
     142:	1c20      	adds	r0, r4, #0
     144:	4b07      	ldr	r3, [pc, #28]	; (164 <AD5421_GetRegisterValue+0x34>)
     146:	4798      	blx	r3
	
	delay_us(30);
     148:	201e      	movs	r0, #30
     14a:	4b07      	ldr	r3, [pc, #28]	; (168 <AD5421_GetRegisterValue+0x38>)
     14c:	4798      	blx	r3
	
	SPI_Read_AD5421(data);
     14e:	1c20      	adds	r0, r4, #0
     150:	4b06      	ldr	r3, [pc, #24]	; (16c <AD5421_GetRegisterValue+0x3c>)
     152:	4798      	blx	r3
	
	receivedData += (data[1] << 8);
     154:	7860      	ldrb	r0, [r4, #1]
     156:	0200      	lsls	r0, r0, #8
	receivedData += (data[2] << 0);
     158:	78a3      	ldrb	r3, [r4, #2]
     15a:	1818      	adds	r0, r3, r0
     15c:	b280      	uxth	r0, r0

	return receivedData;
}
     15e:	b002      	add	sp, #8
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	000019c1 	.word	0x000019c1
     168:	00000e99 	.word	0x00000e99
     16c:	000019e5 	.word	0x000019e5

00000170 <AD5421_Init>:

uint16_t AD5421_Init(void)
{
     170:	b508      	push	{r3, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     172:	2280      	movs	r2, #128	; 0x80
     174:	02d2      	lsls	r2, r2, #11
     176:	4b08      	ldr	r3, [pc, #32]	; (198 <AD5421_Init+0x28>)
     178:	619a      	str	r2, [r3, #24]
	uint16_t status = 1;
	
	port_pin_set_output_level(PIN_PA18, 1);

	AD5421_SetRegisterValue(AD5421_REG_CTRL,
     17a:	2002      	movs	r0, #2
     17c:	218c      	movs	r1, #140	; 0x8c
     17e:	0149      	lsls	r1, r1, #5
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <AD5421_Init+0x2c>)
     182:	4798      	blx	r3
	//AD5421_CTRL_MIN_CURRENT	|
	AD5421_CTRL_ADC_SOURCE_TEMP	|
	AD5421_CTRL_ADC_ENABLE
	);
	
	if(AD5421_GetRegisterValue(AD5421_REG_CTRL) == 0x1280)
     184:	2002      	movs	r0, #2
     186:	4b06      	ldr	r3, [pc, #24]	; (1a0 <AD5421_Init+0x30>)
     188:	4798      	blx	r3
     18a:	4b06      	ldr	r3, [pc, #24]	; (1a4 <AD5421_Init+0x34>)
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
     190:	1e43      	subs	r3, r0, #1
     192:	4198      	sbcs	r0, r3
	{
		status = 0x0;
	}
	
	return (status);
     194:	b280      	uxth	r0, r0
}
     196:	bd08      	pop	{r3, pc}
     198:	40002800 	.word	0x40002800
     19c:	00000115 	.word	0x00000115
     1a0:	00000131 	.word	0x00000131
     1a4:	ffffed80 	.word	0xffffed80

000001a8 <ADXL345_GetRegisterValue>:
//
    //return registerValue;
//}

unsigned char ADXL345_GetRegisterValue(uint8_t regAddress)
{
     1a8:	b510      	push	{r4, lr}
     1aa:	b082      	sub	sp, #8
	uint8_t data[] = {0x00, 0x00};
     1ac:	ac01      	add	r4, sp, #4
     1ae:	2300      	movs	r3, #0
     1b0:	7063      	strb	r3, [r4, #1]
	uint8_t receivedData = 0x00;
	
	data[0] = ADXL345_SPI_READ | regAddress;
     1b2:	3b80      	subs	r3, #128	; 0x80
     1b4:	4318      	orrs	r0, r3
     1b6:	7020      	strb	r0, [r4, #0]
		
	SPI_Read_ADXL(data);
     1b8:	1c20      	adds	r0, r4, #0
     1ba:	4b02      	ldr	r3, [pc, #8]	; (1c4 <ADXL345_GetRegisterValue+0x1c>)
     1bc:	4798      	blx	r3
	
	receivedData = data[1];
     1be:	7860      	ldrb	r0, [r4, #1]
	
	//receivedData += (data[0] << 8);
	//receivedData += (data[1] << 0);

	return receivedData;
}
     1c0:	b002      	add	sp, #8
     1c2:	bd10      	pop	{r4, pc}
     1c4:	00001a31 	.word	0x00001a31

000001c8 <ADXL345_SetRegisterValue>:
    //SPI_Write_ADXL(dataBuffer);
    //
//}

void ADXL345_SetRegisterValue(uint8_t regAddress, uint8_t regValue)
{
     1c8:	b500      	push	{lr}
     1ca:	b083      	sub	sp, #12
	
	uint8_t data[] = {0x00, 0x00};
	
	data[0] = regAddress;
     1cc:	ab01      	add	r3, sp, #4
     1ce:	7018      	strb	r0, [r3, #0]
	data[1] = regValue;
     1d0:	7059      	strb	r1, [r3, #1]
	
	//data[1] = ((regValue & 0xFF00) >> 8);
	//data[2] = ((regValue & 0x00FF) >> 0);
	
	SPI_Write_ADXL(data);
     1d2:	1c18      	adds	r0, r3, #0
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <ADXL345_SetRegisterValue+0x14>)
     1d6:	4798      	blx	r3
}
     1d8:	b003      	add	sp, #12
     1da:	bd00      	pop	{pc}
     1dc:	00001a0d 	.word	0x00001a0d

000001e0 <ADXL345_SetPowerMode>:
 *				 0x1 - measure mode.
 *
 * @return None.
*******************************************************************************/
void ADXL345_SetPowerMode(unsigned char pwrMode)
{
     1e0:	b510      	push	{r4, lr}
     1e2:	1c04      	adds	r4, r0, #0
    unsigned char oldPowerCtl = 0;
    unsigned char newPowerCtl = 0;
    
    oldPowerCtl = ADXL345_GetRegisterValue(ADXL345_POWER_CTL);
     1e4:	202d      	movs	r0, #45	; 0x2d
     1e6:	4b06      	ldr	r3, [pc, #24]	; (200 <ADXL345_SetPowerMode+0x20>)
     1e8:	4798      	blx	r3
    newPowerCtl = oldPowerCtl & ~ADXL345_PCTL_MEASURE;
     1ea:	2308      	movs	r3, #8
     1ec:	1c01      	adds	r1, r0, #0
     1ee:	4399      	bics	r1, r3
    newPowerCtl = newPowerCtl | (pwrMode * ADXL345_PCTL_MEASURE);
     1f0:	00e4      	lsls	r4, r4, #3
     1f2:	430c      	orrs	r4, r1
    ADXL345_SetRegisterValue(ADXL345_POWER_CTL, newPowerCtl);
     1f4:	b2e1      	uxtb	r1, r4
     1f6:	202d      	movs	r0, #45	; 0x2d
     1f8:	4b02      	ldr	r3, [pc, #8]	; (204 <ADXL345_SetPowerMode+0x24>)
     1fa:	4798      	blx	r3
}
     1fc:	bd10      	pop	{r4, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	000001a9 	.word	0x000001a9
     204:	000001c9 	.word	0x000001c9

00000208 <ADXL345_Init>:
 *                                     ADXL345 part is not present.
 *                                 0 - I2C/SPI peripheral is initialized and 
 *                                     ADXL345 part is present.
*******************************************************************************/
char ADXL345_Init(void)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	b083      	sub	sp, #12
    volatile unsigned char status = 0;
     20c:	466b      	mov	r3, sp
     20e:	1dde      	adds	r6, r3, #7
     210:	2300      	movs	r3, #0
     212:	7033      	strb	r3, [r6, #0]
     214:	2240      	movs	r2, #64	; 0x40
     216:	4b15      	ldr	r3, [pc, #84]	; (26c <ADXL345_Init+0x64>)
     218:	619a      	str	r2, [r3, #24]
	
	
	//RESETTING----------------------------------------------------------------

	//Set power to measure mode
	ADXL345_SetPowerMode(0x0);
     21a:	2000      	movs	r0, #0
     21c:	4f14      	ldr	r7, [pc, #80]	; (270 <ADXL345_Init+0x68>)
     21e:	47b8      	blx	r7
	delay_us(30);
     220:	201e      	movs	r0, #30
     222:	4c14      	ldr	r4, [pc, #80]	; (274 <ADXL345_Init+0x6c>)
     224:	47a0      	blx	r4


	//Reset Interrupt Enable
	ADXL345_SetRegisterValue(ADXL345_INT_ENABLE, 0x0);
     226:	202e      	movs	r0, #46	; 0x2e
     228:	2100      	movs	r1, #0
     22a:	4d13      	ldr	r5, [pc, #76]	; (278 <ADXL345_Init+0x70>)
     22c:	47a8      	blx	r5
	delay_us(30);
     22e:	201e      	movs	r0, #30
     230:	47a0      	blx	r4
	
	
	//SETTING------------------------------------------------------------------	
	
	//Data rate 3200 Hz
	ADXL345_SetRegisterValue(ADXL345_BW_RATE, 0xF);
     232:	202c      	movs	r0, #44	; 0x2c
     234:	210f      	movs	r1, #15
     236:	47a8      	blx	r5
	delay_us(30);
     238:	201e      	movs	r0, #30
     23a:	47a0      	blx	r4
	
	//Interrupt map - INT1
	ADXL345_SetRegisterValue(ADXL345_INT_MAP, 0x0);
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	2100      	movs	r1, #0
     240:	47a8      	blx	r5
	delay_us(30);
     242:	201e      	movs	r0, #30
     244:	47a0      	blx	r4
			
	//Interrupt pins is active low
	ADXL345_SetRegisterValue(ADXL345_DATA_FORMAT, ADXL345_INT_INVERT);
     246:	2031      	movs	r0, #49	; 0x31
     248:	2120      	movs	r1, #32
     24a:	47a8      	blx	r5
	delay_us(30);	
     24c:	201e      	movs	r0, #30
     24e:	47a0      	blx	r4
	
	//Interrupt Enable
	ADXL345_SetRegisterValue(ADXL345_INT_ENABLE, ADXL345_DATA_READY);
     250:	202e      	movs	r0, #46	; 0x2e
     252:	2180      	movs	r1, #128	; 0x80
     254:	47a8      	blx	r5
	delay_us(30);
     256:	201e      	movs	r0, #30
     258:	47a0      	blx	r4

	//ADXL345_SetRegisterValue(ADXL345_FIFO_CTL, 0xC3);
	//delay_us(30);

	//Set power to measure mode	
	ADXL345_SetPowerMode(0x1);
     25a:	2001      	movs	r0, #1
     25c:	47b8      	blx	r7
	delay_us(30);
     25e:	201e      	movs	r0, #30
     260:	47a0      	blx	r4
    //}
    //
	//selectedRange = 2; // Measurement Range: +/- 2g (reset default).
    //fullResolutionSet = 0;

    return status;
     262:	7830      	ldrb	r0, [r6, #0]
     264:	b2c0      	uxtb	r0, r0
}
     266:	b003      	add	sp, #12
     268:	bdf0      	pop	{r4, r5, r6, r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40002800 	.word	0x40002800
     270:	000001e1 	.word	0x000001e1
     274:	00000e99 	.word	0x00000e99
     278:	000001c9 	.word	0x000001c9

0000027c <ADXL345_GetX>:
 *
 * @return None.
*******************************************************************************/

float ADXL345_GetX()
{
     27c:	b538      	push	{r3, r4, r5, lr}
	short readBuffer0 = 0;
	short readBuffer1 = 0;
	short data_out = 0;
	
	readBuffer0 = ADXL345_GetRegisterValue(ADXL345_DATAX0);
     27e:	2032      	movs	r0, #50	; 0x32
     280:	4d05      	ldr	r5, [pc, #20]	; (298 <ADXL345_GetX+0x1c>)
     282:	47a8      	blx	r5
     284:	1c04      	adds	r4, r0, #0
	readBuffer1 = ADXL345_GetRegisterValue(ADXL345_DATAX1);
     286:	2033      	movs	r0, #51	; 0x33
     288:	47a8      	blx	r5
	
	data_out = (readBuffer1 << 8) + readBuffer0;
     28a:	0200      	lsls	r0, r0, #8
     28c:	1900      	adds	r0, r0, r4
	
	//return (data_out * ADXL345_SCALE_FACTOR);
	return data_out;
     28e:	b200      	sxth	r0, r0
     290:	4b02      	ldr	r3, [pc, #8]	; (29c <ADXL345_GetX+0x20>)
     292:	4798      	blx	r3
}
     294:	bd38      	pop	{r3, r4, r5, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	000001a9 	.word	0x000001a9
     29c:	00001d11 	.word	0x00001d11

000002a0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2a0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2a2:	2a00      	cmp	r2, #0
     2a4:	d10d      	bne.n	2c2 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2a6:	008b      	lsls	r3, r1, #2
     2a8:	4a07      	ldr	r2, [pc, #28]	; (2c8 <extint_register_callback+0x28>)
     2aa:	589b      	ldr	r3, [r3, r2]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d103      	bne.n	2b8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     2b0:	0089      	lsls	r1, r1, #2
     2b2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     2b4:	2300      	movs	r3, #0
     2b6:	e004      	b.n	2c2 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     2b8:	4283      	cmp	r3, r0
     2ba:	d001      	beq.n	2c0 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2bc:	231d      	movs	r3, #29
     2be:	e000      	b.n	2c2 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2c0:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2c2:	1c18      	adds	r0, r3, #0
     2c4:	4770      	bx	lr
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	2000006c 	.word	0x2000006c

000002cc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2cc:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ce:	2900      	cmp	r1, #0
     2d0:	d107      	bne.n	2e2 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2d2:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2d4:	281f      	cmp	r0, #31
     2d6:	d800      	bhi.n	2da <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2d8:	4a03      	ldr	r2, [pc, #12]	; (2e8 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2da:	2301      	movs	r3, #1
     2dc:	4083      	lsls	r3, r0
     2de:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     2e0:	2300      	movs	r3, #0
}
     2e2:	1c18      	adds	r0, r3, #0
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	40002400 	.word	0x40002400

000002ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2ec:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2ee:	2200      	movs	r2, #0
     2f0:	4b15      	ldr	r3, [pc, #84]	; (348 <EIC_Handler+0x5c>)
     2f2:	701a      	strb	r2, [r3, #0]
     2f4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2f6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2f8:	4e14      	ldr	r6, [pc, #80]	; (34c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2fa:	4c13      	ldr	r4, [pc, #76]	; (348 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2fc:	2b1f      	cmp	r3, #31
     2fe:	d919      	bls.n	334 <EIC_Handler+0x48>
     300:	e00f      	b.n	322 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     302:	2100      	movs	r1, #0
     304:	e000      	b.n	308 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     306:	4912      	ldr	r1, [pc, #72]	; (350 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     308:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     30a:	009b      	lsls	r3, r3, #2
     30c:	599b      	ldr	r3, [r3, r6]
     30e:	2b00      	cmp	r3, #0
     310:	d000      	beq.n	314 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     312:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     314:	7823      	ldrb	r3, [r4, #0]
     316:	3301      	adds	r3, #1
     318:	b2db      	uxtb	r3, r3
     31a:	7023      	strb	r3, [r4, #0]
     31c:	2b0f      	cmp	r3, #15
     31e:	d9ed      	bls.n	2fc <EIC_Handler+0x10>
     320:	e011      	b.n	346 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     322:	1c29      	adds	r1, r5, #0
     324:	4019      	ands	r1, r3
     326:	2201      	movs	r2, #1
     328:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     32a:	2100      	movs	r1, #0
     32c:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     32e:	4211      	tst	r1, r2
     330:	d1e7      	bne.n	302 <EIC_Handler+0x16>
     332:	e7ef      	b.n	314 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     334:	1c29      	adds	r1, r5, #0
     336:	4019      	ands	r1, r3
     338:	2201      	movs	r2, #1
     33a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     33c:	4904      	ldr	r1, [pc, #16]	; (350 <EIC_Handler+0x64>)
     33e:	6949      	ldr	r1, [r1, #20]
     340:	4211      	tst	r1, r2
     342:	d1e0      	bne.n	306 <EIC_Handler+0x1a>
     344:	e7e6      	b.n	314 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	20000068 	.word	0x20000068
     34c:	2000006c 	.word	0x2000006c
     350:	40002400 	.word	0x40002400

00000354 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     354:	4a06      	ldr	r2, [pc, #24]	; (370 <_extint_enable+0x1c>)
     356:	7811      	ldrb	r1, [r2, #0]
     358:	2302      	movs	r3, #2
     35a:	430b      	orrs	r3, r1
     35c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     35e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     360:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     362:	6853      	ldr	r3, [r2, #4]
     364:	4219      	tst	r1, r3
     366:	d1fc      	bne.n	362 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     368:	6853      	ldr	r3, [r2, #4]
     36a:	4218      	tst	r0, r3
     36c:	d1f9      	bne.n	362 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     36e:	4770      	bx	lr
     370:	40002400 	.word	0x40002400

00000374 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     374:	4a06      	ldr	r2, [pc, #24]	; (390 <_extint_disable+0x1c>)
     376:	7813      	ldrb	r3, [r2, #0]
     378:	2102      	movs	r1, #2
     37a:	438b      	bics	r3, r1
     37c:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     37e:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     380:	6853      	ldr	r3, [r2, #4]
     382:	4219      	tst	r1, r3
     384:	d1fc      	bne.n	380 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     386:	6853      	ldr	r3, [r2, #4]
     388:	4218      	tst	r0, r3
     38a:	d1f9      	bne.n	380 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     38c:	4770      	bx	lr
     38e:	46c0      	nop			; (mov r8, r8)
     390:	40002400 	.word	0x40002400

00000394 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     394:	b500      	push	{lr}
     396:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     398:	4a18      	ldr	r2, [pc, #96]	; (3fc <_system_extint_init+0x68>)
     39a:	6953      	ldr	r3, [r2, #20]
     39c:	2180      	movs	r1, #128	; 0x80
     39e:	0089      	lsls	r1, r1, #2
     3a0:	430b      	orrs	r3, r1
     3a2:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3a4:	a901      	add	r1, sp, #4
     3a6:	2300      	movs	r3, #0
     3a8:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3aa:	2003      	movs	r0, #3
     3ac:	4b14      	ldr	r3, [pc, #80]	; (400 <_system_extint_init+0x6c>)
     3ae:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3b0:	2003      	movs	r0, #3
     3b2:	4b14      	ldr	r3, [pc, #80]	; (404 <_system_extint_init+0x70>)
     3b4:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     3b6:	4a14      	ldr	r2, [pc, #80]	; (408 <_system_extint_init+0x74>)
     3b8:	7811      	ldrb	r1, [r2, #0]
     3ba:	2301      	movs	r3, #1
     3bc:	430b      	orrs	r3, r1
     3be:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     3c0:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     3c2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     3c4:	6853      	ldr	r3, [r2, #4]
     3c6:	4219      	tst	r1, r3
     3c8:	d1fc      	bne.n	3c4 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     3ca:	6853      	ldr	r3, [r2, #4]
     3cc:	4218      	tst	r0, r3
     3ce:	d009      	beq.n	3e4 <_system_extint_init+0x50>
     3d0:	e7f8      	b.n	3c4 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3d2:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3d4:	428b      	cmp	r3, r1
     3d6:	d1fc      	bne.n	3d2 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3d8:	2208      	movs	r2, #8
     3da:	4b0c      	ldr	r3, [pc, #48]	; (40c <_system_extint_init+0x78>)
     3dc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3de:	4b0c      	ldr	r3, [pc, #48]	; (410 <_system_extint_init+0x7c>)
     3e0:	4798      	blx	r3
     3e2:	e009      	b.n	3f8 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     3e4:	4a08      	ldr	r2, [pc, #32]	; (408 <_system_extint_init+0x74>)
     3e6:	7813      	ldrb	r3, [r2, #0]
     3e8:	2110      	movs	r1, #16
     3ea:	438b      	bics	r3, r1
     3ec:	7013      	strb	r3, [r2, #0]
     3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <_system_extint_init+0x80>)
     3f0:	1c19      	adds	r1, r3, #0
     3f2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3f4:	2200      	movs	r2, #0
     3f6:	e7ec      	b.n	3d2 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     3f8:	b003      	add	sp, #12
     3fa:	bd00      	pop	{pc}
     3fc:	40000400 	.word	0x40000400
     400:	000015c5 	.word	0x000015c5
     404:	0000155d 	.word	0x0000155d
     408:	40002400 	.word	0x40002400
     40c:	e000e100 	.word	0xe000e100
     410:	00000355 	.word	0x00000355
     414:	2000006c 	.word	0x2000006c

00000418 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     418:	2300      	movs	r3, #0
     41a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     41c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     41e:	2201      	movs	r2, #1
     420:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     422:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     424:	3201      	adds	r2, #1
     426:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     428:	7243      	strb	r3, [r0, #9]
}
     42a:	4770      	bx	lr

0000042c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	b083      	sub	sp, #12
     430:	1c05      	adds	r5, r0, #0
     432:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     434:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <extint_chan_set_config+0x7c>)
     436:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     438:	a901      	add	r1, sp, #4
     43a:	2300      	movs	r3, #0
     43c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     43e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     440:	7923      	ldrb	r3, [r4, #4]
     442:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     444:	7a23      	ldrb	r3, [r4, #8]
     446:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     448:	7820      	ldrb	r0, [r4, #0]
     44a:	4b18      	ldr	r3, [pc, #96]	; (4ac <extint_chan_set_config+0x80>)
     44c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     44e:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     450:	2d1f      	cmp	r5, #31
     452:	d800      	bhi.n	456 <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     454:	4e16      	ldr	r6, [pc, #88]	; (4b0 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     456:	2207      	movs	r2, #7
     458:	402a      	ands	r2, r5
     45a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     45c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     45e:	7aa3      	ldrb	r3, [r4, #10]
     460:	2b00      	cmp	r3, #0
     462:	d001      	beq.n	468 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
     464:	2308      	movs	r3, #8
     466:	4318      	orrs	r0, r3
     468:	08eb      	lsrs	r3, r5, #3
     46a:	009b      	lsls	r3, r3, #2
     46c:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     46e:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     470:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     472:	270f      	movs	r7, #15
     474:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     476:	43b9      	bics	r1, r7
     478:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47a:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47c:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB || SAMC20)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     47e:	7a63      	ldrb	r3, [r4, #9]
     480:	2b00      	cmp	r3, #0
     482:	d006      	beq.n	492 <extint_chan_set_config+0x66>
		EIC_module->ASYNCH.reg |= (1UL << channel);
     484:	69b3      	ldr	r3, [r6, #24]
     486:	2201      	movs	r2, #1
     488:	40aa      	lsls	r2, r5
     48a:	1c15      	adds	r5, r2, #0
     48c:	431d      	orrs	r5, r3
     48e:	61b5      	str	r5, [r6, #24]
     490:	e006      	b.n	4a0 <extint_chan_set_config+0x74>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     492:	69b3      	ldr	r3, [r6, #24]
     494:	041b      	lsls	r3, r3, #16
     496:	0c1b      	lsrs	r3, r3, #16
     498:	2201      	movs	r2, #1
     49a:	40aa      	lsls	r2, r5
     49c:	4393      	bics	r3, r2
     49e:	61b3      	str	r3, [r6, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     4a0:	4b04      	ldr	r3, [pc, #16]	; (4b4 <extint_chan_set_config+0x88>)
     4a2:	4798      	blx	r3
}
     4a4:	b003      	add	sp, #12
     4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a8:	00000375 	.word	0x00000375
     4ac:	000016c1 	.word	0x000016c1
     4b0:	40002400 	.word	0x40002400
     4b4:	00000355 	.word	0x00000355

000004b8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4b8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4ba:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4bc:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4be:	4281      	cmp	r1, r0
     4c0:	d30c      	bcc.n	4dc <_sercom_get_sync_baud_val+0x24>
     4c2:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4c4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4c6:	3301      	adds	r3, #1
     4c8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4ca:	4288      	cmp	r0, r1
     4cc:	d9fa      	bls.n	4c4 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     4ce:	3b01      	subs	r3, #1
     4d0:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d2:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4d4:	2bff      	cmp	r3, #255	; 0xff
     4d6:	d801      	bhi.n	4dc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     4d8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     4da:	2400      	movs	r4, #0
	}
}
     4dc:	1c20      	adds	r0, r4, #0
     4de:	bd10      	pop	{r4, pc}

000004e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4e0:	b510      	push	{r4, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4e6:	4b0e      	ldr	r3, [pc, #56]	; (520 <sercom_set_gclk_generator+0x40>)
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d001      	beq.n	4f2 <sercom_set_gclk_generator+0x12>
     4ee:	2900      	cmp	r1, #0
     4f0:	d00d      	beq.n	50e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     4f2:	a901      	add	r1, sp, #4
     4f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4f6:	2011      	movs	r0, #17
     4f8:	4b0a      	ldr	r3, [pc, #40]	; (524 <sercom_set_gclk_generator+0x44>)
     4fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4fc:	2011      	movs	r0, #17
     4fe:	4b0a      	ldr	r3, [pc, #40]	; (528 <sercom_set_gclk_generator+0x48>)
     500:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     502:	4b07      	ldr	r3, [pc, #28]	; (520 <sercom_set_gclk_generator+0x40>)
     504:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     506:	2201      	movs	r2, #1
     508:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     50a:	2000      	movs	r0, #0
     50c:	e006      	b.n	51c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     50e:	4b04      	ldr	r3, [pc, #16]	; (520 <sercom_set_gclk_generator+0x40>)
     510:	785b      	ldrb	r3, [r3, #1]
     512:	4283      	cmp	r3, r0
     514:	d001      	beq.n	51a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     516:	201d      	movs	r0, #29
     518:	e000      	b.n	51c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     51a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
     520:	2000002c 	.word	0x2000002c
     524:	000015c5 	.word	0x000015c5
     528:	0000155d 	.word	0x0000155d

0000052c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     52c:	4b40      	ldr	r3, [pc, #256]	; (630 <_sercom_get_default_pad+0x104>)
     52e:	4298      	cmp	r0, r3
     530:	d034      	beq.n	59c <_sercom_get_default_pad+0x70>
     532:	d807      	bhi.n	544 <_sercom_get_default_pad+0x18>
     534:	2384      	movs	r3, #132	; 0x84
     536:	05db      	lsls	r3, r3, #23
     538:	4298      	cmp	r0, r3
     53a:	d00d      	beq.n	558 <_sercom_get_default_pad+0x2c>
     53c:	4b3d      	ldr	r3, [pc, #244]	; (634 <_sercom_get_default_pad+0x108>)
     53e:	4298      	cmp	r0, r3
     540:	d01b      	beq.n	57a <_sercom_get_default_pad+0x4e>
     542:	e067      	b.n	614 <_sercom_get_default_pad+0xe8>
     544:	4b3c      	ldr	r3, [pc, #240]	; (638 <_sercom_get_default_pad+0x10c>)
     546:	4298      	cmp	r0, r3
     548:	d04a      	beq.n	5e0 <_sercom_get_default_pad+0xb4>
     54a:	4b3c      	ldr	r3, [pc, #240]	; (63c <_sercom_get_default_pad+0x110>)
     54c:	4298      	cmp	r0, r3
     54e:	d050      	beq.n	5f2 <_sercom_get_default_pad+0xc6>
     550:	4b3b      	ldr	r3, [pc, #236]	; (640 <_sercom_get_default_pad+0x114>)
     552:	4298      	cmp	r0, r3
     554:	d15e      	bne.n	614 <_sercom_get_default_pad+0xe8>
     556:	e032      	b.n	5be <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     558:	2901      	cmp	r1, #1
     55a:	d006      	beq.n	56a <_sercom_get_default_pad+0x3e>
     55c:	2900      	cmp	r1, #0
     55e:	d05b      	beq.n	618 <_sercom_get_default_pad+0xec>
     560:	2902      	cmp	r1, #2
     562:	d006      	beq.n	572 <_sercom_get_default_pad+0x46>
     564:	2903      	cmp	r1, #3
     566:	d006      	beq.n	576 <_sercom_get_default_pad+0x4a>
     568:	e001      	b.n	56e <_sercom_get_default_pad+0x42>
     56a:	4836      	ldr	r0, [pc, #216]	; (644 <_sercom_get_default_pad+0x118>)
     56c:	e05f      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     56e:	2000      	movs	r0, #0
     570:	e05d      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     572:	4835      	ldr	r0, [pc, #212]	; (648 <_sercom_get_default_pad+0x11c>)
     574:	e05b      	b.n	62e <_sercom_get_default_pad+0x102>
     576:	4835      	ldr	r0, [pc, #212]	; (64c <_sercom_get_default_pad+0x120>)
     578:	e059      	b.n	62e <_sercom_get_default_pad+0x102>
     57a:	2901      	cmp	r1, #1
     57c:	d006      	beq.n	58c <_sercom_get_default_pad+0x60>
     57e:	2900      	cmp	r1, #0
     580:	d04c      	beq.n	61c <_sercom_get_default_pad+0xf0>
     582:	2902      	cmp	r1, #2
     584:	d006      	beq.n	594 <_sercom_get_default_pad+0x68>
     586:	2903      	cmp	r1, #3
     588:	d006      	beq.n	598 <_sercom_get_default_pad+0x6c>
     58a:	e001      	b.n	590 <_sercom_get_default_pad+0x64>
     58c:	4830      	ldr	r0, [pc, #192]	; (650 <_sercom_get_default_pad+0x124>)
     58e:	e04e      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     590:	2000      	movs	r0, #0
     592:	e04c      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     594:	482f      	ldr	r0, [pc, #188]	; (654 <_sercom_get_default_pad+0x128>)
     596:	e04a      	b.n	62e <_sercom_get_default_pad+0x102>
     598:	482f      	ldr	r0, [pc, #188]	; (658 <_sercom_get_default_pad+0x12c>)
     59a:	e048      	b.n	62e <_sercom_get_default_pad+0x102>
     59c:	2901      	cmp	r1, #1
     59e:	d006      	beq.n	5ae <_sercom_get_default_pad+0x82>
     5a0:	2900      	cmp	r1, #0
     5a2:	d03d      	beq.n	620 <_sercom_get_default_pad+0xf4>
     5a4:	2902      	cmp	r1, #2
     5a6:	d006      	beq.n	5b6 <_sercom_get_default_pad+0x8a>
     5a8:	2903      	cmp	r1, #3
     5aa:	d006      	beq.n	5ba <_sercom_get_default_pad+0x8e>
     5ac:	e001      	b.n	5b2 <_sercom_get_default_pad+0x86>
     5ae:	482b      	ldr	r0, [pc, #172]	; (65c <_sercom_get_default_pad+0x130>)
     5b0:	e03d      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     5b2:	2000      	movs	r0, #0
     5b4:	e03b      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b6:	482a      	ldr	r0, [pc, #168]	; (660 <_sercom_get_default_pad+0x134>)
     5b8:	e039      	b.n	62e <_sercom_get_default_pad+0x102>
     5ba:	482a      	ldr	r0, [pc, #168]	; (664 <_sercom_get_default_pad+0x138>)
     5bc:	e037      	b.n	62e <_sercom_get_default_pad+0x102>
     5be:	2901      	cmp	r1, #1
     5c0:	d006      	beq.n	5d0 <_sercom_get_default_pad+0xa4>
     5c2:	2900      	cmp	r1, #0
     5c4:	d02e      	beq.n	624 <_sercom_get_default_pad+0xf8>
     5c6:	2902      	cmp	r1, #2
     5c8:	d006      	beq.n	5d8 <_sercom_get_default_pad+0xac>
     5ca:	2903      	cmp	r1, #3
     5cc:	d006      	beq.n	5dc <_sercom_get_default_pad+0xb0>
     5ce:	e001      	b.n	5d4 <_sercom_get_default_pad+0xa8>
     5d0:	4825      	ldr	r0, [pc, #148]	; (668 <_sercom_get_default_pad+0x13c>)
     5d2:	e02c      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     5d4:	2000      	movs	r0, #0
     5d6:	e02a      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d8:	4824      	ldr	r0, [pc, #144]	; (66c <_sercom_get_default_pad+0x140>)
     5da:	e028      	b.n	62e <_sercom_get_default_pad+0x102>
     5dc:	4824      	ldr	r0, [pc, #144]	; (670 <_sercom_get_default_pad+0x144>)
     5de:	e026      	b.n	62e <_sercom_get_default_pad+0x102>
     5e0:	2902      	cmp	r1, #2
     5e2:	d002      	beq.n	5ea <_sercom_get_default_pad+0xbe>
     5e4:	2903      	cmp	r1, #3
     5e6:	d002      	beq.n	5ee <_sercom_get_default_pad+0xc2>
     5e8:	e01e      	b.n	628 <_sercom_get_default_pad+0xfc>
     5ea:	4822      	ldr	r0, [pc, #136]	; (674 <_sercom_get_default_pad+0x148>)
     5ec:	e01f      	b.n	62e <_sercom_get_default_pad+0x102>
     5ee:	4822      	ldr	r0, [pc, #136]	; (678 <_sercom_get_default_pad+0x14c>)
     5f0:	e01d      	b.n	62e <_sercom_get_default_pad+0x102>
     5f2:	2901      	cmp	r1, #1
     5f4:	d006      	beq.n	604 <_sercom_get_default_pad+0xd8>
     5f6:	2900      	cmp	r1, #0
     5f8:	d018      	beq.n	62c <_sercom_get_default_pad+0x100>
     5fa:	2902      	cmp	r1, #2
     5fc:	d006      	beq.n	60c <_sercom_get_default_pad+0xe0>
     5fe:	2903      	cmp	r1, #3
     600:	d006      	beq.n	610 <_sercom_get_default_pad+0xe4>
     602:	e001      	b.n	608 <_sercom_get_default_pad+0xdc>
     604:	481d      	ldr	r0, [pc, #116]	; (67c <_sercom_get_default_pad+0x150>)
     606:	e012      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     608:	2000      	movs	r0, #0
     60a:	e010      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60c:	481c      	ldr	r0, [pc, #112]	; (680 <_sercom_get_default_pad+0x154>)
     60e:	e00e      	b.n	62e <_sercom_get_default_pad+0x102>
     610:	481c      	ldr	r0, [pc, #112]	; (684 <_sercom_get_default_pad+0x158>)
     612:	e00c      	b.n	62e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     614:	2000      	movs	r0, #0
     616:	e00a      	b.n	62e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     618:	481b      	ldr	r0, [pc, #108]	; (688 <_sercom_get_default_pad+0x15c>)
     61a:	e008      	b.n	62e <_sercom_get_default_pad+0x102>
     61c:	2003      	movs	r0, #3
     61e:	e006      	b.n	62e <_sercom_get_default_pad+0x102>
     620:	481a      	ldr	r0, [pc, #104]	; (68c <_sercom_get_default_pad+0x160>)
     622:	e004      	b.n	62e <_sercom_get_default_pad+0x102>
     624:	481a      	ldr	r0, [pc, #104]	; (690 <_sercom_get_default_pad+0x164>)
     626:	e002      	b.n	62e <_sercom_get_default_pad+0x102>
     628:	2000      	movs	r0, #0
     62a:	e000      	b.n	62e <_sercom_get_default_pad+0x102>
     62c:	4819      	ldr	r0, [pc, #100]	; (694 <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
     62e:	4770      	bx	lr
     630:	42000800 	.word	0x42000800
     634:	42000400 	.word	0x42000400
     638:	42001000 	.word	0x42001000
     63c:	43000400 	.word	0x43000400
     640:	42000c00 	.word	0x42000c00
     644:	00050003 	.word	0x00050003
     648:	00060003 	.word	0x00060003
     64c:	00070003 	.word	0x00070003
     650:	00010003 	.word	0x00010003
     654:	001e0003 	.word	0x001e0003
     658:	001f0003 	.word	0x001f0003
     65c:	00090003 	.word	0x00090003
     660:	000a0003 	.word	0x000a0003
     664:	000b0003 	.word	0x000b0003
     668:	00110003 	.word	0x00110003
     66c:	00120003 	.word	0x00120003
     670:	00130003 	.word	0x00130003
     674:	000e0003 	.word	0x000e0003
     678:	000f0003 	.word	0x000f0003
     67c:	00170003 	.word	0x00170003
     680:	00180003 	.word	0x00180003
     684:	00190003 	.word	0x00190003
     688:	00040003 	.word	0x00040003
     68c:	00080003 	.word	0x00080003
     690:	00100003 	.word	0x00100003
     694:	00160003 	.word	0x00160003

00000698 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     698:	b530      	push	{r4, r5, lr}
     69a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     69c:	4b0c      	ldr	r3, [pc, #48]	; (6d0 <_sercom_get_sercom_inst_index+0x38>)
     69e:	466a      	mov	r2, sp
     6a0:	cb32      	ldmia	r3!, {r1, r4, r5}
     6a2:	c232      	stmia	r2!, {r1, r4, r5}
     6a4:	cb32      	ldmia	r3!, {r1, r4, r5}
     6a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6a8:	9b00      	ldr	r3, [sp, #0]
     6aa:	4283      	cmp	r3, r0
     6ac:	d006      	beq.n	6bc <_sercom_get_sercom_inst_index+0x24>
     6ae:	2301      	movs	r3, #1
     6b0:	009a      	lsls	r2, r3, #2
     6b2:	4669      	mov	r1, sp
     6b4:	5852      	ldr	r2, [r2, r1]
     6b6:	4282      	cmp	r2, r0
     6b8:	d103      	bne.n	6c2 <_sercom_get_sercom_inst_index+0x2a>
     6ba:	e000      	b.n	6be <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6bc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6be:	b2d8      	uxtb	r0, r3
     6c0:	e003      	b.n	6ca <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6c2:	3301      	adds	r3, #1
     6c4:	2b06      	cmp	r3, #6
     6c6:	d1f3      	bne.n	6b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6c8:	2000      	movs	r0, #0
}
     6ca:	b007      	add	sp, #28
     6cc:	bd30      	pop	{r4, r5, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00001e3c 	.word	0x00001e3c

000006d4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	4647      	mov	r7, r8
     6d8:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6da:	0080      	lsls	r0, r0, #2
     6dc:	4b0d      	ldr	r3, [pc, #52]	; (714 <_tcc_interrupt_handler+0x40>)
     6de:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     6e0:	683b      	ldr	r3, [r7, #0]
     6e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     6e6:	401e      	ands	r6, r3
     6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6ea:	401e      	ands	r6, r3
     6ec:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     6ee:	4b0a      	ldr	r3, [pc, #40]	; (718 <_tcc_interrupt_handler+0x44>)
     6f0:	4698      	mov	r8, r3
     6f2:	4643      	mov	r3, r8
     6f4:	58e5      	ldr	r5, [r4, r3]
     6f6:	422e      	tst	r6, r5
     6f8:	d005      	beq.n	706 <_tcc_interrupt_handler+0x32>
     6fa:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     6fc:	685b      	ldr	r3, [r3, #4]
     6fe:	1c38      	adds	r0, r7, #0
     700:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     702:	683b      	ldr	r3, [r7, #0]
     704:	62dd      	str	r5, [r3, #44]	; 0x2c
     706:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     708:	2c30      	cmp	r4, #48	; 0x30
     70a:	d1f2      	bne.n	6f2 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     70c:	bc04      	pop	{r2}
     70e:	4690      	mov	r8, r2
     710:	bdf0      	pop	{r4, r5, r6, r7, pc}
     712:	46c0      	nop			; (mov r8, r8)
     714:	200000ac 	.word	0x200000ac
     718:	00001e54 	.word	0x00001e54

0000071c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     71c:	b508      	push	{r3, lr}
     71e:	2000      	movs	r0, #0
     720:	4b01      	ldr	r3, [pc, #4]	; (728 <TCC0_Handler+0xc>)
     722:	4798      	blx	r3
     724:	bd08      	pop	{r3, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	000006d5 	.word	0x000006d5

0000072c <TCC1_Handler>:
     72c:	b508      	push	{r3, lr}
     72e:	2001      	movs	r0, #1
     730:	4b01      	ldr	r3, [pc, #4]	; (738 <TCC1_Handler+0xc>)
     732:	4798      	blx	r3
     734:	bd08      	pop	{r3, pc}
     736:	46c0      	nop			; (mov r8, r8)
     738:	000006d5 	.word	0x000006d5

0000073c <TCC2_Handler>:
     73c:	b508      	push	{r3, lr}
     73e:	2002      	movs	r0, #2
     740:	4b01      	ldr	r3, [pc, #4]	; (748 <TCC2_Handler+0xc>)
     742:	4798      	blx	r3
     744:	bd08      	pop	{r3, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	000006d5 	.word	0x000006d5

0000074c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     74c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     74e:	0080      	lsls	r0, r0, #2
     750:	4b14      	ldr	r3, [pc, #80]	; (7a4 <_tc_interrupt_handler+0x58>)
     752:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     754:	682b      	ldr	r3, [r5, #0]
     756:	7a9c      	ldrb	r4, [r3, #10]
     758:	7e2b      	ldrb	r3, [r5, #24]
     75a:	401c      	ands	r4, r3
     75c:	7e6b      	ldrb	r3, [r5, #25]
     75e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     760:	07e3      	lsls	r3, r4, #31
     762:	d505      	bpl.n	770 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     764:	1c28      	adds	r0, r5, #0
     766:	68ab      	ldr	r3, [r5, #8]
     768:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     76a:	2301      	movs	r3, #1
     76c:	682a      	ldr	r2, [r5, #0]
     76e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     770:	07a3      	lsls	r3, r4, #30
     772:	d505      	bpl.n	780 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     774:	1c28      	adds	r0, r5, #0
     776:	68eb      	ldr	r3, [r5, #12]
     778:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     77a:	2302      	movs	r3, #2
     77c:	682a      	ldr	r2, [r5, #0]
     77e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     780:	06e3      	lsls	r3, r4, #27
     782:	d505      	bpl.n	790 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     784:	1c28      	adds	r0, r5, #0
     786:	692b      	ldr	r3, [r5, #16]
     788:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     78a:	2310      	movs	r3, #16
     78c:	682a      	ldr	r2, [r5, #0]
     78e:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     790:	06a3      	lsls	r3, r4, #26
     792:	d505      	bpl.n	7a0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     794:	1c28      	adds	r0, r5, #0
     796:	696b      	ldr	r3, [r5, #20]
     798:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     79a:	682b      	ldr	r3, [r5, #0]
     79c:	2220      	movs	r2, #32
     79e:	729a      	strb	r2, [r3, #10]
	}
}
     7a0:	bd38      	pop	{r3, r4, r5, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	200000b8 	.word	0x200000b8

000007a8 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
     7a8:	b508      	push	{r3, lr}
     7aa:	2000      	movs	r0, #0
     7ac:	4b01      	ldr	r3, [pc, #4]	; (7b4 <TC0_Handler+0xc>)
     7ae:	4798      	blx	r3
     7b0:	bd08      	pop	{r3, pc}
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	0000074d 	.word	0x0000074d

000007b8 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
     7b8:	b508      	push	{r3, lr}
     7ba:	2001      	movs	r0, #1
     7bc:	4b01      	ldr	r3, [pc, #4]	; (7c4 <TC1_Handler+0xc>)
     7be:	4798      	blx	r3
     7c0:	bd08      	pop	{r3, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	0000074d 	.word	0x0000074d

000007c8 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
     7c8:	b508      	push	{r3, lr}
     7ca:	2002      	movs	r0, #2
     7cc:	4b01      	ldr	r3, [pc, #4]	; (7d4 <TC4_Handler+0xc>)
     7ce:	4798      	blx	r3
     7d0:	bd08      	pop	{r3, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	0000074d 	.word	0x0000074d

000007d8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7da:	4647      	mov	r7, r8
     7dc:	b480      	push	{r7}
     7de:	b088      	sub	sp, #32
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7e0:	6001      	str	r1, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     7e2:	680c      	ldr	r4, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     7e4:	231c      	movs	r3, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     7e6:	07a4      	lsls	r4, r4, #30
     7e8:	d500      	bpl.n	7ec <spi_init+0x14>
     7ea:	e0d0      	b.n	98e <spi_init+0x1b6>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     7ec:	680c      	ldr	r4, [r1, #0]
		return STATUS_BUSY;
     7ee:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     7f0:	07e4      	lsls	r4, r4, #31
     7f2:	d500      	bpl.n	7f6 <spi_init+0x1e>
     7f4:	e0cb      	b.n	98e <spi_init+0x1b6>
     7f6:	1c16      	adds	r6, r2, #0
     7f8:	4688      	mov	r8, r1
     7fa:	1c05      	adds	r5, r0, #0
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7fc:	1c08      	adds	r0, r1, #0
     7fe:	4b66      	ldr	r3, [pc, #408]	; (998 <spi_init+0x1c0>)
     800:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
     802:	2805      	cmp	r0, #5
     804:	d100      	bne.n	808 <spi_init+0x30>
     806:	e0b5      	b.n	974 <spi_init+0x19c>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     808:	1c07      	adds	r7, r0, #0
     80a:	3712      	adds	r7, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     80c:	4963      	ldr	r1, [pc, #396]	; (99c <spi_init+0x1c4>)
     80e:	69cb      	ldr	r3, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     810:	2201      	movs	r2, #1
     812:	4082      	lsls	r2, r0
     814:	1c10      	adds	r0, r2, #0
     816:	4318      	orrs	r0, r3
     818:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     81a:	a907      	add	r1, sp, #28
     81c:	2424      	movs	r4, #36	; 0x24
     81e:	5d33      	ldrb	r3, [r6, r4]
     820:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     822:	b2ff      	uxtb	r7, r7
     824:	1c38      	adds	r0, r7, #0
     826:	4b5e      	ldr	r3, [pc, #376]	; (9a0 <spi_init+0x1c8>)
     828:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     82a:	1c38      	adds	r0, r7, #0
     82c:	4b5d      	ldr	r3, [pc, #372]	; (9a4 <spi_init+0x1cc>)
     82e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     830:	5d30      	ldrb	r0, [r6, r4]
     832:	2100      	movs	r1, #0
     834:	4b5c      	ldr	r3, [pc, #368]	; (9a8 <spi_init+0x1d0>)
     836:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     838:	7833      	ldrb	r3, [r6, #0]
     83a:	2b01      	cmp	r3, #1
     83c:	d000      	beq.n	840 <spi_init+0x68>
     83e:	e0a0      	b.n	982 <spi_init+0x1aa>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     840:	4643      	mov	r3, r8
     842:	681a      	ldr	r2, [r3, #0]
     844:	230c      	movs	r3, #12
     846:	4313      	orrs	r3, r2
     848:	4642      	mov	r2, r8
     84a:	6013      	str	r3, [r2, #0]
     84c:	e099      	b.n	982 <spi_init+0x1aa>
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     84e:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     850:	428b      	cmp	r3, r1
     852:	d1fc      	bne.n	84e <spi_init+0x76>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     854:	2300      	movs	r3, #0
     856:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     858:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     85a:	2400      	movs	r4, #0
     85c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     85e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     860:	3336      	adds	r3, #54	; 0x36
     862:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     864:	3301      	adds	r3, #1
     866:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     868:	3301      	adds	r3, #1
     86a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     86c:	3b35      	subs	r3, #53	; 0x35
     86e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     870:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     872:	6828      	ldr	r0, [r5, #0]
     874:	4b48      	ldr	r3, [pc, #288]	; (998 <spi_init+0x1c0>)
     876:	4798      	blx	r3
     878:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     87a:	494c      	ldr	r1, [pc, #304]	; (9ac <spi_init+0x1d4>)
     87c:	4b4c      	ldr	r3, [pc, #304]	; (9b0 <spi_init+0x1d8>)
     87e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     880:	00bf      	lsls	r7, r7, #2
     882:	4b4c      	ldr	r3, [pc, #304]	; (9b4 <spi_init+0x1dc>)
     884:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     886:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     888:	ab02      	add	r3, sp, #8
     88a:	2280      	movs	r2, #128	; 0x80
     88c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     88e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     890:	3a7f      	subs	r2, #127	; 0x7f
     892:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     894:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     896:	7833      	ldrb	r3, [r6, #0]
     898:	2b00      	cmp	r3, #0
     89a:	d102      	bne.n	8a2 <spi_init+0xca>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     89c:	2200      	movs	r2, #0
     89e:	ab02      	add	r3, sp, #8
     8a0:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     8a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     8a4:	9303      	str	r3, [sp, #12]
     8a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     8a8:	9304      	str	r3, [sp, #16]
     8aa:	6b33      	ldr	r3, [r6, #48]	; 0x30
     8ac:	9305      	str	r3, [sp, #20]
     8ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
     8b0:	9306      	str	r3, [sp, #24]
     8b2:	2400      	movs	r4, #0
     8b4:	b2e1      	uxtb	r1, r4
     8b6:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8b8:	aa03      	add	r2, sp, #12
     8ba:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     8bc:	2800      	cmp	r0, #0
     8be:	d102      	bne.n	8c6 <spi_init+0xee>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8c0:	1c38      	adds	r0, r7, #0
     8c2:	4b3d      	ldr	r3, [pc, #244]	; (9b8 <spi_init+0x1e0>)
     8c4:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     8c6:	1c43      	adds	r3, r0, #1
     8c8:	d006      	beq.n	8d8 <spi_init+0x100>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     8ca:	466b      	mov	r3, sp
     8cc:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     8ce:	0c00      	lsrs	r0, r0, #16
     8d0:	b2c0      	uxtb	r0, r0
     8d2:	a902      	add	r1, sp, #8
     8d4:	4b39      	ldr	r3, [pc, #228]	; (9bc <spi_init+0x1e4>)
     8d6:	4798      	blx	r3
     8d8:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     8da:	2c04      	cmp	r4, #4
     8dc:	d1ea      	bne.n	8b4 <spi_init+0xdc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     8de:	7833      	ldrb	r3, [r6, #0]
     8e0:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     8e2:	7c33      	ldrb	r3, [r6, #16]
     8e4:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     8e6:	7cb3      	ldrb	r3, [r6, #18]
     8e8:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     8ea:	7d33      	ldrb	r3, [r6, #20]
     8ec:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     8ee:	2200      	movs	r2, #0
     8f0:	466b      	mov	r3, sp
     8f2:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     8f4:	7833      	ldrb	r3, [r6, #0]
     8f6:	2b01      	cmp	r3, #1
     8f8:	d113      	bne.n	922 <spi_init+0x14a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8fa:	6828      	ldr	r0, [r5, #0]
     8fc:	4b26      	ldr	r3, [pc, #152]	; (998 <spi_init+0x1c0>)
     8fe:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     900:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     902:	b2c0      	uxtb	r0, r0
     904:	4b2e      	ldr	r3, [pc, #184]	; (9c0 <spi_init+0x1e8>)
     906:	4798      	blx	r3
     908:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     90a:	69b0      	ldr	r0, [r6, #24]
     90c:	466b      	mov	r3, sp
     90e:	1d9a      	adds	r2, r3, #6
     910:	4b2c      	ldr	r3, [pc, #176]	; (9c4 <spi_init+0x1ec>)
     912:	4798      	blx	r3
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     914:	2317      	movs	r3, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     916:	2800      	cmp	r0, #0
     918:	d139      	bne.n	98e <spi_init+0x1b6>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     91a:	466b      	mov	r3, sp
     91c:	3306      	adds	r3, #6
     91e:	781b      	ldrb	r3, [r3, #0]
     920:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     922:	68b3      	ldr	r3, [r6, #8]
     924:	6872      	ldr	r2, [r6, #4]
     926:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     928:	68f2      	ldr	r2, [r6, #12]
     92a:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     92c:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     92e:	7c71      	ldrb	r1, [r6, #17]
     930:	2900      	cmp	r1, #0
     932:	d103      	bne.n	93c <spi_init+0x164>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     934:	4924      	ldr	r1, [pc, #144]	; (9c8 <spi_init+0x1f0>)
     936:	7889      	ldrb	r1, [r1, #2]
     938:	0789      	lsls	r1, r1, #30
     93a:	d501      	bpl.n	940 <spi_init+0x168>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     93c:	2180      	movs	r1, #128	; 0x80
     93e:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     940:	7cb1      	ldrb	r1, [r6, #18]
     942:	2900      	cmp	r1, #0
     944:	d002      	beq.n	94c <spi_init+0x174>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     946:	2180      	movs	r1, #128	; 0x80
     948:	0289      	lsls	r1, r1, #10
     94a:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     94c:	7cf1      	ldrb	r1, [r6, #19]
     94e:	2900      	cmp	r1, #0
     950:	d002      	beq.n	958 <spi_init+0x180>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     952:	2180      	movs	r1, #128	; 0x80
     954:	0089      	lsls	r1, r1, #2
     956:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     958:	7d31      	ldrb	r1, [r6, #20]
     95a:	2900      	cmp	r1, #0
     95c:	d002      	beq.n	964 <spi_init+0x18c>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     95e:	2180      	movs	r1, #128	; 0x80
     960:	0189      	lsls	r1, r1, #6
     962:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     964:	6839      	ldr	r1, [r7, #0]
     966:	430b      	orrs	r3, r1
     968:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	431a      	orrs	r2, r3
     96e:	607a      	str	r2, [r7, #4]

	return STATUS_OK;
     970:	2300      	movs	r3, #0
     972:	e00c      	b.n	98e <spi_init+0x1b6>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     974:	4a09      	ldr	r2, [pc, #36]	; (99c <spi_init+0x1c4>)
     976:	6a11      	ldr	r1, [r2, #32]
     978:	2302      	movs	r3, #2
     97a:	430b      	orrs	r3, r1
     97c:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
     97e:	2718      	movs	r7, #24
     980:	e74b      	b.n	81a <spi_init+0x42>
     982:	1c2b      	adds	r3, r5, #0
     984:	330c      	adds	r3, #12
     986:	1c29      	adds	r1, r5, #0
     988:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     98a:	2200      	movs	r2, #0
     98c:	e75f      	b.n	84e <spi_init+0x76>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     98e:	1c18      	adds	r0, r3, #0
     990:	b008      	add	sp, #32
     992:	bc04      	pop	{r2}
     994:	4690      	mov	r8, r2
     996:	bdf0      	pop	{r4, r5, r6, r7, pc}
     998:	00000699 	.word	0x00000699
     99c:	40000400 	.word	0x40000400
     9a0:	000015c5 	.word	0x000015c5
     9a4:	0000155d 	.word	0x0000155d
     9a8:	000004e1 	.word	0x000004e1
     9ac:	00000be1 	.word	0x00000be1
     9b0:	00000d95 	.word	0x00000d95
     9b4:	200000c8 	.word	0x200000c8
     9b8:	0000052d 	.word	0x0000052d
     9bc:	000016c1 	.word	0x000016c1
     9c0:	000015e9 	.word	0x000015e9
     9c4:	000004b9 	.word	0x000004b9
     9c8:	41002000 	.word	0x41002000

000009cc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	465f      	mov	r7, fp
     9d0:	4656      	mov	r6, sl
     9d2:	464d      	mov	r5, r9
     9d4:	4644      	mov	r4, r8
     9d6:	b4f0      	push	{r4, r5, r6, r7}
     9d8:	b085      	sub	sp, #20
     9da:	4688      	mov	r8, r1
	
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     9dc:	2338      	movs	r3, #56	; 0x38
     9de:	5cc3      	ldrb	r3, [r0, r3]
     9e0:	b2db      	uxtb	r3, r3
     9e2:	2b05      	cmp	r3, #5
     9e4:	d06a      	beq.n	abc <spi_write_buffer_wait+0xf0>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9e6:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     9e8:	2a00      	cmp	r2, #0
     9ea:	d067      	beq.n	abc <spi_write_buffer_wait+0xf0>
     9ec:	e05a      	b.n	aa4 <spi_write_buffer_wait+0xd8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9ee:	6804      	ldr	r4, [r0, #0]
     9f0:	9f00      	ldr	r7, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9f2:	7e23      	ldrb	r3, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     9f4:	4213      	tst	r3, r2
     9f6:	d0fc      	beq.n	9f2 <spi_write_buffer_wait+0x26>
     9f8:	9700      	str	r7, [sp, #0]
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     9fa:	1c4b      	adds	r3, r1, #1
     9fc:	b29b      	uxth	r3, r3
     9fe:	4698      	mov	r8, r3
     a00:	5c7b      	ldrb	r3, [r7, r1]
     a02:	469a      	mov	sl, r3

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a04:	7983      	ldrb	r3, [r0, #6]
     a06:	2b01      	cmp	r3, #1
     a08:	d006      	beq.n	a18 <spi_write_buffer_wait+0x4c>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     a0a:	4653      	mov	r3, sl
     a0c:	4669      	mov	r1, sp
     a0e:	80cb      	strh	r3, [r1, #6]
     a10:	88cb      	ldrh	r3, [r1, #6]
     a12:	469c      	mov	ip, r3
     a14:	4641      	mov	r1, r8
     a16:	e008      	b.n	a2a <spi_write_buffer_wait+0x5e>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     a18:	3102      	adds	r1, #2
     a1a:	b289      	uxth	r1, r1
     a1c:	4643      	mov	r3, r8
     a1e:	9f00      	ldr	r7, [sp, #0]
     a20:	5cfb      	ldrb	r3, [r7, r3]
     a22:	021b      	lsls	r3, r3, #8
     a24:	4657      	mov	r7, sl
     a26:	433b      	orrs	r3, r7
     a28:	469c      	mov	ip, r3
     a2a:	7e23      	ldrb	r3, [r4, #24]
     a2c:	4698      	mov	r8, r3
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     a2e:	2305      	movs	r3, #5
     a30:	1c1f      	adds	r7, r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a32:	4643      	mov	r3, r8
     a34:	4213      	tst	r3, r2
     a36:	d005      	beq.n	a44 <spi_write_buffer_wait+0x78>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a38:	4663      	mov	r3, ip
     a3a:	05db      	lsls	r3, r3, #23
     a3c:	0ddb      	lsrs	r3, r3, #23
     a3e:	62a3      	str	r3, [r4, #40]	; 0x28

	return STATUS_OK;
     a40:	2300      	movs	r3, #0
     a42:	1c1f      	adds	r7, r3, #0
		}

		/* Write the data to send */
		statuscode = spi_write(module, data_to_send);
     a44:	ab02      	add	r3, sp, #8
     a46:	71df      	strb	r7, [r3, #7]

		if (module->receiver_enabled) {
     a48:	79c3      	ldrb	r3, [r0, #7]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d01b      	beq.n	a86 <spi_write_buffer_wait+0xba>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a4e:	6803      	ldr	r3, [r0, #0]
     a50:	1c1c      	adds	r4, r3, #0
     a52:	9f00      	ldr	r7, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a54:	7e23      	ldrb	r3, [r4, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     a56:	422b      	tst	r3, r5
     a58:	d0fc      	beq.n	a54 <spi_write_buffer_wait+0x88>
     a5a:	46a4      	mov	ip, r4
     a5c:	9700      	str	r7, [sp, #0]
     a5e:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     a60:	422b      	tst	r3, r5
     a62:	d010      	beq.n	a86 <spi_write_buffer_wait+0xba>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a64:	8b63      	ldrh	r3, [r4, #26]
     a66:	422b      	tst	r3, r5
     a68:	d005      	beq.n	a76 <spi_write_buffer_wait+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     a6a:	8b63      	ldrh	r3, [r4, #26]
     a6c:	465c      	mov	r4, fp
     a6e:	4323      	orrs	r3, r4
     a70:	b29b      	uxth	r3, r3
     a72:	4664      	mov	r4, ip
     a74:	8363      	strh	r3, [r4, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a76:	7983      	ldrb	r3, [r0, #6]
     a78:	2b01      	cmp	r3, #1
     a7a:	d102      	bne.n	a82 <spi_write_buffer_wait+0xb6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a7c:	4663      	mov	r3, ip
     a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a80:	e001      	b.n	a86 <spi_write_buffer_wait+0xba>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a82:	4663      	mov	r3, ip
     a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     a86:	3e01      	subs	r6, #1
     a88:	b2b6      	uxth	r6, r6
     a8a:	454e      	cmp	r6, r9
     a8c:	d1af      	bne.n	9ee <spi_write_buffer_wait+0x22>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     a8e:	7942      	ldrb	r2, [r0, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     a90:	2300      	movs	r3, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     a92:	2a01      	cmp	r2, #1
     a94:	d112      	bne.n	abc <spi_write_buffer_wait+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a96:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     a98:	3201      	adds	r2, #1
     a9a:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     a9c:	4213      	tst	r3, r2
     a9e:	d0fc      	beq.n	a9a <spi_write_buffer_wait+0xce>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     aa0:	2300      	movs	r3, #0
     aa2:	e00b      	b.n	abc <spi_write_buffer_wait+0xf0>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     aa4:	3a01      	subs	r2, #1
     aa6:	b296      	uxth	r6, r2
     aa8:	2100      	movs	r1, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     aaa:	2201      	movs	r2, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     aac:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     aae:	2304      	movs	r3, #4
     ab0:	469b      	mov	fp, r3
     ab2:	4b06      	ldr	r3, [pc, #24]	; (acc <spi_write_buffer_wait+0x100>)
     ab4:	4699      	mov	r9, r3
     ab6:	4643      	mov	r3, r8
     ab8:	9300      	str	r3, [sp, #0]
     aba:	e798      	b.n	9ee <spi_write_buffer_wait+0x22>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     abc:	1c18      	adds	r0, r3, #0
     abe:	b005      	add	sp, #20
     ac0:	bc3c      	pop	{r2, r3, r4, r5}
     ac2:	4690      	mov	r8, r2
     ac4:	4699      	mov	r9, r3
     ac6:	46a2      	mov	sl, r4
     ac8:	46ab      	mov	fp, r5
     aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     acc:	0000ffff 	.word	0x0000ffff

00000ad0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad2:	465f      	mov	r7, fp
     ad4:	4656      	mov	r6, sl
     ad6:	464d      	mov	r5, r9
     ad8:	4644      	mov	r4, r8
     ada:	b4f0      	push	{r4, r5, r6, r7}
     adc:	b083      	sub	sp, #12
     ade:	1c07      	adds	r7, r0, #0
     ae0:	4691      	mov	r9, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     ae2:	2238      	movs	r2, #56	; 0x38
     ae4:	5c80      	ldrb	r0, [r0, r2]
     ae6:	b2c0      	uxtb	r0, r0
     ae8:	2805      	cmp	r0, #5
     aea:	d072      	beq.n	bd2 <spi_transceive_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     aec:	2017      	movs	r0, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     aee:	2b00      	cmp	r3, #0
     af0:	d06f      	beq.n	bd2 <spi_transceive_buffer_wait+0x102>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     af2:	79fa      	ldrb	r2, [r7, #7]
		return STATUS_ERR_DENIED;
     af4:	3005      	adds	r0, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     af6:	2a00      	cmp	r2, #0
     af8:	d06b      	beq.n	bd2 <spi_transceive_buffer_wait+0x102>
     afa:	2200      	movs	r2, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     afc:	2601      	movs	r6, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     afe:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     b00:	2004      	movs	r0, #4
     b02:	4683      	mov	fp, r0
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     b04:	9300      	str	r3, [sp, #0]
     b06:	468c      	mov	ip, r1
     b08:	1c11      	adds	r1, r2, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b0a:	683c      	ldr	r4, [r7, #0]
     b0c:	9b00      	ldr	r3, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b0e:	7e20      	ldrb	r0, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     b10:	4230      	tst	r0, r6
     b12:	d0fc      	beq.n	b0e <spi_transceive_buffer_wait+0x3e>
     b14:	9300      	str	r3, [sp, #0]
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     b16:	1c50      	adds	r0, r2, #1
     b18:	b280      	uxth	r0, r0
     b1a:	4680      	mov	r8, r0
     b1c:	4660      	mov	r0, ip
     b1e:	5c83      	ldrb	r3, [r0, r2]
     b20:	1c18      	adds	r0, r3, #0
     b22:	9301      	str	r3, [sp, #4]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b24:	79bb      	ldrb	r3, [r7, #6]
     b26:	2b01      	cmp	r3, #1
     b28:	d002      	beq.n	b30 <spi_transceive_buffer_wait+0x60>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     b2a:	b280      	uxth	r0, r0
     b2c:	4642      	mov	r2, r8
     b2e:	e007      	b.n	b40 <spi_transceive_buffer_wait+0x70>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     b30:	3202      	adds	r2, #2
     b32:	b292      	uxth	r2, r2
     b34:	4663      	mov	r3, ip
     b36:	4640      	mov	r0, r8
     b38:	5c1b      	ldrb	r3, [r3, r0]
     b3a:	021b      	lsls	r3, r3, #8
     b3c:	9801      	ldr	r0, [sp, #4]
     b3e:	4318      	orrs	r0, r3
     b40:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     b42:	4233      	tst	r3, r6
     b44:	d002      	beq.n	b4c <spi_transceive_buffer_wait+0x7c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b46:	05c0      	lsls	r0, r0, #23
     b48:	0dc0      	lsrs	r0, r0, #23
     b4a:	62a0      	str	r0, [r4, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b4c:	683c      	ldr	r4, [r7, #0]
     b4e:	9b00      	ldr	r3, [sp, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b50:	7e20      	ldrb	r0, [r4, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     b52:	4228      	tst	r0, r5
     b54:	d0fc      	beq.n	b50 <spi_transceive_buffer_wait+0x80>
     b56:	9300      	str	r3, [sp, #0]
     b58:	7e20      	ldrb	r0, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     b5a:	4228      	tst	r0, r5
     b5c:	d017      	beq.n	b8e <spi_transceive_buffer_wait+0xbe>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b5e:	8b63      	ldrh	r3, [r4, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     b60:	2000      	movs	r0, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b62:	422b      	tst	r3, r5
     b64:	d005      	beq.n	b72 <spi_transceive_buffer_wait+0xa2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     b66:	8b60      	ldrh	r0, [r4, #26]
     b68:	465b      	mov	r3, fp
     b6a:	4318      	orrs	r0, r3
     b6c:	b280      	uxth	r0, r0
     b6e:	8360      	strh	r0, [r4, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     b70:	201e      	movs	r0, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b72:	79bb      	ldrb	r3, [r7, #6]
     b74:	2b01      	cmp	r3, #1
     b76:	d104      	bne.n	b82 <spi_transceive_buffer_wait+0xb2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     b78:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     b7a:	05e4      	lsls	r4, r4, #23
     b7c:	0de3      	lsrs	r3, r4, #23
     b7e:	4698      	mov	r8, r3
     b80:	e002      	b.n	b88 <spi_transceive_buffer_wait+0xb8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b82:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     b84:	b2e3      	uxtb	r3, r4
     b86:	4698      	mov	r8, r3
		uint16_t received_data = 0;
		rx_length--;

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     b88:	2800      	cmp	r0, #0
     b8a:	d002      	beq.n	b92 <spi_transceive_buffer_wait+0xc2>
     b8c:	e021      	b.n	bd2 <spi_transceive_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     b8e:	2010      	movs	r0, #16
     b90:	e01f      	b.n	bd2 <spi_transceive_buffer_wait+0x102>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     b92:	1c48      	adds	r0, r1, #1
     b94:	b280      	uxth	r0, r0
     b96:	464b      	mov	r3, r9
     b98:	4644      	mov	r4, r8
     b9a:	545c      	strb	r4, [r3, r1]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b9c:	79bc      	ldrb	r4, [r7, #6]
     b9e:	2c01      	cmp	r4, #1
     ba0:	d106      	bne.n	bb0 <spi_transceive_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     ba2:	3102      	adds	r1, #2
     ba4:	b289      	uxth	r1, r1
     ba6:	4643      	mov	r3, r8
     ba8:	0a1c      	lsrs	r4, r3, #8
     baa:	464b      	mov	r3, r9
     bac:	541c      	strb	r4, [r3, r0]
     bae:	e000      	b.n	bb2 <spi_transceive_buffer_wait+0xe2>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     bb0:	1c01      	adds	r1, r0, #0
     bb2:	9b00      	ldr	r3, [sp, #0]
     bb4:	3b01      	subs	r3, #1
     bb6:	b29b      	uxth	r3, r3
     bb8:	9300      	str	r3, [sp, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     bba:	2b00      	cmp	r3, #0
     bbc:	d1a5      	bne.n	b0a <spi_transceive_buffer_wait+0x3a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     bbe:	797b      	ldrb	r3, [r7, #5]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     bc0:	2000      	movs	r0, #0
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     bc2:	2b01      	cmp	r3, #1
     bc4:	d105      	bne.n	bd2 <spi_transceive_buffer_wait+0x102>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bc6:	6839      	ldr	r1, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     bc8:	2202      	movs	r2, #2
     bca:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     bcc:	4213      	tst	r3, r2
     bce:	d0fc      	beq.n	bca <spi_transceive_buffer_wait+0xfa>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     bd0:	2000      	movs	r0, #0
}
     bd2:	b003      	add	sp, #12
     bd4:	bc3c      	pop	{r2, r3, r4, r5}
     bd6:	4690      	mov	r8, r2
     bd8:	4699      	mov	r9, r3
     bda:	46a2      	mov	sl, r4
     bdc:	46ab      	mov	fp, r5
     bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000be0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     be2:	0080      	lsls	r0, r0, #2
     be4:	4b68      	ldr	r3, [pc, #416]	; (d88 <_spi_interrupt_handler+0x1a8>)
     be6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     be8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     bea:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     bec:	5ce3      	ldrb	r3, [r4, r3]
     bee:	2237      	movs	r2, #55	; 0x37
     bf0:	5ca7      	ldrb	r7, [r4, r2]
     bf2:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     bf4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     bf6:	7db5      	ldrb	r5, [r6, #22]
     bf8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     bfa:	07eb      	lsls	r3, r5, #31
     bfc:	d53d      	bpl.n	c7a <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     bfe:	7963      	ldrb	r3, [r4, #5]
     c00:	2b01      	cmp	r3, #1
     c02:	d13a      	bne.n	c7a <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
     c04:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     c06:	2b00      	cmp	r3, #0
     c08:	d10f      	bne.n	c2a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     c0a:	4b60      	ldr	r3, [pc, #384]	; (d8c <_spi_interrupt_handler+0x1ac>)
     c0c:	881b      	ldrh	r3, [r3, #0]
     c0e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     c10:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c12:	3b01      	subs	r3, #1
     c14:	b29b      	uxth	r3, r3
     c16:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     c18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c1a:	b29b      	uxth	r3, r3
     c1c:	2b00      	cmp	r3, #0
     c1e:	d101      	bne.n	c24 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     c20:	3301      	adds	r3, #1
     c22:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
     c24:	7963      	ldrb	r3, [r4, #5]
     c26:	2b01      	cmp	r3, #1
     c28:	d127      	bne.n	c7a <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     c2a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     c2c:	2b00      	cmp	r3, #0
     c2e:	d024      	beq.n	c7a <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     c30:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     c34:	780b      	ldrb	r3, [r1, #0]
     c36:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     c38:	1c4b      	adds	r3, r1, #1
     c3a:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c3c:	79a3      	ldrb	r3, [r4, #6]
     c3e:	2b01      	cmp	r3, #1
     c40:	d001      	beq.n	c46 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c42:	b293      	uxth	r3, r2
     c44:	e004      	b.n	c50 <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     c46:	784b      	ldrb	r3, [r1, #1]
     c48:	021b      	lsls	r3, r3, #8
     c4a:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     c4c:	3102      	adds	r1, #2
     c4e:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     c50:	05db      	lsls	r3, r3, #23
     c52:	0ddb      	lsrs	r3, r3, #23
     c54:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     c56:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     c58:	3b01      	subs	r3, #1
     c5a:	b29b      	uxth	r3, r3
     c5c:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     c5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     c60:	b29b      	uxth	r3, r3
     c62:	2b00      	cmp	r3, #0
     c64:	d109      	bne.n	c7a <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     c66:	3301      	adds	r3, #1
     c68:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     c6a:	7a63      	ldrb	r3, [r4, #9]
     c6c:	2b01      	cmp	r3, #1
     c6e:	d104      	bne.n	c7a <_spi_interrupt_handler+0x9a>
     c70:	79e3      	ldrb	r3, [r4, #7]
     c72:	2b00      	cmp	r3, #0
     c74:	d101      	bne.n	c7a <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c76:	3302      	adds	r3, #2
     c78:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     c7a:	076b      	lsls	r3, r5, #29
     c7c:	d561      	bpl.n	d42 <_spi_interrupt_handler+0x162>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c7e:	8b73      	ldrh	r3, [r6, #26]
     c80:	075b      	lsls	r3, r3, #29
     c82:	d514      	bpl.n	cae <_spi_interrupt_handler+0xce>
			if (module->dir != SPI_DIRECTION_WRITE) {
     c84:	7a63      	ldrb	r3, [r4, #9]
     c86:	2b01      	cmp	r3, #1
     c88:	d00b      	beq.n	ca2 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     c8a:	221e      	movs	r2, #30
     c8c:	2338      	movs	r3, #56	; 0x38
     c8e:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     c90:	3b35      	subs	r3, #53	; 0x35
     c92:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     c94:	3302      	adds	r3, #2
     c96:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     c98:	073b      	lsls	r3, r7, #28
     c9a:	d502      	bpl.n	ca2 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     c9c:	1c20      	adds	r0, r4, #0
     c9e:	69a3      	ldr	r3, [r4, #24]
     ca0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     ca2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ca4:	8b72      	ldrh	r2, [r6, #26]
     ca6:	2304      	movs	r3, #4
     ca8:	4313      	orrs	r3, r2
     caa:	8373      	strh	r3, [r6, #26]
     cac:	e049      	b.n	d42 <_spi_interrupt_handler+0x162>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     cae:	7a63      	ldrb	r3, [r4, #9]
     cb0:	2b01      	cmp	r3, #1
     cb2:	d116      	bne.n	ce2 <_spi_interrupt_handler+0x102>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     cb4:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     cb8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     cba:	3b01      	subs	r3, #1
     cbc:	b29b      	uxth	r3, r3
     cbe:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     cc0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     cc2:	b29b      	uxth	r3, r3
     cc4:	2b00      	cmp	r3, #0
     cc6:	d13c      	bne.n	d42 <_spi_interrupt_handler+0x162>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     cc8:	3304      	adds	r3, #4
     cca:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     ccc:	2200      	movs	r2, #0
     cce:	3334      	adds	r3, #52	; 0x34
     cd0:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     cd2:	3b35      	subs	r3, #53	; 0x35
     cd4:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     cd6:	07fb      	lsls	r3, r7, #31
     cd8:	d533      	bpl.n	d42 <_spi_interrupt_handler+0x162>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     cda:	1c20      	adds	r0, r4, #0
     cdc:	68e3      	ldr	r3, [r4, #12]
     cde:	4798      	blx	r3
     ce0:	e02f      	b.n	d42 <_spi_interrupt_handler+0x162>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ce2:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ce6:	05db      	lsls	r3, r3, #23
     ce8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     cea:	b2da      	uxtb	r2, r3
     cec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     cee:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     cf2:	1c51      	adds	r1, r2, #1
     cf4:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cf6:	79a1      	ldrb	r1, [r4, #6]
     cf8:	2901      	cmp	r1, #1
     cfa:	d104      	bne.n	d06 <_spi_interrupt_handler+0x126>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     cfc:	0a1b      	lsrs	r3, r3, #8
     cfe:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d02:	3301      	adds	r3, #1
     d04:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     d06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     d08:	3b01      	subs	r3, #1
     d0a:	b29b      	uxth	r3, r3
     d0c:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     d0e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     d10:	b29b      	uxth	r3, r3
     d12:	2b00      	cmp	r3, #0
     d14:	d115      	bne.n	d42 <_spi_interrupt_handler+0x162>
					module->status = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	3338      	adds	r3, #56	; 0x38
     d1a:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     d1c:	3b34      	subs	r3, #52	; 0x34
     d1e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     d20:	7a63      	ldrb	r3, [r4, #9]
     d22:	2b02      	cmp	r3, #2
     d24:	d105      	bne.n	d32 <_spi_interrupt_handler+0x152>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     d26:	077b      	lsls	r3, r7, #29
     d28:	d50b      	bpl.n	d42 <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     d2a:	1c20      	adds	r0, r4, #0
     d2c:	6963      	ldr	r3, [r4, #20]
     d2e:	4798      	blx	r3
     d30:	e007      	b.n	d42 <_spi_interrupt_handler+0x162>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     d32:	7a63      	ldrb	r3, [r4, #9]
     d34:	2b00      	cmp	r3, #0
     d36:	d104      	bne.n	d42 <_spi_interrupt_handler+0x162>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     d38:	07bb      	lsls	r3, r7, #30
     d3a:	d502      	bpl.n	d42 <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     d3c:	1c20      	adds	r0, r4, #0
     d3e:	6923      	ldr	r3, [r4, #16]
     d40:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     d42:	07ab      	lsls	r3, r5, #30
     d44:	d514      	bpl.n	d70 <_spi_interrupt_handler+0x190>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     d46:	7963      	ldrb	r3, [r4, #5]
     d48:	2b01      	cmp	r3, #1
     d4a:	d111      	bne.n	d70 <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     d4c:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     d4e:	2b01      	cmp	r3, #1
     d50:	d10e      	bne.n	d70 <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     d52:	79e3      	ldrb	r3, [r4, #7]
     d54:	2b00      	cmp	r3, #0
     d56:	d10b      	bne.n	d70 <_spi_interrupt_handler+0x190>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d58:	3302      	adds	r3, #2
     d5a:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     d5c:	3301      	adds	r3, #1
     d5e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     d60:	2200      	movs	r2, #0
     d62:	3335      	adds	r3, #53	; 0x35
     d64:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     d66:	07fb      	lsls	r3, r7, #31
     d68:	d502      	bpl.n	d70 <_spi_interrupt_handler+0x190>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     d6a:	1c20      	adds	r0, r4, #0
     d6c:	68e3      	ldr	r3, [r4, #12]
     d6e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     d70:	09ed      	lsrs	r5, r5, #7
     d72:	d007      	beq.n	d84 <_spi_interrupt_handler+0x1a4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d74:	2380      	movs	r3, #128	; 0x80
     d76:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d78:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     d7a:	067b      	lsls	r3, r7, #25
     d7c:	d502      	bpl.n	d84 <_spi_interrupt_handler+0x1a4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d80:	1c20      	adds	r0, r4, #0
     d82:	4798      	blx	r3
		}
	}
#  endif
}
     d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	200000c8 	.word	0x200000c8
     d8c:	200000c4 	.word	0x200000c4

00000d90 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d90:	4770      	bx	lr
     d92:	46c0      	nop			; (mov r8, r8)

00000d94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d96:	4b0a      	ldr	r3, [pc, #40]	; (dc0 <_sercom_set_handler+0x2c>)
     d98:	781b      	ldrb	r3, [r3, #0]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d10c      	bne.n	db8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d9e:	4f09      	ldr	r7, [pc, #36]	; (dc4 <_sercom_set_handler+0x30>)
     da0:	4e09      	ldr	r6, [pc, #36]	; (dc8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     da2:	4d0a      	ldr	r5, [pc, #40]	; (dcc <_sercom_set_handler+0x38>)
     da4:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     da6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     da8:	195a      	adds	r2, r3, r5
     daa:	6014      	str	r4, [r2, #0]
     dac:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dae:	2b18      	cmp	r3, #24
     db0:	d1f9      	bne.n	da6 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     db2:	2201      	movs	r2, #1
     db4:	4b02      	ldr	r3, [pc, #8]	; (dc0 <_sercom_set_handler+0x2c>)
     db6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     db8:	0080      	lsls	r0, r0, #2
     dba:	4b02      	ldr	r3, [pc, #8]	; (dc4 <_sercom_set_handler+0x30>)
     dbc:	50c1      	str	r1, [r0, r3]
}
     dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc0:	2000002e 	.word	0x2000002e
     dc4:	20000030 	.word	0x20000030
     dc8:	00000d91 	.word	0x00000d91
     dcc:	200000c8 	.word	0x200000c8

00000dd0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     dd0:	b510      	push	{r4, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     dd6:	4668      	mov	r0, sp
     dd8:	4905      	ldr	r1, [pc, #20]	; (df0 <_sercom_get_interrupt_vector+0x20>)
     dda:	2206      	movs	r2, #6
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <_sercom_get_interrupt_vector+0x24>)
     dde:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     de0:	1c20      	adds	r0, r4, #0
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <_sercom_get_interrupt_vector+0x28>)
     de4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     de6:	466b      	mov	r3, sp
     de8:	5618      	ldrsb	r0, [r3, r0]
}
     dea:	b002      	add	sp, #8
     dec:	bd10      	pop	{r4, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00001e84 	.word	0x00001e84
     df4:	00001e29 	.word	0x00001e29
     df8:	00000699 	.word	0x00000699

00000dfc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     dfc:	b508      	push	{r3, lr}
     dfe:	4b02      	ldr	r3, [pc, #8]	; (e08 <SERCOM0_Handler+0xc>)
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	2000      	movs	r0, #0
     e04:	4798      	blx	r3
     e06:	bd08      	pop	{r3, pc}
     e08:	20000030 	.word	0x20000030

00000e0c <SERCOM1_Handler>:
     e0c:	b508      	push	{r3, lr}
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <SERCOM1_Handler+0xc>)
     e10:	685b      	ldr	r3, [r3, #4]
     e12:	2001      	movs	r0, #1
     e14:	4798      	blx	r3
     e16:	bd08      	pop	{r3, pc}
     e18:	20000030 	.word	0x20000030

00000e1c <SERCOM2_Handler>:
     e1c:	b508      	push	{r3, lr}
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <SERCOM2_Handler+0xc>)
     e20:	689b      	ldr	r3, [r3, #8]
     e22:	2002      	movs	r0, #2
     e24:	4798      	blx	r3
     e26:	bd08      	pop	{r3, pc}
     e28:	20000030 	.word	0x20000030

00000e2c <SERCOM3_Handler>:
     e2c:	b508      	push	{r3, lr}
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <SERCOM3_Handler+0xc>)
     e30:	68db      	ldr	r3, [r3, #12]
     e32:	2003      	movs	r0, #3
     e34:	4798      	blx	r3
     e36:	bd08      	pop	{r3, pc}
     e38:	20000030 	.word	0x20000030

00000e3c <SERCOM4_Handler>:
     e3c:	b508      	push	{r3, lr}
     e3e:	4b02      	ldr	r3, [pc, #8]	; (e48 <SERCOM4_Handler+0xc>)
     e40:	691b      	ldr	r3, [r3, #16]
     e42:	2004      	movs	r0, #4
     e44:	4798      	blx	r3
     e46:	bd08      	pop	{r3, pc}
     e48:	20000030 	.word	0x20000030

00000e4c <SERCOM5_Handler>:
     e4c:	b508      	push	{r3, lr}
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM5_Handler+0xc>)
     e50:	695b      	ldr	r3, [r3, #20]
     e52:	2005      	movs	r0, #5
     e54:	4798      	blx	r3
     e56:	bd08      	pop	{r3, pc}
     e58:	20000030 	.word	0x20000030

00000e5c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     e5c:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     e5e:	2000      	movs	r0, #0
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <delay_init+0x28>)
     e62:	4798      	blx	r3
	cycles_per_ms /= 1000;
     e64:	4c08      	ldr	r4, [pc, #32]	; (e88 <delay_init+0x2c>)
     e66:	21fa      	movs	r1, #250	; 0xfa
     e68:	0089      	lsls	r1, r1, #2
     e6a:	47a0      	blx	r4
     e6c:	4b07      	ldr	r3, [pc, #28]	; (e8c <delay_init+0x30>)
     e6e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     e70:	21fa      	movs	r1, #250	; 0xfa
     e72:	0089      	lsls	r1, r1, #2
     e74:	47a0      	blx	r4
     e76:	4b06      	ldr	r3, [pc, #24]	; (e90 <delay_init+0x34>)
     e78:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e7a:	2205      	movs	r2, #5
     e7c:	4b05      	ldr	r3, [pc, #20]	; (e94 <delay_init+0x38>)
     e7e:	601a      	str	r2, [r3, #0]
}
     e80:	bd10      	pop	{r4, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	000014f1 	.word	0x000014f1
     e88:	00001bed 	.word	0x00001bed
     e8c:	20000004 	.word	0x20000004
     e90:	20000000 	.word	0x20000000
     e94:	e000e010 	.word	0xe000e010

00000e98 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     e98:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <delay_cycles_us+0x24>)
     e9c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     e9e:	4a08      	ldr	r2, [pc, #32]	; (ec0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     ea0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ea2:	2180      	movs	r1, #128	; 0x80
     ea4:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     ea6:	e006      	b.n	eb6 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     ea8:	2c00      	cmp	r4, #0
     eaa:	d004      	beq.n	eb6 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     eac:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     eae:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb0:	6813      	ldr	r3, [r2, #0]
     eb2:	420b      	tst	r3, r1
     eb4:	d0fc      	beq.n	eb0 <delay_cycles_us+0x18>
     eb6:	3801      	subs	r0, #1
     eb8:	d2f6      	bcs.n	ea8 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     eba:	bd30      	pop	{r4, r5, pc}
     ebc:	20000000 	.word	0x20000000
     ec0:	e000e010 	.word	0xe000e010

00000ec4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ec4:	b500      	push	{lr}
     ec6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ec8:	ab01      	add	r3, sp, #4
     eca:	2280      	movs	r2, #128	; 0x80
     ecc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ece:	780a      	ldrb	r2, [r1, #0]
     ed0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ed2:	784a      	ldrb	r2, [r1, #1]
     ed4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     ed6:	788a      	ldrb	r2, [r1, #2]
     ed8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     eda:	1c19      	adds	r1, r3, #0
     edc:	4b01      	ldr	r3, [pc, #4]	; (ee4 <port_pin_set_config+0x20>)
     ede:	4798      	blx	r3
}
     ee0:	b003      	add	sp, #12
     ee2:	bd00      	pop	{pc}
     ee4:	000016c1 	.word	0x000016c1

00000ee8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     ee8:	4770      	bx	lr
     eea:	46c0      	nop			; (mov r8, r8)

00000eec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     eec:	4b0c      	ldr	r3, [pc, #48]	; (f20 <cpu_irq_enter_critical+0x34>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d110      	bne.n	f16 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ef4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ef8:	2b00      	cmp	r3, #0
     efa:	d109      	bne.n	f10 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     efc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     efe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f02:	2200      	movs	r2, #0
     f04:	4b07      	ldr	r3, [pc, #28]	; (f24 <cpu_irq_enter_critical+0x38>)
     f06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f08:	3201      	adds	r2, #1
     f0a:	4b07      	ldr	r3, [pc, #28]	; (f28 <cpu_irq_enter_critical+0x3c>)
     f0c:	701a      	strb	r2, [r3, #0]
     f0e:	e002      	b.n	f16 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f10:	2200      	movs	r2, #0
     f12:	4b05      	ldr	r3, [pc, #20]	; (f28 <cpu_irq_enter_critical+0x3c>)
     f14:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f16:	4a02      	ldr	r2, [pc, #8]	; (f20 <cpu_irq_enter_critical+0x34>)
     f18:	6813      	ldr	r3, [r2, #0]
     f1a:	3301      	adds	r3, #1
     f1c:	6013      	str	r3, [r2, #0]
}
     f1e:	4770      	bx	lr
     f20:	20000048 	.word	0x20000048
     f24:	20000008 	.word	0x20000008
     f28:	2000004c 	.word	0x2000004c

00000f2c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f2c:	4b08      	ldr	r3, [pc, #32]	; (f50 <cpu_irq_leave_critical+0x24>)
     f2e:	681a      	ldr	r2, [r3, #0]
     f30:	3a01      	subs	r2, #1
     f32:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d109      	bne.n	f4e <cpu_irq_leave_critical+0x22>
     f3a:	4b06      	ldr	r3, [pc, #24]	; (f54 <cpu_irq_leave_critical+0x28>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	d005      	beq.n	f4e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f42:	2201      	movs	r2, #1
     f44:	4b04      	ldr	r3, [pc, #16]	; (f58 <cpu_irq_leave_critical+0x2c>)
     f46:	701a      	strb	r2, [r3, #0]
     f48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f4c:	b662      	cpsie	i
	}
}
     f4e:	4770      	bx	lr
     f50:	20000048 	.word	0x20000048
     f54:	2000004c 	.word	0x2000004c
     f58:	20000008 	.word	0x20000008

00000f5c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f5c:	b508      	push	{r3, lr}
	switch (clock_source) {
     f5e:	2808      	cmp	r0, #8
     f60:	d803      	bhi.n	f6a <system_clock_source_get_hz+0xe>
     f62:	0080      	lsls	r0, r0, #2
     f64:	4b1c      	ldr	r3, [pc, #112]	; (fd8 <system_clock_source_get_hz+0x7c>)
     f66:	581b      	ldr	r3, [r3, r0]
     f68:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     f6a:	2000      	movs	r0, #0
     f6c:	e032      	b.n	fd4 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     f6e:	4b1b      	ldr	r3, [pc, #108]	; (fdc <system_clock_source_get_hz+0x80>)
     f70:	6918      	ldr	r0, [r3, #16]
     f72:	e02f      	b.n	fd4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     f74:	4b1a      	ldr	r3, [pc, #104]	; (fe0 <system_clock_source_get_hz+0x84>)
     f76:	7d18      	ldrb	r0, [r3, #20]
     f78:	0700      	lsls	r0, r0, #28
     f7a:	0f80      	lsrs	r0, r0, #30
     f7c:	3001      	adds	r0, #1
     f7e:	4b19      	ldr	r3, [pc, #100]	; (fe4 <system_clock_source_get_hz+0x88>)
     f80:	4358      	muls	r0, r3
     f82:	e027      	b.n	fd4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     f84:	4b15      	ldr	r3, [pc, #84]	; (fdc <system_clock_source_get_hz+0x80>)
     f86:	6958      	ldr	r0, [r3, #20]
     f88:	e024      	b.n	fd4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     f8a:	4b14      	ldr	r3, [pc, #80]	; (fdc <system_clock_source_get_hz+0x80>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	2002      	movs	r0, #2
     f90:	4018      	ands	r0, r3
     f92:	d01f      	beq.n	fd4 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     f94:	4912      	ldr	r1, [pc, #72]	; (fe0 <system_clock_source_get_hz+0x84>)
     f96:	2280      	movs	r2, #128	; 0x80
     f98:	0052      	lsls	r2, r2, #1
     f9a:	68cb      	ldr	r3, [r1, #12]
     f9c:	4213      	tst	r3, r2
     f9e:	d0fc      	beq.n	f9a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     fa0:	4b0e      	ldr	r3, [pc, #56]	; (fdc <system_clock_source_get_hz+0x80>)
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	075b      	lsls	r3, r3, #29
     fa6:	d514      	bpl.n	fd2 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     fa8:	2000      	movs	r0, #0
     faa:	4b0f      	ldr	r3, [pc, #60]	; (fe8 <system_clock_source_get_hz+0x8c>)
     fac:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     fae:	4b0b      	ldr	r3, [pc, #44]	; (fdc <system_clock_source_get_hz+0x80>)
     fb0:	689b      	ldr	r3, [r3, #8]
     fb2:	041b      	lsls	r3, r3, #16
     fb4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     fb6:	4358      	muls	r0, r3
     fb8:	e00c      	b.n	fd4 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     fba:	2328      	movs	r3, #40	; 0x28
     fbc:	4a08      	ldr	r2, [pc, #32]	; (fe0 <system_clock_source_get_hz+0x84>)
     fbe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     fc0:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     fc2:	079b      	lsls	r3, r3, #30
     fc4:	d506      	bpl.n	fd4 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <system_clock_source_get_hz+0x80>)
     fc8:	68d8      	ldr	r0, [r3, #12]
     fca:	e003      	b.n	fd4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     fcc:	2080      	movs	r0, #128	; 0x80
     fce:	0200      	lsls	r0, r0, #8
     fd0:	e000      	b.n	fd4 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     fd2:	4806      	ldr	r0, [pc, #24]	; (fec <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
     fd4:	bd08      	pop	{r3, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	00001e8c 	.word	0x00001e8c
     fdc:	20000050 	.word	0x20000050
     fe0:	40000c00 	.word	0x40000c00
     fe4:	003d0900 	.word	0x003d0900
     fe8:	000015e9 	.word	0x000015e9
     fec:	02dc6c00 	.word	0x02dc6c00

00000ff0 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
     ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff2:	4647      	mov	r7, r8
     ff4:	b480      	push	{r7}
     ff6:	1c02      	adds	r2, r0, #0
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
     ff8:	4b28      	ldr	r3, [pc, #160]	; (109c <system_clock_source_xosc_set_config+0xac>)
     ffa:	8a19      	ldrh	r1, [r3, #16]
     ffc:	054d      	lsls	r5, r1, #21
     ffe:	0f6d      	lsrs	r5, r5, #29

	temp.bit.STARTUP = config->startup_time;
    1000:	7843      	ldrb	r3, [r0, #1]
    1002:	240f      	movs	r4, #15
    1004:	401c      	ands	r4, r3

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1006:	7806      	ldrb	r6, [r0, #0]
    1008:	4273      	negs	r3, r6
    100a:	415e      	adcs	r6, r3
    100c:	b2f6      	uxtb	r6, r6
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    100e:	7883      	ldrb	r3, [r0, #2]

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    1010:	2b00      	cmp	r3, #0
    1012:	d118      	bne.n	1046 <system_clock_source_xosc_set_config+0x56>
		if (config->frequency <= 2000000) {
    1014:	6840      	ldr	r0, [r0, #4]
    1016:	4f22      	ldr	r7, [pc, #136]	; (10a0 <system_clock_source_xosc_set_config+0xb0>)
    1018:	42b8      	cmp	r0, r7
    101a:	d90d      	bls.n	1038 <system_clock_source_xosc_set_config+0x48>
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
    101c:	4f21      	ldr	r7, [pc, #132]	; (10a4 <system_clock_source_xosc_set_config+0xb4>)
    101e:	42b8      	cmp	r0, r7
    1020:	d90c      	bls.n	103c <system_clock_source_xosc_set_config+0x4c>
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
    1022:	4f21      	ldr	r7, [pc, #132]	; (10a8 <system_clock_source_xosc_set_config+0xb8>)
    1024:	42b8      	cmp	r0, r7
    1026:	d90b      	bls.n	1040 <system_clock_source_xosc_set_config+0x50>
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
    1028:	4f20      	ldr	r7, [pc, #128]	; (10ac <system_clock_source_xosc_set_config+0xbc>)
    102a:	42b8      	cmp	r0, r7
    102c:	d90a      	bls.n	1044 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 3;
		} else if (config->frequency <= 30000000) {
    102e:	4f20      	ldr	r7, [pc, #128]	; (10b0 <system_clock_source_xosc_set_config+0xc0>)
    1030:	42b8      	cmp	r0, r7
    1032:	d808      	bhi.n	1046 <system_clock_source_xosc_set_config+0x56>
			temp.bit.GAIN = 4;
    1034:	2504      	movs	r5, #4
    1036:	e006      	b.n	1046 <system_clock_source_xosc_set_config+0x56>
	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
    1038:	2500      	movs	r5, #0
    103a:	e004      	b.n	1046 <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
    103c:	2501      	movs	r5, #1
    103e:	e002      	b.n	1046 <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
    1040:	2502      	movs	r5, #2
    1042:	e000      	b.n	1046 <system_clock_source_xosc_set_config+0x56>
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
    1044:	2503      	movs	r5, #3
			temp.bit.GAIN = 4;
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    1046:	7a57      	ldrb	r7, [r2, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1048:	7a10      	ldrb	r0, [r2, #8]
    104a:	4680      	mov	r8, r0

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    104c:	6852      	ldr	r2, [r2, #4]
    104e:	4694      	mov	ip, r2
    1050:	4a18      	ldr	r2, [pc, #96]	; (10b4 <system_clock_source_xosc_set_config+0xc4>)
    1052:	4660      	mov	r0, ip
    1054:	6110      	str	r0, [r2, #16]

	OSCCTRL->XOSCCTRL = temp;
    1056:	2201      	movs	r2, #1
    1058:	00b6      	lsls	r6, r6, #2
    105a:	2004      	movs	r0, #4
    105c:	4381      	bics	r1, r0
    105e:	4331      	orrs	r1, r6
    1060:	4640      	mov	r0, r8
    1062:	4010      	ands	r0, r2
    1064:	0180      	lsls	r0, r0, #6
    1066:	2640      	movs	r6, #64	; 0x40
    1068:	43b1      	bics	r1, r6
    106a:	4301      	orrs	r1, r0
    106c:	1c38      	adds	r0, r7, #0
    106e:	4010      	ands	r0, r2
    1070:	01c0      	lsls	r0, r0, #7
    1072:	3640      	adds	r6, #64	; 0x40
    1074:	43b1      	bics	r1, r6
    1076:	4301      	orrs	r1, r0
    1078:	022d      	lsls	r5, r5, #8
    107a:	480f      	ldr	r0, [pc, #60]	; (10b8 <system_clock_source_xosc_set_config+0xc8>)
    107c:	4001      	ands	r1, r0
    107e:	4329      	orrs	r1, r5
    1080:	4013      	ands	r3, r2
    1082:	02da      	lsls	r2, r3, #11
    1084:	4b0d      	ldr	r3, [pc, #52]	; (10bc <system_clock_source_xosc_set_config+0xcc>)
    1086:	400b      	ands	r3, r1
    1088:	4313      	orrs	r3, r2
    108a:	0324      	lsls	r4, r4, #12
    108c:	051b      	lsls	r3, r3, #20
    108e:	0d1b      	lsrs	r3, r3, #20
    1090:	4323      	orrs	r3, r4
    1092:	4a02      	ldr	r2, [pc, #8]	; (109c <system_clock_source_xosc_set_config+0xac>)
    1094:	8213      	strh	r3, [r2, #16]
}
    1096:	bc04      	pop	{r2}
    1098:	4690      	mov	r8, r2
    109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    109c:	40000c00 	.word	0x40000c00
    10a0:	001e8480 	.word	0x001e8480
    10a4:	003d0900 	.word	0x003d0900
    10a8:	007a1200 	.word	0x007a1200
    10ac:	00f42400 	.word	0x00f42400
    10b0:	01c9c380 	.word	0x01c9c380
    10b4:	20000050 	.word	0x20000050
    10b8:	fffff8ff 	.word	0xfffff8ff
    10bc:	fffff7ff 	.word	0xfffff7ff

000010c0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    10c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10c2:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    10c4:	68c6      	ldr	r6, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    10c6:	7d03      	ldrb	r3, [r0, #20]
    10c8:	2b01      	cmp	r3, #1
    10ca:	d106      	bne.n	10da <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    10cc:	8a01      	ldrh	r1, [r0, #16]
    10ce:	3101      	adds	r1, #1
    10d0:	0049      	lsls	r1, r1, #1
    10d2:	1c30      	adds	r0, r6, #0
    10d4:	4b29      	ldr	r3, [pc, #164]	; (117c <system_clock_source_dpll_set_config+0xbc>)
    10d6:	4798      	blx	r3
    10d8:	1c06      	adds	r6, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    10da:	68a3      	ldr	r3, [r4, #8]
    10dc:	0118      	lsls	r0, r3, #4
    10de:	1c31      	adds	r1, r6, #0
    10e0:	4b26      	ldr	r3, [pc, #152]	; (117c <system_clock_source_dpll_set_config+0xbc>)
    10e2:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    10e4:	270f      	movs	r7, #15
    10e6:	4007      	ands	r7, r0
	tmpldr = (tmpldr >> 4) - 1;
    10e8:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    10ea:	7863      	ldrb	r3, [r4, #1]
    10ec:	019a      	lsls	r2, r3, #6
    10ee:	7823      	ldrb	r3, [r4, #0]
    10f0:	01db      	lsls	r3, r3, #7
    10f2:	4313      	orrs	r3, r2
    10f4:	b2db      	uxtb	r3, r3
    10f6:	4a22      	ldr	r2, [pc, #136]	; (1180 <system_clock_source_dpll_set_config+0xc0>)
    10f8:	2128      	movs	r1, #40	; 0x28
    10fa:	5453      	strb	r3, [r2, r1]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    10fc:	0439      	lsls	r1, r7, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    10fe:	1e43      	subs	r3, r0, #1
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    1100:	051b      	lsls	r3, r3, #20
    1102:	0d1b      	lsrs	r3, r3, #20
	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1104:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    1106:	62d3      	str	r3, [r2, #44]	; 0x2c
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    1108:	1c15      	adds	r5, r2, #0
    110a:	2138      	movs	r1, #56	; 0x38
    110c:	2204      	movs	r2, #4
    110e:	5c6b      	ldrb	r3, [r5, r1]
    1110:	4213      	tst	r3, r2
    1112:	d1fc      	bne.n	110e <system_clock_source_dpll_set_config+0x4e>
	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    1114:	78e1      	ldrb	r1, [r4, #3]
    1116:	00c9      	lsls	r1, r1, #3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1118:	78a3      	ldrb	r3, [r4, #2]
    111a:	031b      	lsls	r3, r3, #12
    111c:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    111e:	7923      	ldrb	r3, [r4, #4]
    1120:	009b      	lsls	r3, r3, #2
    1122:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    1124:	7ca3      	ldrb	r3, [r4, #18]
    1126:	2203      	movs	r2, #3
    1128:	4694      	mov	ip, r2
    112a:	4013      	ands	r3, r2
    112c:	4319      	orrs	r1, r3

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    112e:	8a25      	ldrh	r5, [r4, #16]
    1130:	042d      	lsls	r5, r5, #16
    1132:	4a14      	ldr	r2, [pc, #80]	; (1184 <system_clock_source_dpll_set_config+0xc4>)
    1134:	1c2b      	adds	r3, r5, #0
    1136:	4013      	ands	r3, r2
    1138:	4319      	orrs	r1, r3
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    113a:	7ce3      	ldrb	r3, [r4, #19]
    113c:	021b      	lsls	r3, r3, #8
    113e:	22e0      	movs	r2, #224	; 0xe0
    1140:	00d2      	lsls	r2, r2, #3
    1142:	4013      	ands	r3, r2
    1144:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1146:	7d22      	ldrb	r2, [r4, #20]
    1148:	0112      	lsls	r2, r2, #4
    114a:	2330      	movs	r3, #48	; 0x30
    114c:	4013      	ands	r3, r2
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    114e:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    1150:	4a0b      	ldr	r2, [pc, #44]	; (1180 <system_clock_source_dpll_set_config+0xc0>)
    1152:	6313      	str	r3, [r2, #48]	; 0x30
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    1154:	7d63      	ldrb	r3, [r4, #21]
    1156:	4661      	mov	r1, ip
    1158:	400b      	ands	r3, r1
    115a:	3131      	adds	r1, #49	; 0x31
    115c:	5453      	strb	r3, [r2, r1]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    115e:	1c15      	adds	r5, r2, #0
    1160:	3104      	adds	r1, #4
    1162:	2208      	movs	r2, #8
    1164:	5c6b      	ldrb	r3, [r5, r1]
    1166:	4213      	tst	r3, r2
    1168:	d1fc      	bne.n	1164 <system_clock_source_dpll_set_config+0xa4>
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
    116a:	0100      	lsls	r0, r0, #4
    116c:	183f      	adds	r7, r7, r0
    116e:	437e      	muls	r6, r7
    1170:	7d67      	ldrb	r7, [r4, #21]
    1172:	3704      	adds	r7, #4
    1174:	40fe      	lsrs	r6, r7
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    1176:	4b04      	ldr	r3, [pc, #16]	; (1188 <system_clock_source_dpll_set_config+0xc8>)
    1178:	60de      	str	r6, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
}
    117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    117c:	00001bed 	.word	0x00001bed
    1180:	40000c00 	.word	0x40000c00
    1184:	07ff0000 	.word	0x07ff0000
    1188:	20000050 	.word	0x20000050

0000118c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    118c:	2808      	cmp	r0, #8
    118e:	d803      	bhi.n	1198 <system_clock_source_enable+0xc>
    1190:	0080      	lsls	r0, r0, #2
    1192:	4b29      	ldr	r3, [pc, #164]	; (1238 <system_clock_source_enable+0xac>)
    1194:	581b      	ldr	r3, [r3, r0]
    1196:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1198:	2017      	movs	r0, #23
    119a:	e04b      	b.n	1234 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    119c:	4a27      	ldr	r2, [pc, #156]	; (123c <system_clock_source_enable+0xb0>)
    119e:	7d11      	ldrb	r1, [r2, #20]
    11a0:	2302      	movs	r3, #2
    11a2:	430b      	orrs	r3, r1
    11a4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    11a6:	2000      	movs	r0, #0
    11a8:	e044      	b.n	1234 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    11aa:	4a25      	ldr	r2, [pc, #148]	; (1240 <system_clock_source_enable+0xb4>)
    11ac:	6991      	ldr	r1, [r2, #24]
    11ae:	2302      	movs	r3, #2
    11b0:	430b      	orrs	r3, r1
    11b2:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11b4:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    11b6:	e03d      	b.n	1234 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    11b8:	4a20      	ldr	r2, [pc, #128]	; (123c <system_clock_source_enable+0xb0>)
    11ba:	8a11      	ldrh	r1, [r2, #16]
    11bc:	2302      	movs	r3, #2
    11be:	430b      	orrs	r3, r1
    11c0:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11c2:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    11c4:	e036      	b.n	1234 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    11c6:	4a1e      	ldr	r2, [pc, #120]	; (1240 <system_clock_source_enable+0xb4>)
    11c8:	6951      	ldr	r1, [r2, #20]
    11ca:	2302      	movs	r3, #2
    11cc:	430b      	orrs	r3, r1
    11ce:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11d0:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    11d2:	e02f      	b.n	1234 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    11d4:	491b      	ldr	r1, [pc, #108]	; (1244 <system_clock_source_enable+0xb8>)
    11d6:	680b      	ldr	r3, [r1, #0]
    11d8:	2202      	movs	r2, #2
    11da:	4313      	orrs	r3, r2
    11dc:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    11de:	4b17      	ldr	r3, [pc, #92]	; (123c <system_clock_source_enable+0xb0>)
    11e0:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    11e2:	1c19      	adds	r1, r3, #0
    11e4:	32fe      	adds	r2, #254	; 0xfe
    11e6:	68cb      	ldr	r3, [r1, #12]
    11e8:	4213      	tst	r3, r2
    11ea:	d0fc      	beq.n	11e6 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11ec:	4a15      	ldr	r2, [pc, #84]	; (1244 <system_clock_source_enable+0xb8>)
    11ee:	6891      	ldr	r1, [r2, #8]
    11f0:	4b12      	ldr	r3, [pc, #72]	; (123c <system_clock_source_enable+0xb0>)
    11f2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11f4:	6852      	ldr	r2, [r2, #4]
    11f6:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    11f8:	2200      	movs	r2, #0
    11fa:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    11fc:	1c19      	adds	r1, r3, #0
    11fe:	3201      	adds	r2, #1
    1200:	32ff      	adds	r2, #255	; 0xff
    1202:	68cb      	ldr	r3, [r1, #12]
    1204:	4213      	tst	r3, r2
    1206:	d0fc      	beq.n	1202 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1208:	4b0e      	ldr	r3, [pc, #56]	; (1244 <system_clock_source_enable+0xb8>)
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	b29b      	uxth	r3, r3
    120e:	4a0b      	ldr	r2, [pc, #44]	; (123c <system_clock_source_enable+0xb0>)
    1210:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1212:	2000      	movs	r0, #0
    1214:	e00e      	b.n	1234 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1216:	4909      	ldr	r1, [pc, #36]	; (123c <system_clock_source_enable+0xb0>)
    1218:	2228      	movs	r2, #40	; 0x28
    121a:	5c88      	ldrb	r0, [r1, r2]
    121c:	2302      	movs	r3, #2
    121e:	4303      	orrs	r3, r0
    1220:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1222:	1c08      	adds	r0, r1, #0
    1224:	2138      	movs	r1, #56	; 0x38
    1226:	3a26      	subs	r2, #38	; 0x26
    1228:	5c43      	ldrb	r3, [r0, r1]
    122a:	4213      	tst	r3, r2
    122c:	d1fc      	bne.n	1228 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    122e:	2000      	movs	r0, #0
    1230:	e000      	b.n	1234 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1232:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1234:	4770      	bx	lr
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	00001eb0 	.word	0x00001eb0
    123c:	40000c00 	.word	0x40000c00
    1240:	40001000 	.word	0x40001000
    1244:	20000050 	.word	0x20000050

00001248 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1248:	b5f0      	push	{r4, r5, r6, r7, lr}
    124a:	464f      	mov	r7, r9
    124c:	4646      	mov	r6, r8
    124e:	b4c0      	push	{r6, r7}
    1250:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1252:	2280      	movs	r2, #128	; 0x80
    1254:	0052      	lsls	r2, r2, #1
    1256:	4b54      	ldr	r3, [pc, #336]	; (13a8 <system_clock_init+0x160>)
    1258:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    125a:	3afd      	subs	r2, #253	; 0xfd
    125c:	4b53      	ldr	r3, [pc, #332]	; (13ac <system_clock_init+0x164>)
    125e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1260:	4953      	ldr	r1, [pc, #332]	; (13b0 <system_clock_init+0x168>)
    1262:	684b      	ldr	r3, [r1, #4]
    1264:	321b      	adds	r2, #27
    1266:	4393      	bics	r3, r2
    1268:	3a1c      	subs	r2, #28
    126a:	4313      	orrs	r3, r2
    126c:	604b      	str	r3, [r1, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    126e:	2380      	movs	r3, #128	; 0x80
    1270:	05db      	lsls	r3, r3, #23
    1272:	789b      	ldrb	r3, [r3, #2]
    1274:	2b02      	cmp	r3, #2
    1276:	d009      	beq.n	128c <system_clock_init+0x44>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1278:	2380      	movs	r3, #128	; 0x80
    127a:	05db      	lsls	r3, r3, #23
    127c:	3a01      	subs	r2, #1
    127e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1280:	3201      	adds	r2, #1
    1282:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1284:	1c1a      	adds	r2, r3, #0
    1286:	7993      	ldrb	r3, [r2, #6]
    1288:	2b00      	cmp	r3, #0
    128a:	d0fc      	beq.n	1286 <system_clock_init+0x3e>
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    128c:	a809      	add	r0, sp, #36	; 0x24
    128e:	2400      	movs	r4, #0
    1290:	7004      	strb	r4, [r0, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
	config->auto_gain_control = true;
    1292:	2501      	movs	r5, #1
    1294:	7085      	strb	r5, [r0, #2]
	config->frequency         = 12000000UL;
	config->run_in_standby    = false;
    1296:	7204      	strb	r4, [r0, #8]
	config->on_demand         = true;
    1298:	7245      	strb	r5, [r0, #9]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    129a:	230f      	movs	r3, #15
    129c:	7043      	strb	r3, [r0, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    129e:	26e1      	movs	r6, #225	; 0xe1
    12a0:	0436      	lsls	r6, r6, #16
    12a2:	6046      	str	r6, [r0, #4]
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;

	system_clock_source_xosc_set_config(&xosc_conf);
    12a4:	4b43      	ldr	r3, [pc, #268]	; (13b4 <system_clock_init+0x16c>)
    12a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    12a8:	2000      	movs	r0, #0
    12aa:	4f43      	ldr	r7, [pc, #268]	; (13b8 <system_clock_init+0x170>)
    12ac:	47b8      	blx	r7
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    12ae:	4b3e      	ldr	r3, [pc, #248]	; (13a8 <system_clock_init+0x160>)
    12b0:	7d1a      	ldrb	r2, [r3, #20]
    12b2:	217f      	movs	r1, #127	; 0x7f
    12b4:	400a      	ands	r2, r1
    12b6:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    12b8:	7d1a      	ldrb	r2, [r3, #20]
    12ba:	393f      	subs	r1, #63	; 0x3f
    12bc:	438a      	bics	r2, r1
    12be:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    12c0:	4b3e      	ldr	r3, [pc, #248]	; (13bc <system_clock_init+0x174>)
    12c2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    12c4:	466b      	mov	r3, sp
    12c6:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    12c8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    12ca:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    12cc:	2308      	movs	r3, #8
    12ce:	466a      	mov	r2, sp
    12d0:	7013      	strb	r3, [r2, #0]
    12d2:	3b06      	subs	r3, #6
    12d4:	9301      	str	r3, [sp, #4]
    12d6:	2001      	movs	r0, #1
    12d8:	4669      	mov	r1, sp
    12da:	4b39      	ldr	r3, [pc, #228]	; (13c0 <system_clock_init+0x178>)
    12dc:	4699      	mov	r9, r3
    12de:	4798      	blx	r3
    12e0:	2001      	movs	r0, #1
    12e2:	4b38      	ldr	r3, [pc, #224]	; (13c4 <system_clock_init+0x17c>)
    12e4:	4698      	mov	r8, r3
    12e6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    12e8:	466b      	mov	r3, sp
    12ea:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    12ec:	721c      	strb	r4, [r3, #8]
    12ee:	701c      	strb	r4, [r3, #0]
    12f0:	2304      	movs	r3, #4
    12f2:	9301      	str	r3, [sp, #4]
    12f4:	466b      	mov	r3, sp
    12f6:	725d      	strb	r5, [r3, #9]
    12f8:	2006      	movs	r0, #6
    12fa:	4669      	mov	r1, sp
    12fc:	47c8      	blx	r9
    12fe:	2006      	movs	r0, #6
    1300:	47c0      	blx	r8
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    1302:	a803      	add	r0, sp, #12
    1304:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    1306:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    1308:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;

	config->output_frequency    = 48000000;
    130a:	4b2f      	ldr	r3, [pc, #188]	; (13c8 <system_clock_init+0x180>)
    130c:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    130e:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    1310:	7544      	strb	r4, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1312:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1314:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    1316:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    1318:	2301      	movs	r3, #1
    131a:	7103      	strb	r3, [r0, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    131c:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    131e:	60c6      	str	r6, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    1320:	4b2a      	ldr	r3, [pc, #168]	; (13cc <system_clock_init+0x184>)
    1322:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    1324:	2008      	movs	r0, #8
    1326:	47b8      	blx	r7
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    1328:	481f      	ldr	r0, [pc, #124]	; (13a8 <system_clock_init+0x160>)
    132a:	213c      	movs	r1, #60	; 0x3c
    132c:	2203      	movs	r2, #3
    132e:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1330:	4013      	ands	r3, r2
    1332:	2b03      	cmp	r3, #3
    1334:	d1fb      	bne.n	132e <system_clock_init+0xe6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    1336:	491c      	ldr	r1, [pc, #112]	; (13a8 <system_clock_init+0x160>)
    1338:	2228      	movs	r2, #40	; 0x28
    133a:	5c8b      	ldrb	r3, [r1, r2]
    133c:	2080      	movs	r0, #128	; 0x80
    133e:	4240      	negs	r0, r0
    1340:	4303      	orrs	r3, r0
    1342:	548b      	strb	r3, [r1, r2]
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1344:	4c22      	ldr	r4, [pc, #136]	; (13d0 <system_clock_init+0x188>)
    1346:	2301      	movs	r3, #1
    1348:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    134a:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    134c:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    134e:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    1350:	2300      	movs	r3, #0
    1352:	466a      	mov	r2, sp
    1354:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1356:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    1358:	7253      	strb	r3, [r2, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    135a:	3308      	adds	r3, #8
    135c:	7013      	strb	r3, [r2, #0]
    135e:	2000      	movs	r0, #0
    1360:	4669      	mov	r1, sp
    1362:	4b17      	ldr	r3, [pc, #92]	; (13c0 <system_clock_init+0x178>)
    1364:	4798      	blx	r3
    1366:	2000      	movs	r0, #0
    1368:	4b16      	ldr	r3, [pc, #88]	; (13c4 <system_clock_init+0x17c>)
    136a:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    136c:	2000      	movs	r0, #0
    136e:	4b19      	ldr	r3, [pc, #100]	; (13d4 <system_clock_init+0x18c>)
    1370:	4798      	blx	r3
    1372:	7921      	ldrb	r1, [r4, #4]
    1374:	b2c9      	uxtb	r1, r1
    1376:	4b18      	ldr	r3, [pc, #96]	; (13d8 <system_clock_init+0x190>)
    1378:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    137a:	4b18      	ldr	r3, [pc, #96]	; (13dc <system_clock_init+0x194>)
    137c:	4298      	cmp	r0, r3
    137e:	d80e      	bhi.n	139e <system_clock_init+0x156>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1380:	2380      	movs	r3, #128	; 0x80
    1382:	05db      	lsls	r3, r3, #23
    1384:	789b      	ldrb	r3, [r3, #2]
    1386:	2b00      	cmp	r3, #0
    1388:	d009      	beq.n	139e <system_clock_init+0x156>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    138a:	2380      	movs	r3, #128	; 0x80
    138c:	05db      	lsls	r3, r3, #23
    138e:	2201      	movs	r2, #1
    1390:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1392:	2200      	movs	r2, #0
    1394:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1396:	1c1a      	adds	r2, r3, #0
    1398:	7993      	ldrb	r3, [r2, #6]
    139a:	2b00      	cmp	r3, #0
    139c:	d0fc      	beq.n	1398 <system_clock_init+0x150>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    139e:	b00d      	add	sp, #52	; 0x34
    13a0:	bc0c      	pop	{r2, r3}
    13a2:	4690      	mov	r8, r2
    13a4:	4699      	mov	r9, r3
    13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a8:	40000c00 	.word	0x40000c00
    13ac:	40001400 	.word	0x40001400
    13b0:	41004000 	.word	0x41004000
    13b4:	00000ff1 	.word	0x00000ff1
    13b8:	0000118d 	.word	0x0000118d
    13bc:	000013e1 	.word	0x000013e1
    13c0:	00001405 	.word	0x00001405
    13c4:	000014b1 	.word	0x000014b1
    13c8:	02dc6c00 	.word	0x02dc6c00
    13cc:	000010c1 	.word	0x000010c1
    13d0:	40000400 	.word	0x40000400
    13d4:	000014f1 	.word	0x000014f1
    13d8:	00001bed 	.word	0x00001bed
    13dc:	00b71b00 	.word	0x00b71b00

000013e0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    13e0:	4a06      	ldr	r2, [pc, #24]	; (13fc <system_gclk_init+0x1c>)
    13e2:	6951      	ldr	r1, [r2, #20]
    13e4:	2340      	movs	r3, #64	; 0x40
    13e6:	430b      	orrs	r3, r1
    13e8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    13ea:	2201      	movs	r2, #1
    13ec:	4b04      	ldr	r3, [pc, #16]	; (1400 <system_gclk_init+0x20>)
    13ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    13f0:	1c19      	adds	r1, r3, #0
    13f2:	780b      	ldrb	r3, [r1, #0]
    13f4:	4213      	tst	r3, r2
    13f6:	d1fc      	bne.n	13f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    13f8:	4770      	bx	lr
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	40000400 	.word	0x40000400
    1400:	40001800 	.word	0x40001800

00001404 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1408:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    140a:	784b      	ldrb	r3, [r1, #1]
    140c:	2b00      	cmp	r3, #0
    140e:	d002      	beq.n	1416 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1410:	2380      	movs	r3, #128	; 0x80
    1412:	00db      	lsls	r3, r3, #3
    1414:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1416:	7a4b      	ldrb	r3, [r1, #9]
    1418:	2b00      	cmp	r3, #0
    141a:	d002      	beq.n	1422 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    141c:	2380      	movs	r3, #128	; 0x80
    141e:	011b      	lsls	r3, r3, #4
    1420:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1422:	684a      	ldr	r2, [r1, #4]
    1424:	2a01      	cmp	r2, #1
    1426:	d917      	bls.n	1458 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1428:	1e53      	subs	r3, r2, #1
    142a:	421a      	tst	r2, r3
    142c:	d10f      	bne.n	144e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    142e:	2a02      	cmp	r2, #2
    1430:	d906      	bls.n	1440 <system_gclk_gen_set_config+0x3c>
    1432:	2302      	movs	r3, #2
    1434:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1436:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1438:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    143a:	429a      	cmp	r2, r3
    143c:	d8fb      	bhi.n	1436 <system_gclk_gen_set_config+0x32>
    143e:	e000      	b.n	1442 <system_gclk_gen_set_config+0x3e>
    1440:	2000      	movs	r0, #0
    1442:	2380      	movs	r3, #128	; 0x80
    1444:	015b      	lsls	r3, r3, #5
    1446:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1448:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    144a:	4305      	orrs	r5, r0
    144c:	e004      	b.n	1458 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    144e:	0412      	lsls	r2, r2, #16
    1450:	2380      	movs	r3, #128	; 0x80
    1452:	009b      	lsls	r3, r3, #2
    1454:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1456:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1458:	7a0b      	ldrb	r3, [r1, #8]
    145a:	2b00      	cmp	r3, #0
    145c:	d002      	beq.n	1464 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    145e:	2380      	movs	r3, #128	; 0x80
    1460:	019b      	lsls	r3, r3, #6
    1462:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1464:	2604      	movs	r6, #4
    1466:	40a6      	lsls	r6, r4
    1468:	490d      	ldr	r1, [pc, #52]	; (14a0 <system_gclk_gen_set_config+0x9c>)
    146a:	4a0e      	ldr	r2, [pc, #56]	; (14a4 <system_gclk_gen_set_config+0xa0>)
    146c:	684b      	ldr	r3, [r1, #4]
    146e:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1470:	421e      	tst	r6, r3
    1472:	d1fb      	bne.n	146c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1474:	4b0c      	ldr	r3, [pc, #48]	; (14a8 <system_gclk_gen_set_config+0xa4>)
    1476:	4798      	blx	r3
    1478:	00a4      	lsls	r4, r4, #2
    147a:	4b09      	ldr	r3, [pc, #36]	; (14a0 <system_gclk_gen_set_config+0x9c>)
    147c:	469c      	mov	ip, r3
    147e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1480:	6a20      	ldr	r0, [r4, #32]
    1482:	2380      	movs	r3, #128	; 0x80
    1484:	005b      	lsls	r3, r3, #1
    1486:	4018      	ands	r0, r3
    1488:	4328      	orrs	r0, r5
    148a:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    148c:	4661      	mov	r1, ip
    148e:	4a05      	ldr	r2, [pc, #20]	; (14a4 <system_gclk_gen_set_config+0xa0>)
    1490:	684b      	ldr	r3, [r1, #4]
    1492:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1494:	421e      	tst	r6, r3
    1496:	d1fb      	bne.n	1490 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1498:	4b04      	ldr	r3, [pc, #16]	; (14ac <system_gclk_gen_set_config+0xa8>)
    149a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	40001800 	.word	0x40001800
    14a4:	000007fc 	.word	0x000007fc
    14a8:	00000eed 	.word	0x00000eed
    14ac:	00000f2d 	.word	0x00000f2d

000014b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    14b0:	b510      	push	{r4, lr}
    14b2:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14b4:	2204      	movs	r2, #4
    14b6:	4082      	lsls	r2, r0
    14b8:	4809      	ldr	r0, [pc, #36]	; (14e0 <system_gclk_gen_enable+0x30>)
    14ba:	490a      	ldr	r1, [pc, #40]	; (14e4 <system_gclk_gen_enable+0x34>)
    14bc:	6843      	ldr	r3, [r0, #4]
    14be:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    14c0:	421a      	tst	r2, r3
    14c2:	d1fb      	bne.n	14bc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14c4:	4b08      	ldr	r3, [pc, #32]	; (14e8 <system_gclk_gen_enable+0x38>)
    14c6:	4798      	blx	r3
    14c8:	00a4      	lsls	r4, r4, #2
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <system_gclk_gen_enable+0x30>)
    14cc:	469c      	mov	ip, r3
    14ce:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    14d0:	6a23      	ldr	r3, [r4, #32]
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	0052      	lsls	r2, r2, #1
    14d6:	4313      	orrs	r3, r2
    14d8:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14da:	4b04      	ldr	r3, [pc, #16]	; (14ec <system_gclk_gen_enable+0x3c>)
    14dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14de:	bd10      	pop	{r4, pc}
    14e0:	40001800 	.word	0x40001800
    14e4:	000007fc 	.word	0x000007fc
    14e8:	00000eed 	.word	0x00000eed
    14ec:	00000f2d 	.word	0x00000f2d

000014f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f2:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14f4:	2204      	movs	r2, #4
    14f6:	4082      	lsls	r2, r0
    14f8:	4812      	ldr	r0, [pc, #72]	; (1544 <system_gclk_gen_get_hz+0x54>)
    14fa:	4913      	ldr	r1, [pc, #76]	; (1548 <system_gclk_gen_get_hz+0x58>)
    14fc:	6843      	ldr	r3, [r0, #4]
    14fe:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1500:	421a      	tst	r2, r3
    1502:	d1fb      	bne.n	14fc <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1504:	4b11      	ldr	r3, [pc, #68]	; (154c <system_gclk_gen_get_hz+0x5c>)
    1506:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1508:	4f0e      	ldr	r7, [pc, #56]	; (1544 <system_gclk_gen_get_hz+0x54>)
    150a:	3408      	adds	r4, #8
    150c:	00a4      	lsls	r4, r4, #2
    150e:	59e3      	ldr	r3, [r4, r7]
    1510:	200f      	movs	r0, #15
    1512:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <system_gclk_gen_get_hz+0x60>)
    1516:	4798      	blx	r3
    1518:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    151a:	59e5      	ldr	r5, [r4, r7]
    151c:	04ed      	lsls	r5, r5, #19
    151e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1520:	59e4      	ldr	r4, [r4, r7]
    1522:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1524:	4b0b      	ldr	r3, [pc, #44]	; (1554 <system_gclk_gen_get_hz+0x64>)
    1526:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1528:	2d00      	cmp	r5, #0
    152a:	d107      	bne.n	153c <system_gclk_gen_get_hz+0x4c>
    152c:	2c01      	cmp	r4, #1
    152e:	d907      	bls.n	1540 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1530:	1c30      	adds	r0, r6, #0
    1532:	1c21      	adds	r1, r4, #0
    1534:	4b08      	ldr	r3, [pc, #32]	; (1558 <system_gclk_gen_get_hz+0x68>)
    1536:	4798      	blx	r3
    1538:	1c06      	adds	r6, r0, #0
    153a:	e001      	b.n	1540 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    153c:	3401      	adds	r4, #1
    153e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1540:	1c30      	adds	r0, r6, #0
    1542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1544:	40001800 	.word	0x40001800
    1548:	000007fc 	.word	0x000007fc
    154c:	00000eed 	.word	0x00000eed
    1550:	00000f5d 	.word	0x00000f5d
    1554:	00000f2d 	.word	0x00000f2d
    1558:	00001bed 	.word	0x00001bed

0000155c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    155c:	b510      	push	{r4, lr}
    155e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <system_gclk_chan_enable+0x28>)
    1562:	4798      	blx	r3
    1564:	00a4      	lsls	r4, r4, #2
    1566:	4b08      	ldr	r3, [pc, #32]	; (1588 <system_gclk_chan_enable+0x2c>)
    1568:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    156a:	2280      	movs	r2, #128	; 0x80
    156c:	5881      	ldr	r1, [r0, r2]
    156e:	2340      	movs	r3, #64	; 0x40
    1570:	430b      	orrs	r3, r1
    1572:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1574:	2180      	movs	r1, #128	; 0x80
    1576:	3a40      	subs	r2, #64	; 0x40
    1578:	5843      	ldr	r3, [r0, r1]
    157a:	421a      	tst	r2, r3
    157c:	d0fc      	beq.n	1578 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    157e:	4b03      	ldr	r3, [pc, #12]	; (158c <system_gclk_chan_enable+0x30>)
    1580:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1582:	bd10      	pop	{r4, pc}
    1584:	00000eed 	.word	0x00000eed
    1588:	40001800 	.word	0x40001800
    158c:	00000f2d 	.word	0x00000f2d

00001590 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1590:	b510      	push	{r4, lr}
    1592:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1594:	4b08      	ldr	r3, [pc, #32]	; (15b8 <system_gclk_chan_disable+0x28>)
    1596:	4798      	blx	r3
    1598:	00a4      	lsls	r4, r4, #2
    159a:	4b08      	ldr	r3, [pc, #32]	; (15bc <system_gclk_chan_disable+0x2c>)
    159c:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    159e:	2280      	movs	r2, #128	; 0x80
    15a0:	5883      	ldr	r3, [r0, r2]
    15a2:	2140      	movs	r1, #64	; 0x40
    15a4:	438b      	bics	r3, r1
    15a6:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    15a8:	3140      	adds	r1, #64	; 0x40
    15aa:	3a40      	subs	r2, #64	; 0x40
    15ac:	5843      	ldr	r3, [r0, r1]
    15ae:	421a      	tst	r2, r3
    15b0:	d1fc      	bne.n	15ac <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15b2:	4b03      	ldr	r3, [pc, #12]	; (15c0 <system_gclk_chan_disable+0x30>)
    15b4:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00000eed 	.word	0x00000eed
    15bc:	40001800 	.word	0x40001800
    15c0:	00000f2d 	.word	0x00000f2d

000015c4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    15c4:	b538      	push	{r3, r4, r5, lr}
    15c6:	1c04      	adds	r4, r0, #0
    15c8:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <system_gclk_chan_set_config+0x1c>)
    15cc:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    15ce:	782b      	ldrb	r3, [r5, #0]
    15d0:	220f      	movs	r2, #15
    15d2:	4013      	ands	r3, r2
    15d4:	3420      	adds	r4, #32
    15d6:	00a4      	lsls	r4, r4, #2
    15d8:	4a02      	ldr	r2, [pc, #8]	; (15e4 <system_gclk_chan_set_config+0x20>)
    15da:	50a3      	str	r3, [r4, r2]


}
    15dc:	bd38      	pop	{r3, r4, r5, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00001591 	.word	0x00001591
    15e4:	40001800 	.word	0x40001800

000015e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    15e8:	b510      	push	{r4, lr}
    15ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15ec:	4b06      	ldr	r3, [pc, #24]	; (1608 <system_gclk_chan_get_hz+0x20>)
    15ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    15f0:	3420      	adds	r4, #32
    15f2:	00a4      	lsls	r4, r4, #2
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <system_gclk_chan_get_hz+0x24>)
    15f6:	58e3      	ldr	r3, [r4, r3]
    15f8:	240f      	movs	r4, #15
    15fa:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_gclk_chan_get_hz+0x28>)
    15fe:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1600:	1c20      	adds	r0, r4, #0
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_gclk_chan_get_hz+0x2c>)
    1604:	4798      	blx	r3
}
    1606:	bd10      	pop	{r4, pc}
    1608:	00000eed 	.word	0x00000eed
    160c:	40001800 	.word	0x40001800
    1610:	00000f2d 	.word	0x00000f2d
    1614:	000014f1 	.word	0x000014f1

00001618 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1618:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    161a:	78d3      	ldrb	r3, [r2, #3]
    161c:	2b00      	cmp	r3, #0
    161e:	d11e      	bne.n	165e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1620:	7814      	ldrb	r4, [r2, #0]
    1622:	2c80      	cmp	r4, #128	; 0x80
    1624:	d004      	beq.n	1630 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1626:	0624      	lsls	r4, r4, #24
    1628:	2380      	movs	r3, #128	; 0x80
    162a:	025b      	lsls	r3, r3, #9
    162c:	431c      	orrs	r4, r3
    162e:	e000      	b.n	1632 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1630:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1632:	7853      	ldrb	r3, [r2, #1]
    1634:	2502      	movs	r5, #2
    1636:	43ab      	bics	r3, r5
    1638:	d10a      	bne.n	1650 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    163a:	7893      	ldrb	r3, [r2, #2]
    163c:	2b00      	cmp	r3, #0
    163e:	d103      	bne.n	1648 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1640:	2380      	movs	r3, #128	; 0x80
    1642:	029b      	lsls	r3, r3, #10
    1644:	431c      	orrs	r4, r3
    1646:	e002      	b.n	164e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1648:	23c0      	movs	r3, #192	; 0xc0
    164a:	02db      	lsls	r3, r3, #11
    164c:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    164e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1650:	7853      	ldrb	r3, [r2, #1]
    1652:	3b01      	subs	r3, #1
    1654:	2b01      	cmp	r3, #1
    1656:	d812      	bhi.n	167e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1658:	4b18      	ldr	r3, [pc, #96]	; (16bc <_system_pinmux_config+0xa4>)
    165a:	401c      	ands	r4, r3
    165c:	e00f      	b.n	167e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    165e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1660:	040b      	lsls	r3, r1, #16
    1662:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1664:	24a0      	movs	r4, #160	; 0xa0
    1666:	05e4      	lsls	r4, r4, #23
    1668:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    166a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    166c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    166e:	24d0      	movs	r4, #208	; 0xd0
    1670:	0624      	lsls	r4, r4, #24
    1672:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1674:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1676:	78d3      	ldrb	r3, [r2, #3]
    1678:	2b00      	cmp	r3, #0
    167a:	d018      	beq.n	16ae <_system_pinmux_config+0x96>
    167c:	e01c      	b.n	16b8 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    167e:	040b      	lsls	r3, r1, #16
    1680:	0c1b      	lsrs	r3, r3, #16
    1682:	25a0      	movs	r5, #160	; 0xa0
    1684:	05ed      	lsls	r5, r5, #23
    1686:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1688:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    168a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    168c:	0c0b      	lsrs	r3, r1, #16
    168e:	25d0      	movs	r5, #208	; 0xd0
    1690:	062d      	lsls	r5, r5, #24
    1692:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1694:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1696:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1698:	78d3      	ldrb	r3, [r2, #3]
    169a:	2b00      	cmp	r3, #0
    169c:	d10c      	bne.n	16b8 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    169e:	0363      	lsls	r3, r4, #13
    16a0:	d505      	bpl.n	16ae <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    16a2:	7893      	ldrb	r3, [r2, #2]
    16a4:	2b01      	cmp	r3, #1
    16a6:	d101      	bne.n	16ac <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    16a8:	6181      	str	r1, [r0, #24]
    16aa:	e000      	b.n	16ae <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    16ac:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16ae:	7853      	ldrb	r3, [r2, #1]
    16b0:	3b01      	subs	r3, #1
    16b2:	2b01      	cmp	r3, #1
    16b4:	d800      	bhi.n	16b8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    16b6:	6081      	str	r1, [r0, #8]
		}
	}
}
    16b8:	bd30      	pop	{r4, r5, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	fffbffff 	.word	0xfffbffff

000016c0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    16c0:	b508      	push	{r3, lr}
    16c2:	1c03      	adds	r3, r0, #0
    16c4:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16c6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16c8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16ca:	2900      	cmp	r1, #0
    16cc:	d104      	bne.n	16d8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    16ce:	0958      	lsrs	r0, r3, #5
    16d0:	01c0      	lsls	r0, r0, #7
    16d2:	4905      	ldr	r1, [pc, #20]	; (16e8 <system_pinmux_pin_set_config+0x28>)
    16d4:	468c      	mov	ip, r1
    16d6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16d8:	211f      	movs	r1, #31
    16da:	400b      	ands	r3, r1
    16dc:	391e      	subs	r1, #30
    16de:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    16e0:	4b02      	ldr	r3, [pc, #8]	; (16ec <system_pinmux_pin_set_config+0x2c>)
    16e2:	4798      	blx	r3
}
    16e4:	bd08      	pop	{r3, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	40002800 	.word	0x40002800
    16ec:	00001619 	.word	0x00001619

000016f0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16f0:	4770      	bx	lr
    16f2:	46c0      	nop			; (mov r8, r8)

000016f4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16f4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16f6:	4b09      	ldr	r3, [pc, #36]	; (171c <system_init+0x28>)
    16f8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    16fa:	4b09      	ldr	r3, [pc, #36]	; (1720 <system_init+0x2c>)
    16fc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    16fe:	4b09      	ldr	r3, [pc, #36]	; (1724 <system_init+0x30>)
    1700:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1702:	4b09      	ldr	r3, [pc, #36]	; (1728 <system_init+0x34>)
    1704:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1706:	4b09      	ldr	r3, [pc, #36]	; (172c <system_init+0x38>)
    1708:	4798      	blx	r3
	
	
	//select_buck_regulator_as_main_vreg
	SUPC->VREG.bit.SEL = 1;	
    170a:	4909      	ldr	r1, [pc, #36]	; (1730 <system_init+0x3c>)
    170c:	698b      	ldr	r3, [r1, #24]
    170e:	220c      	movs	r2, #12
    1710:	4393      	bics	r3, r2
    1712:	3a08      	subs	r2, #8
    1714:	4313      	orrs	r3, r2
    1716:	618b      	str	r3, [r1, #24]
	
}
    1718:	bd08      	pop	{r3, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	00001249 	.word	0x00001249
    1720:	00000ee9 	.word	0x00000ee9
    1724:	000016f1 	.word	0x000016f1
    1728:	00000395 	.word	0x00000395
    172c:	000016f1 	.word	0x000016f1
    1730:	40001400 	.word	0x40001400

00001734 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1734:	e7fe      	b.n	1734 <Dummy_Handler>
    1736:	46c0      	nop			; (mov r8, r8)

00001738 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1738:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    173a:	4b1d      	ldr	r3, [pc, #116]	; (17b0 <Reset_Handler+0x78>)
    173c:	4a1d      	ldr	r2, [pc, #116]	; (17b4 <Reset_Handler+0x7c>)
    173e:	429a      	cmp	r2, r3
    1740:	d003      	beq.n	174a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1742:	4b1d      	ldr	r3, [pc, #116]	; (17b8 <Reset_Handler+0x80>)
    1744:	4a1a      	ldr	r2, [pc, #104]	; (17b0 <Reset_Handler+0x78>)
    1746:	429a      	cmp	r2, r3
    1748:	d304      	bcc.n	1754 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    174a:	4b1c      	ldr	r3, [pc, #112]	; (17bc <Reset_Handler+0x84>)
    174c:	4a1c      	ldr	r2, [pc, #112]	; (17c0 <Reset_Handler+0x88>)
    174e:	429a      	cmp	r2, r3
    1750:	d310      	bcc.n	1774 <Reset_Handler+0x3c>
    1752:	e01e      	b.n	1792 <Reset_Handler+0x5a>
    1754:	4a1b      	ldr	r2, [pc, #108]	; (17c4 <Reset_Handler+0x8c>)
    1756:	4b18      	ldr	r3, [pc, #96]	; (17b8 <Reset_Handler+0x80>)
    1758:	3303      	adds	r3, #3
    175a:	1a9b      	subs	r3, r3, r2
    175c:	089b      	lsrs	r3, r3, #2
    175e:	3301      	adds	r3, #1
    1760:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1762:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1764:	4812      	ldr	r0, [pc, #72]	; (17b0 <Reset_Handler+0x78>)
    1766:	4913      	ldr	r1, [pc, #76]	; (17b4 <Reset_Handler+0x7c>)
    1768:	588c      	ldr	r4, [r1, r2]
    176a:	5084      	str	r4, [r0, r2]
    176c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    176e:	429a      	cmp	r2, r3
    1770:	d1fa      	bne.n	1768 <Reset_Handler+0x30>
    1772:	e7ea      	b.n	174a <Reset_Handler+0x12>
    1774:	4a14      	ldr	r2, [pc, #80]	; (17c8 <Reset_Handler+0x90>)
    1776:	4b11      	ldr	r3, [pc, #68]	; (17bc <Reset_Handler+0x84>)
    1778:	3303      	adds	r3, #3
    177a:	1a9b      	subs	r3, r3, r2
    177c:	089b      	lsrs	r3, r3, #2
    177e:	3301      	adds	r3, #1
    1780:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1782:	2200      	movs	r2, #0
                *pDest++ = 0;
    1784:	480e      	ldr	r0, [pc, #56]	; (17c0 <Reset_Handler+0x88>)
    1786:	2100      	movs	r1, #0
    1788:	1814      	adds	r4, r2, r0
    178a:	6021      	str	r1, [r4, #0]
    178c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    178e:	429a      	cmp	r2, r3
    1790:	d1fa      	bne.n	1788 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1792:	4a0e      	ldr	r2, [pc, #56]	; (17cc <Reset_Handler+0x94>)
    1794:	21ff      	movs	r1, #255	; 0xff
    1796:	4b0e      	ldr	r3, [pc, #56]	; (17d0 <Reset_Handler+0x98>)
    1798:	438b      	bics	r3, r1
    179a:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    179c:	4a0d      	ldr	r2, [pc, #52]	; (17d4 <Reset_Handler+0x9c>)
    179e:	6851      	ldr	r1, [r2, #4]
    17a0:	2380      	movs	r3, #128	; 0x80
    17a2:	430b      	orrs	r3, r1
    17a4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    17a6:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <Reset_Handler+0xa0>)
    17a8:	4798      	blx	r3

        /* Branch to main function */
        main();
    17aa:	4b0c      	ldr	r3, [pc, #48]	; (17dc <Reset_Handler+0xa4>)
    17ac:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    17ae:	e7fe      	b.n	17ae <Reset_Handler+0x76>
    17b0:	20000000 	.word	0x20000000
    17b4:	00001ef4 	.word	0x00001ef4
    17b8:	20000010 	.word	0x20000010
    17bc:	20000160 	.word	0x20000160
    17c0:	20000010 	.word	0x20000010
    17c4:	20000004 	.word	0x20000004
    17c8:	20000014 	.word	0x20000014
    17cc:	e000ed00 	.word	0xe000ed00
    17d0:	00000000 	.word	0x00000000
    17d4:	41004000 	.word	0x41004000
    17d8:	00001ddd 	.word	0x00001ddd
    17dc:	00001aa9 	.word	0x00001aa9

000017e0 <extint_detection_callback>:
	extint_chan_set_config(2, &config_extint_chan);
}


void extint_detection_callback(void)
{
    17e0:	b538      	push	{r3, r4, r5, lr}
	
	X = ADXL345_GetX();
    17e2:	4b06      	ldr	r3, [pc, #24]	; (17fc <extint_detection_callback+0x1c>)
    17e4:	4798      	blx	r3
    17e6:	4b06      	ldr	r3, [pc, #24]	; (1800 <extint_detection_callback+0x20>)
    17e8:	6018      	str	r0, [r3, #0]
    17ea:	4c06      	ldr	r4, [pc, #24]	; (1804 <extint_detection_callback+0x24>)
    17ec:	2508      	movs	r5, #8
    17ee:	61a5      	str	r5, [r4, #24]
	//Y = ADXL345_GetY();
	//Z = ADXL345_GetZ();
		
	port_pin_set_output_level(PIN_PA03, 1);
	delay_us(1);
    17f0:	2001      	movs	r0, #1
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <extint_detection_callback+0x28>)
    17f4:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    17f6:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA03, 0);

}
    17f8:	bd38      	pop	{r3, r4, r5, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	0000027d 	.word	0x0000027d
    1800:	2000000c 	.word	0x2000000c
    1804:	40002800 	.word	0x40002800
    1808:	00000e99 	.word	0x00000e99

0000180c <configure_spi_master_AD5421>:
	system_pinmux_pin_set_config(PIN_PA22H_GCLK_IO6, &clk_out_pin);	
}


void configure_spi_master_AD5421(void)
{
    180c:	b5f0      	push	{r4, r5, r6, r7, lr}
    180e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1810:	4c29      	ldr	r4, [pc, #164]	; (18b8 <configure_spi_master_AD5421+0xac>)
    1812:	2312      	movs	r3, #18
    1814:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1816:	2300      	movs	r3, #0
    1818:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    181a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    181c:	a901      	add	r1, sp, #4
    181e:	2201      	movs	r2, #1
    1820:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1822:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1824:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1826:	2012      	movs	r0, #18
    1828:	4b24      	ldr	r3, [pc, #144]	; (18bc <configure_spi_master_AD5421+0xb0>)
    182a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    182c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    182e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1830:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1832:	2900      	cmp	r1, #0
    1834:	d104      	bne.n	1840 <configure_spi_master_AD5421+0x34>
		return &(ports[port_index]->Group[group_index]);
    1836:	095a      	lsrs	r2, r3, #5
    1838:	01d2      	lsls	r2, r2, #7
    183a:	4921      	ldr	r1, [pc, #132]	; (18c0 <configure_spi_master_AD5421+0xb4>)
    183c:	468c      	mov	ip, r1
    183e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1840:	251f      	movs	r5, #31
    1842:	402b      	ands	r3, r5
    1844:	2401      	movs	r4, #1
    1846:	1c21      	adds	r1, r4, #0
    1848:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    184a:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    184c:	aa02      	add	r2, sp, #8
    184e:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1850:	2300      	movs	r3, #0
    1852:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1854:	21c0      	movs	r1, #192	; 0xc0
    1856:	0389      	lsls	r1, r1, #14
    1858:	60d1      	str	r1, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    185a:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    185c:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    185e:	7494      	strb	r4, [r2, #18]
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1860:	9309      	str	r3, [sp, #36]	; 0x24
    1862:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
	//! [mux_setting]
	
	/* Configure pad 0 for MOSI */
	//! [di]
	config_spi_master.pinmux_pad0 =  PINMUX_PA16D_SERCOM3_PAD0;
    1864:	4917      	ldr	r1, [pc, #92]	; (18c4 <configure_spi_master_AD5421+0xb8>)
    1866:	6291      	str	r1, [r2, #40]	; 0x28
	//! [di]
	/* Configure pad 1 for CLOCK */
	//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;
    1868:	4917      	ldr	r1, [pc, #92]	; (18c8 <configure_spi_master_AD5421+0xbc>)
    186a:	62d1      	str	r1, [r2, #44]	; 0x2c
	//! [ss]
	/* Configure pad 2 for CS */
	//! [do]
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    186c:	2101      	movs	r1, #1
    186e:	4249      	negs	r1, r1
    1870:	6311      	str	r1, [r2, #48]	; 0x30
	//! [do]
	/* Configure pad 3 for MISO */
	//! [sck]
	config_spi_master.pinmux_pad3 = PINMUX_PA19D_SERCOM3_PAD3;
    1872:	4916      	ldr	r1, [pc, #88]	; (18cc <configure_spi_master_AD5421+0xc0>)
    1874:	6351      	str	r1, [r2, #52]	; 0x34
	//! [sck]
	
	
	config_spi_master.mode             = SPI_MODE_MASTER;
	config_spi_master.data_order       = SPI_DATA_ORDER_MSB;
	config_spi_master.transfer_mode    = SPI_TRANSFER_MODE_2;
    1876:	2180      	movs	r1, #128	; 0x80
    1878:	0589      	lsls	r1, r1, #22
    187a:	6091      	str	r1, [r2, #8]
	config_spi_master.character_size   = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master.run_in_standby   = false;
	config_spi_master.receiver_enable  = true;
	config_spi_master.generator_source = GCLK_GENERATOR_1;
    187c:	2124      	movs	r1, #36	; 0x24
    187e:	5454      	strb	r4, [r2, r1]
	config_spi_master.mode_specific.master.baudrate = 1000000;
    1880:	4913      	ldr	r1, [pc, #76]	; (18d0 <configure_spi_master_AD5421+0xc4>)
    1882:	6191      	str	r1, [r2, #24]
	config_spi_master.master_slave_select_enable = true;
    1884:	7514      	strb	r4, [r2, #20]
	config_spi_master.select_slave_low_detect_enable = false;
    1886:	74d3      	strb	r3, [r2, #19]
	
	//! [init]
	spi_init(&spi_master_instance_AD5421, SERCOM3, &config_spi_master);
    1888:	4f12      	ldr	r7, [pc, #72]	; (18d4 <configure_spi_master_AD5421+0xc8>)
    188a:	1c38      	adds	r0, r7, #0
    188c:	4912      	ldr	r1, [pc, #72]	; (18d8 <configure_spi_master_AD5421+0xcc>)
    188e:	4b13      	ldr	r3, [pc, #76]	; (18dc <configure_spi_master_AD5421+0xd0>)
    1890:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1892:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1894:	1c30      	adds	r0, r6, #0
    1896:	4b12      	ldr	r3, [pc, #72]	; (18e0 <configure_spi_master_AD5421+0xd4>)
    1898:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    189a:	4005      	ands	r5, r0
    189c:	40ac      	lsls	r4, r5
    189e:	4b11      	ldr	r3, [pc, #68]	; (18e4 <configure_spi_master_AD5421+0xd8>)
    18a0:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    18a2:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    18a4:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    18a6:	2b00      	cmp	r3, #0
    18a8:	d1fc      	bne.n	18a4 <configure_spi_master_AD5421+0x98>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    18aa:	6832      	ldr	r2, [r6, #0]
    18ac:	3302      	adds	r3, #2
    18ae:	4313      	orrs	r3, r2
    18b0:	6033      	str	r3, [r6, #0]

	//! [enable]
	spi_enable(&spi_master_instance_AD5421);
	//! [enable]

}
    18b2:	b011      	add	sp, #68	; 0x44
    18b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	2000011c 	.word	0x2000011c
    18bc:	00000ec5 	.word	0x00000ec5
    18c0:	40002800 	.word	0x40002800
    18c4:	00100003 	.word	0x00100003
    18c8:	00110003 	.word	0x00110003
    18cc:	00130003 	.word	0x00130003
    18d0:	000f4240 	.word	0x000f4240
    18d4:	20000124 	.word	0x20000124
    18d8:	42000c00 	.word	0x42000c00
    18dc:	000007d9 	.word	0x000007d9
    18e0:	00000dd1 	.word	0x00000dd1
    18e4:	e000e100 	.word	0xe000e100

000018e8 <configure_spi_master_ADXL>:

void configure_spi_master_ADXL(void)
{
    18e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ea:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    18ec:	4c29      	ldr	r4, [pc, #164]	; (1994 <configure_spi_master_ADXL+0xac>)
    18ee:	2306      	movs	r3, #6
    18f0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    18f2:	2300      	movs	r3, #0
    18f4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    18f6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    18f8:	a901      	add	r1, sp, #4
    18fa:	2201      	movs	r2, #1
    18fc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    18fe:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1900:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1902:	2006      	movs	r0, #6
    1904:	4b24      	ldr	r3, [pc, #144]	; (1998 <configure_spi_master_ADXL+0xb0>)
    1906:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1908:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    190a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    190c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    190e:	2900      	cmp	r1, #0
    1910:	d104      	bne.n	191c <configure_spi_master_ADXL+0x34>
		return &(ports[port_index]->Group[group_index]);
    1912:	095a      	lsrs	r2, r3, #5
    1914:	01d2      	lsls	r2, r2, #7
    1916:	4921      	ldr	r1, [pc, #132]	; (199c <configure_spi_master_ADXL+0xb4>)
    1918:	468c      	mov	ip, r1
    191a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    191c:	251f      	movs	r5, #31
    191e:	402b      	ands	r3, r5
    1920:	2401      	movs	r4, #1
    1922:	1c21      	adds	r1, r4, #0
    1924:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1926:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1928:	aa02      	add	r2, sp, #8
    192a:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    192c:	2300      	movs	r3, #0
    192e:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1930:	21c0      	movs	r1, #192	; 0xc0
    1932:	0389      	lsls	r1, r1, #14
    1934:	60d1      	str	r1, [r2, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1936:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1938:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    193a:	7494      	strb	r4, [r2, #18]
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    193c:	9309      	str	r3, [sp, #36]	; 0x24
    193e:	930a      	str	r3, [sp, #40]	; 0x28
	
	spi_get_config_defaults(&config_spi_master_adxl);
	
	config_spi_master_adxl.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
	
	config_spi_master_adxl.pinmux_pad0 =  PINMUX_PA04D_SERCOM0_PAD0;
    1940:	4917      	ldr	r1, [pc, #92]	; (19a0 <configure_spi_master_ADXL+0xb8>)
    1942:	6291      	str	r1, [r2, #40]	; 0x28
	
	config_spi_master_adxl.pinmux_pad1 = PINMUX_PA05D_SERCOM0_PAD1;
    1944:	4917      	ldr	r1, [pc, #92]	; (19a4 <configure_spi_master_ADXL+0xbc>)
    1946:	62d1      	str	r1, [r2, #44]	; 0x2c
	
	config_spi_master_adxl.pinmux_pad2 = PINMUX_UNUSED;
    1948:	2101      	movs	r1, #1
    194a:	4249      	negs	r1, r1
    194c:	6311      	str	r1, [r2, #48]	; 0x30
	
	
	
	config_spi_master_adxl.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    194e:	4916      	ldr	r1, [pc, #88]	; (19a8 <configure_spi_master_ADXL+0xc0>)
    1950:	6351      	str	r1, [r2, #52]	; 0x34
		
	config_spi_master_adxl.mode             = SPI_MODE_MASTER;
	config_spi_master_adxl.data_order       = SPI_DATA_ORDER_MSB;
	config_spi_master_adxl.transfer_mode    = SPI_TRANSFER_MODE_3;
    1952:	21c0      	movs	r1, #192	; 0xc0
    1954:	0589      	lsls	r1, r1, #22
    1956:	6091      	str	r1, [r2, #8]
	config_spi_master_adxl.character_size   = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master_adxl.run_in_standby   = false;
	config_spi_master_adxl.receiver_enable  = true;
	config_spi_master_adxl.generator_source = GCLK_GENERATOR_1;
    1958:	2124      	movs	r1, #36	; 0x24
    195a:	5454      	strb	r4, [r2, r1]
	config_spi_master_adxl.mode_specific.master.baudrate = 1000000;
    195c:	4913      	ldr	r1, [pc, #76]	; (19ac <configure_spi_master_ADXL+0xc4>)
    195e:	6191      	str	r1, [r2, #24]
	config_spi_master_adxl.master_slave_select_enable = true;
    1960:	7514      	strb	r4, [r2, #20]
	config_spi_master_adxl.select_slave_low_detect_enable = false;
    1962:	74d3      	strb	r3, [r2, #19]
		
	spi_init(&spi_master_instance_ADXL, SERCOM0, &config_spi_master_adxl);
    1964:	4f12      	ldr	r7, [pc, #72]	; (19b0 <configure_spi_master_ADXL+0xc8>)
    1966:	1c38      	adds	r0, r7, #0
    1968:	2184      	movs	r1, #132	; 0x84
    196a:	05c9      	lsls	r1, r1, #23
    196c:	4b11      	ldr	r3, [pc, #68]	; (19b4 <configure_spi_master_ADXL+0xcc>)
    196e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1970:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1972:	1c30      	adds	r0, r6, #0
    1974:	4b10      	ldr	r3, [pc, #64]	; (19b8 <configure_spi_master_ADXL+0xd0>)
    1976:	4798      	blx	r3
    1978:	4005      	ands	r5, r0
    197a:	40ac      	lsls	r4, r5
    197c:	4b0f      	ldr	r3, [pc, #60]	; (19bc <configure_spi_master_ADXL+0xd4>)
    197e:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1980:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1982:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1984:	2b00      	cmp	r3, #0
    1986:	d1fc      	bne.n	1982 <configure_spi_master_ADXL+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1988:	6832      	ldr	r2, [r6, #0]
    198a:	3302      	adds	r3, #2
    198c:	4313      	orrs	r3, r2
    198e:	6033      	str	r3, [r6, #0]
		
	spi_enable(&spi_master_instance_ADXL);
	

}
    1990:	b011      	add	sp, #68	; 0x44
    1992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1994:	20000120 	.word	0x20000120
    1998:	00000ec5 	.word	0x00000ec5
    199c:	40002800 	.word	0x40002800
    19a0:	00040003 	.word	0x00040003
    19a4:	00050003 	.word	0x00050003
    19a8:	00070003 	.word	0x00070003
    19ac:	000f4240 	.word	0x000f4240
    19b0:	200000e0 	.word	0x200000e0
    19b4:	000007d9 	.word	0x000007d9
    19b8:	00000dd1 	.word	0x00000dd1
    19bc:	e000e100 	.word	0xe000e100

000019c0 <SPI_Write_AD5421>:

void SPI_Write_AD5421(uint8_t* data)
{
    19c0:	b538      	push	{r3, r4, r5, lr}
    19c2:	1c01      	adds	r1, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    19c4:	4c04      	ldr	r4, [pc, #16]	; (19d8 <SPI_Write_AD5421+0x18>)
    19c6:	2580      	movs	r5, #128	; 0x80
    19c8:	02ed      	lsls	r5, r5, #11
    19ca:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA18, 0);
	spi_write_buffer_wait(&spi_master_instance_AD5421, data, 3);
    19cc:	4803      	ldr	r0, [pc, #12]	; (19dc <SPI_Write_AD5421+0x1c>)
    19ce:	2203      	movs	r2, #3
    19d0:	4b03      	ldr	r3, [pc, #12]	; (19e0 <SPI_Write_AD5421+0x20>)
    19d2:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    19d4:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA18, 1);
}
    19d6:	bd38      	pop	{r3, r4, r5, pc}
    19d8:	40002800 	.word	0x40002800
    19dc:	20000124 	.word	0x20000124
    19e0:	000009cd 	.word	0x000009cd

000019e4 <SPI_Read_AD5421>:

void SPI_Read_AD5421(uint8_t* data)
{
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	1c02      	adds	r2, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    19e8:	4c05      	ldr	r4, [pc, #20]	; (1a00 <SPI_Read_AD5421+0x1c>)
    19ea:	2580      	movs	r5, #128	; 0x80
    19ec:	02ed      	lsls	r5, r5, #11
    19ee:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA18, 0);
	//spi_read_buffer_wait(&spi_master_instance_AD5421, data, 3, 0);
	spi_transceive_buffer_wait(&spi_master_instance_AD5421, data, data, 3);
    19f0:	4804      	ldr	r0, [pc, #16]	; (1a04 <SPI_Read_AD5421+0x20>)
    19f2:	1c11      	adds	r1, r2, #0
    19f4:	2303      	movs	r3, #3
    19f6:	4e04      	ldr	r6, [pc, #16]	; (1a08 <SPI_Read_AD5421+0x24>)
    19f8:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    19fa:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA18, 1);	
}
    19fc:	bd70      	pop	{r4, r5, r6, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	40002800 	.word	0x40002800
    1a04:	20000124 	.word	0x20000124
    1a08:	00000ad1 	.word	0x00000ad1

00001a0c <SPI_Write_ADXL>:

void SPI_Write_ADXL(uint8_t* data)
{
    1a0c:	b538      	push	{r3, r4, r5, lr}
    1a0e:	1c01      	adds	r1, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a10:	4c04      	ldr	r4, [pc, #16]	; (1a24 <SPI_Write_ADXL+0x18>)
    1a12:	2540      	movs	r5, #64	; 0x40
    1a14:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA06, 0);
	spi_write_buffer_wait(&spi_master_instance_ADXL, data, 2);	
    1a16:	4804      	ldr	r0, [pc, #16]	; (1a28 <SPI_Write_ADXL+0x1c>)
    1a18:	2202      	movs	r2, #2
    1a1a:	4b04      	ldr	r3, [pc, #16]	; (1a2c <SPI_Write_ADXL+0x20>)
    1a1c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a1e:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA06, 1);
}
    1a20:	bd38      	pop	{r3, r4, r5, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	40002800 	.word	0x40002800
    1a28:	200000e0 	.word	0x200000e0
    1a2c:	000009cd 	.word	0x000009cd

00001a30 <SPI_Read_ADXL>:

void SPI_Read_ADXL(uint8_t* data)
{	
    1a30:	b570      	push	{r4, r5, r6, lr}
    1a32:	1c02      	adds	r2, r0, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a34:	4c04      	ldr	r4, [pc, #16]	; (1a48 <SPI_Read_ADXL+0x18>)
    1a36:	2540      	movs	r5, #64	; 0x40
    1a38:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PIN_PA06, 0);
	//spi_read_buffer_wait(&spi_master_instance_ADXL, data, 2, 0);
	spi_transceive_buffer_wait(&spi_master_instance_ADXL, data, data, 2);
    1a3a:	4804      	ldr	r0, [pc, #16]	; (1a4c <SPI_Read_ADXL+0x1c>)
    1a3c:	1c11      	adds	r1, r2, #0
    1a3e:	2302      	movs	r3, #2
    1a40:	4e03      	ldr	r6, [pc, #12]	; (1a50 <SPI_Read_ADXL+0x20>)
    1a42:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a44:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PIN_PA06, 1);
}
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	40002800 	.word	0x40002800
    1a4c:	200000e0 	.word	0x200000e0
    1a50:	00000ad1 	.word	0x00000ad1

00001a54 <configure_extint_channel>:


void configure_extint_channel(void)
{
    1a54:	b510      	push	{r4, lr}
    1a56:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    1a58:	ac01      	add	r4, sp, #4
    1a5a:	1c20      	adds	r0, r4, #0
    1a5c:	4b07      	ldr	r3, [pc, #28]	; (1a7c <configure_extint_channel+0x28>)
    1a5e:	4798      	blx	r3

	config_extint_chan.gpio_pin           = PIN_PA02A_EIC_EXTINT2;
    1a60:	2302      	movs	r3, #2
    1a62:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = PINMUX_PA02A_EIC_EXTINT2;
    1a64:	2280      	movs	r2, #128	; 0x80
    1a66:	0292      	lsls	r2, r2, #10
    1a68:	6062      	str	r2, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    1a6a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1a6c:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(2, &config_extint_chan);
    1a6e:	2002      	movs	r0, #2
    1a70:	1c21      	adds	r1, r4, #0
    1a72:	4b03      	ldr	r3, [pc, #12]	; (1a80 <configure_extint_channel+0x2c>)
    1a74:	4798      	blx	r3
}
    1a76:	b004      	add	sp, #16
    1a78:	bd10      	pop	{r4, pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	00000419 	.word	0x00000419
    1a80:	0000042d 	.word	0x0000042d

00001a84 <configure_extint_callbacks>:
	port_pin_set_output_level(PIN_PA03, 0);

}

void configure_extint_callbacks(void)
{
    1a84:	b508      	push	{r3, lr}
	extint_register_callback(extint_detection_callback,	2, EXTINT_CALLBACK_TYPE_DETECT);
    1a86:	4805      	ldr	r0, [pc, #20]	; (1a9c <configure_extint_callbacks+0x18>)
    1a88:	2102      	movs	r1, #2
    1a8a:	2200      	movs	r2, #0
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <configure_extint_callbacks+0x1c>)
    1a8e:	4798      	blx	r3
	extint_chan_enable_callback(2, EXTINT_CALLBACK_TYPE_DETECT);
    1a90:	2002      	movs	r0, #2
    1a92:	2100      	movs	r1, #0
    1a94:	4b03      	ldr	r3, [pc, #12]	; (1aa4 <configure_extint_callbacks+0x20>)
    1a96:	4798      	blx	r3
}
    1a98:	bd08      	pop	{r3, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	000017e1 	.word	0x000017e1
    1aa0:	000002a1 	.word	0x000002a1
    1aa4:	000002cd 	.word	0x000002cd

00001aa8 <main>:




int main (void)
{
    1aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aaa:	4647      	mov	r7, r8
    1aac:	b480      	push	{r7}
    1aae:	b084      	sub	sp, #16
	volatile char temp = 1;
    1ab0:	2301      	movs	r3, #1
    1ab2:	220f      	movs	r2, #15
    1ab4:	446a      	add	r2, sp
    1ab6:	7013      	strb	r3, [r2, #0]
	volatile uint16_t temp1 = 1;
    1ab8:	2701      	movs	r7, #1
    1aba:	aa03      	add	r2, sp, #12
    1abc:	8013      	strh	r3, [r2, #0]
	volatile uint16_t temp2 = 1;
    1abe:	220a      	movs	r2, #10
    1ac0:	446a      	add	r2, sp
    1ac2:	8013      	strh	r3, [r2, #0]
	volatile bool state = false;
    1ac4:	2600      	movs	r6, #0
    1ac6:	3308      	adds	r3, #8
    1ac8:	446b      	add	r3, sp
    1aca:	701e      	strb	r6, [r3, #0]
	
	system_init();
    1acc:	4b3b      	ldr	r3, [pc, #236]	; (1bbc <main+0x114>)
    1ace:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1ad0:	ac01      	add	r4, sp, #4
    1ad2:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    1ad4:	70a6      	strb	r6, [r4, #2]
	
	struct port_config pin;
	port_get_config_defaults(&pin);
	
	pin.direction = PORT_PIN_DIR_INPUT;
	pin.input_pull = PORT_PIN_PULL_DOWN;
    1ad6:	2302      	movs	r3, #2
    1ad8:	4698      	mov	r8, r3
    1ada:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(PIN_PA00, &pin);
    1adc:	2000      	movs	r0, #0
    1ade:	1c21      	adds	r1, r4, #0
    1ae0:	4d37      	ldr	r5, [pc, #220]	; (1bc0 <main+0x118>)
    1ae2:	47a8      	blx	r5
		
	pin.direction = PORT_PIN_DIR_INPUT;
    1ae4:	7026      	strb	r6, [r4, #0]
	pin.input_pull = PORT_PIN_PULL_DOWN;
    1ae6:	4643      	mov	r3, r8
    1ae8:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(PIN_PA01, &pin);
    1aea:	2001      	movs	r0, #1
    1aec:	1c21      	adds	r1, r4, #0
    1aee:	47a8      	blx	r5
	
	pin.direction = PORT_PIN_DIR_INPUT;
    1af0:	7026      	strb	r6, [r4, #0]
	pin.input_pull = PORT_PIN_PULL_NONE;
    1af2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA02, &pin);
    1af4:	2002      	movs	r0, #2
    1af6:	1c21      	adds	r1, r4, #0
    1af8:	47a8      	blx	r5
	
		pin.direction = PORT_PIN_DIR_OUTPUT;
    1afa:	7027      	strb	r7, [r4, #0]
		port_pin_set_config(PIN_PA03, &pin);
    1afc:	2003      	movs	r0, #3
    1afe:	1c21      	adds	r1, r4, #0
    1b00:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b02:	4b30      	ldr	r3, [pc, #192]	; (1bc4 <main+0x11c>)
    1b04:	4698      	mov	r8, r3
    1b06:	2308      	movs	r3, #8
    1b08:	4642      	mov	r2, r8
    1b0a:	6153      	str	r3, [r2, #20]
	//
	//pin.direction = PORT_PIN_DIR_INPUT;
	//pin.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(PIN_PA07, &pin);
	
	pin.direction = PORT_PIN_DIR_INPUT;
    1b0c:	7026      	strb	r6, [r4, #0]
	pin.input_pull = PORT_PIN_PULL_NONE;
    1b0e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA08, &pin);
    1b10:	2008      	movs	r0, #8
    1b12:	1c21      	adds	r1, r4, #0
    1b14:	47a8      	blx	r5
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b16:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA09, &pin);
    1b18:	2009      	movs	r0, #9
    1b1a:	1c21      	adds	r1, r4, #0
    1b1c:	47a8      	blx	r5
    1b1e:	2380      	movs	r3, #128	; 0x80
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4642      	mov	r2, r8
    1b24:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA09, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b26:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA10, &pin);
    1b28:	200a      	movs	r0, #10
    1b2a:	1c21      	adds	r1, r4, #0
    1b2c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b2e:	2380      	movs	r3, #128	; 0x80
    1b30:	00db      	lsls	r3, r3, #3
    1b32:	4642      	mov	r2, r8
    1b34:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(PIN_PA10, 1);
	
	pin.direction = PORT_PIN_DIR_INPUT;
    1b36:	7026      	strb	r6, [r4, #0]
	pin.input_pull = PORT_PIN_PULL_NONE;
    1b38:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA11, &pin);
    1b3a:	200b      	movs	r0, #11
    1b3c:	1c21      	adds	r1, r4, #0
    1b3e:	47a8      	blx	r5
	
	//pin.direction = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PA22, &pin);
	//port_pin_set_output_level(PIN_PA22, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b40:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA24, &pin);
    1b42:	2018      	movs	r0, #24
    1b44:	1c21      	adds	r1, r4, #0
    1b46:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b48:	2380      	movs	r3, #128	; 0x80
    1b4a:	045b      	lsls	r3, r3, #17
    1b4c:	4642      	mov	r2, r8
    1b4e:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA24, 0);
		
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b50:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA27, &pin);
    1b52:	201b      	movs	r0, #27
    1b54:	1c21      	adds	r1, r4, #0
    1b56:	47a8      	blx	r5
    1b58:	2380      	movs	r3, #128	; 0x80
    1b5a:	051b      	lsls	r3, r3, #20
    1b5c:	4642      	mov	r2, r8
    1b5e:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA27, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b60:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA30, &pin);
    1b62:	201e      	movs	r0, #30
    1b64:	1c21      	adds	r1, r4, #0
    1b66:	47a8      	blx	r5
    1b68:	2380      	movs	r3, #128	; 0x80
    1b6a:	05db      	lsls	r3, r3, #23
    1b6c:	4642      	mov	r2, r8
    1b6e:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA30, 0);
	
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1b70:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(PIN_PA31, &pin);
    1b72:	201f      	movs	r0, #31
    1b74:	1c21      	adds	r1, r4, #0
    1b76:	47a8      	blx	r5
    1b78:	2380      	movs	r3, #128	; 0x80
    1b7a:	061b      	lsls	r3, r3, #24
    1b7c:	4642      	mov	r2, r8
    1b7e:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b80:	70a7      	strb	r7, [r4, #2]
	config->powersave    = false;
    1b82:	70e6      	strb	r6, [r4, #3]
static void clock_output(void)
{
	/* Configure a GPIO pin as the CPU clock output */
	struct system_pinmux_config clk_out_pin;
	system_pinmux_get_config_defaults(&clk_out_pin);
	clk_out_pin.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b84:	7067      	strb	r7, [r4, #1]
	clk_out_pin.mux_position = MUX_PA22H_GCLK_IO6;
    1b86:	2307      	movs	r3, #7
    1b88:	7023      	strb	r3, [r4, #0]
	system_pinmux_pin_set_config(PIN_PA22H_GCLK_IO6, &clk_out_pin);	
    1b8a:	2016      	movs	r0, #22
    1b8c:	1c21      	adds	r1, r4, #0
    1b8e:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <main+0x120>)
    1b90:	4798      	blx	r3
	
	init_gpio();

	clock_output();
	
	delay_init();
    1b92:	4b0e      	ldr	r3, [pc, #56]	; (1bcc <main+0x124>)
    1b94:	4798      	blx	r3
	
	configure_spi_master_AD5421();		
    1b96:	4b0e      	ldr	r3, [pc, #56]	; (1bd0 <main+0x128>)
    1b98:	4798      	blx	r3
	
	configure_spi_master_ADXL();		
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <main+0x12c>)
    1b9c:	4798      	blx	r3
	
	AD5421_Init();
    1b9e:	4b0e      	ldr	r3, [pc, #56]	; (1bd8 <main+0x130>)
    1ba0:	4798      	blx	r3
	
	ADXL345_Init();
    1ba2:	4b0e      	ldr	r3, [pc, #56]	; (1bdc <main+0x134>)
    1ba4:	4798      	blx	r3
	
	configure_extint_channel();		
    1ba6:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <main+0x138>)
    1ba8:	4798      	blx	r3
	configure_extint_callbacks();	
    1baa:	4b0e      	ldr	r3, [pc, #56]	; (1be4 <main+0x13c>)
    1bac:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <main+0x140>)
    1bb0:	701f      	strb	r7, [r3, #0]
    1bb2:	f3bf 8f5f 	dmb	sy
    1bb6:	b662      	cpsie	i
		
		//state = port_pin_get_output_level(PIN_PA27);

		
		
	}	
    1bb8:	e7fe      	b.n	1bb8 <main+0x110>
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	000016f5 	.word	0x000016f5
    1bc0:	00000ec5 	.word	0x00000ec5
    1bc4:	40002800 	.word	0x40002800
    1bc8:	000016c1 	.word	0x000016c1
    1bcc:	00000e5d 	.word	0x00000e5d
    1bd0:	0000180d 	.word	0x0000180d
    1bd4:	000018e9 	.word	0x000018e9
    1bd8:	00000171 	.word	0x00000171
    1bdc:	00000209 	.word	0x00000209
    1be0:	00001a55 	.word	0x00001a55
    1be4:	00001a85 	.word	0x00001a85
    1be8:	20000008 	.word	0x20000008

00001bec <__aeabi_uidiv>:
    1bec:	2200      	movs	r2, #0
    1bee:	0843      	lsrs	r3, r0, #1
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d374      	bcc.n	1cde <__aeabi_uidiv+0xf2>
    1bf4:	0903      	lsrs	r3, r0, #4
    1bf6:	428b      	cmp	r3, r1
    1bf8:	d35f      	bcc.n	1cba <__aeabi_uidiv+0xce>
    1bfa:	0a03      	lsrs	r3, r0, #8
    1bfc:	428b      	cmp	r3, r1
    1bfe:	d344      	bcc.n	1c8a <__aeabi_uidiv+0x9e>
    1c00:	0b03      	lsrs	r3, r0, #12
    1c02:	428b      	cmp	r3, r1
    1c04:	d328      	bcc.n	1c58 <__aeabi_uidiv+0x6c>
    1c06:	0c03      	lsrs	r3, r0, #16
    1c08:	428b      	cmp	r3, r1
    1c0a:	d30d      	bcc.n	1c28 <__aeabi_uidiv+0x3c>
    1c0c:	22ff      	movs	r2, #255	; 0xff
    1c0e:	0209      	lsls	r1, r1, #8
    1c10:	ba12      	rev	r2, r2
    1c12:	0c03      	lsrs	r3, r0, #16
    1c14:	428b      	cmp	r3, r1
    1c16:	d302      	bcc.n	1c1e <__aeabi_uidiv+0x32>
    1c18:	1212      	asrs	r2, r2, #8
    1c1a:	0209      	lsls	r1, r1, #8
    1c1c:	d065      	beq.n	1cea <__aeabi_uidiv+0xfe>
    1c1e:	0b03      	lsrs	r3, r0, #12
    1c20:	428b      	cmp	r3, r1
    1c22:	d319      	bcc.n	1c58 <__aeabi_uidiv+0x6c>
    1c24:	e000      	b.n	1c28 <__aeabi_uidiv+0x3c>
    1c26:	0a09      	lsrs	r1, r1, #8
    1c28:	0bc3      	lsrs	r3, r0, #15
    1c2a:	428b      	cmp	r3, r1
    1c2c:	d301      	bcc.n	1c32 <__aeabi_uidiv+0x46>
    1c2e:	03cb      	lsls	r3, r1, #15
    1c30:	1ac0      	subs	r0, r0, r3
    1c32:	4152      	adcs	r2, r2
    1c34:	0b83      	lsrs	r3, r0, #14
    1c36:	428b      	cmp	r3, r1
    1c38:	d301      	bcc.n	1c3e <__aeabi_uidiv+0x52>
    1c3a:	038b      	lsls	r3, r1, #14
    1c3c:	1ac0      	subs	r0, r0, r3
    1c3e:	4152      	adcs	r2, r2
    1c40:	0b43      	lsrs	r3, r0, #13
    1c42:	428b      	cmp	r3, r1
    1c44:	d301      	bcc.n	1c4a <__aeabi_uidiv+0x5e>
    1c46:	034b      	lsls	r3, r1, #13
    1c48:	1ac0      	subs	r0, r0, r3
    1c4a:	4152      	adcs	r2, r2
    1c4c:	0b03      	lsrs	r3, r0, #12
    1c4e:	428b      	cmp	r3, r1
    1c50:	d301      	bcc.n	1c56 <__aeabi_uidiv+0x6a>
    1c52:	030b      	lsls	r3, r1, #12
    1c54:	1ac0      	subs	r0, r0, r3
    1c56:	4152      	adcs	r2, r2
    1c58:	0ac3      	lsrs	r3, r0, #11
    1c5a:	428b      	cmp	r3, r1
    1c5c:	d301      	bcc.n	1c62 <__aeabi_uidiv+0x76>
    1c5e:	02cb      	lsls	r3, r1, #11
    1c60:	1ac0      	subs	r0, r0, r3
    1c62:	4152      	adcs	r2, r2
    1c64:	0a83      	lsrs	r3, r0, #10
    1c66:	428b      	cmp	r3, r1
    1c68:	d301      	bcc.n	1c6e <__aeabi_uidiv+0x82>
    1c6a:	028b      	lsls	r3, r1, #10
    1c6c:	1ac0      	subs	r0, r0, r3
    1c6e:	4152      	adcs	r2, r2
    1c70:	0a43      	lsrs	r3, r0, #9
    1c72:	428b      	cmp	r3, r1
    1c74:	d301      	bcc.n	1c7a <__aeabi_uidiv+0x8e>
    1c76:	024b      	lsls	r3, r1, #9
    1c78:	1ac0      	subs	r0, r0, r3
    1c7a:	4152      	adcs	r2, r2
    1c7c:	0a03      	lsrs	r3, r0, #8
    1c7e:	428b      	cmp	r3, r1
    1c80:	d301      	bcc.n	1c86 <__aeabi_uidiv+0x9a>
    1c82:	020b      	lsls	r3, r1, #8
    1c84:	1ac0      	subs	r0, r0, r3
    1c86:	4152      	adcs	r2, r2
    1c88:	d2cd      	bcs.n	1c26 <__aeabi_uidiv+0x3a>
    1c8a:	09c3      	lsrs	r3, r0, #7
    1c8c:	428b      	cmp	r3, r1
    1c8e:	d301      	bcc.n	1c94 <__aeabi_uidiv+0xa8>
    1c90:	01cb      	lsls	r3, r1, #7
    1c92:	1ac0      	subs	r0, r0, r3
    1c94:	4152      	adcs	r2, r2
    1c96:	0983      	lsrs	r3, r0, #6
    1c98:	428b      	cmp	r3, r1
    1c9a:	d301      	bcc.n	1ca0 <__aeabi_uidiv+0xb4>
    1c9c:	018b      	lsls	r3, r1, #6
    1c9e:	1ac0      	subs	r0, r0, r3
    1ca0:	4152      	adcs	r2, r2
    1ca2:	0943      	lsrs	r3, r0, #5
    1ca4:	428b      	cmp	r3, r1
    1ca6:	d301      	bcc.n	1cac <__aeabi_uidiv+0xc0>
    1ca8:	014b      	lsls	r3, r1, #5
    1caa:	1ac0      	subs	r0, r0, r3
    1cac:	4152      	adcs	r2, r2
    1cae:	0903      	lsrs	r3, r0, #4
    1cb0:	428b      	cmp	r3, r1
    1cb2:	d301      	bcc.n	1cb8 <__aeabi_uidiv+0xcc>
    1cb4:	010b      	lsls	r3, r1, #4
    1cb6:	1ac0      	subs	r0, r0, r3
    1cb8:	4152      	adcs	r2, r2
    1cba:	08c3      	lsrs	r3, r0, #3
    1cbc:	428b      	cmp	r3, r1
    1cbe:	d301      	bcc.n	1cc4 <__aeabi_uidiv+0xd8>
    1cc0:	00cb      	lsls	r3, r1, #3
    1cc2:	1ac0      	subs	r0, r0, r3
    1cc4:	4152      	adcs	r2, r2
    1cc6:	0883      	lsrs	r3, r0, #2
    1cc8:	428b      	cmp	r3, r1
    1cca:	d301      	bcc.n	1cd0 <__aeabi_uidiv+0xe4>
    1ccc:	008b      	lsls	r3, r1, #2
    1cce:	1ac0      	subs	r0, r0, r3
    1cd0:	4152      	adcs	r2, r2
    1cd2:	0843      	lsrs	r3, r0, #1
    1cd4:	428b      	cmp	r3, r1
    1cd6:	d301      	bcc.n	1cdc <__aeabi_uidiv+0xf0>
    1cd8:	004b      	lsls	r3, r1, #1
    1cda:	1ac0      	subs	r0, r0, r3
    1cdc:	4152      	adcs	r2, r2
    1cde:	1a41      	subs	r1, r0, r1
    1ce0:	d200      	bcs.n	1ce4 <__aeabi_uidiv+0xf8>
    1ce2:	4601      	mov	r1, r0
    1ce4:	4152      	adcs	r2, r2
    1ce6:	4610      	mov	r0, r2
    1ce8:	4770      	bx	lr
    1cea:	e7ff      	b.n	1cec <__aeabi_uidiv+0x100>
    1cec:	b501      	push	{r0, lr}
    1cee:	2000      	movs	r0, #0
    1cf0:	f000 f80c 	bl	1d0c <__aeabi_idiv0>
    1cf4:	bd02      	pop	{r1, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)

00001cf8 <__aeabi_uidivmod>:
    1cf8:	2900      	cmp	r1, #0
    1cfa:	d0f7      	beq.n	1cec <__aeabi_uidiv+0x100>
    1cfc:	b503      	push	{r0, r1, lr}
    1cfe:	f7ff ff75 	bl	1bec <__aeabi_uidiv>
    1d02:	bc0e      	pop	{r1, r2, r3}
    1d04:	4342      	muls	r2, r0
    1d06:	1a89      	subs	r1, r1, r2
    1d08:	4718      	bx	r3
    1d0a:	46c0      	nop			; (mov r8, r8)

00001d0c <__aeabi_idiv0>:
    1d0c:	4770      	bx	lr
    1d0e:	46c0      	nop			; (mov r8, r8)

00001d10 <__aeabi_i2f>:
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	1e04      	subs	r4, r0, #0
    1d14:	d039      	beq.n	1d8a <__aeabi_i2f+0x7a>
    1d16:	0fc5      	lsrs	r5, r0, #31
    1d18:	d000      	beq.n	1d1c <__aeabi_i2f+0xc>
    1d1a:	4244      	negs	r4, r0
    1d1c:	1c20      	adds	r0, r4, #0
    1d1e:	f000 f83f 	bl	1da0 <__clzsi2>
    1d22:	239e      	movs	r3, #158	; 0x9e
    1d24:	1c26      	adds	r6, r4, #0
    1d26:	1a1b      	subs	r3, r3, r0
    1d28:	2b96      	cmp	r3, #150	; 0x96
    1d2a:	dc07      	bgt.n	1d3c <__aeabi_i2f+0x2c>
    1d2c:	2808      	cmp	r0, #8
    1d2e:	dd01      	ble.n	1d34 <__aeabi_i2f+0x24>
    1d30:	3808      	subs	r0, #8
    1d32:	4084      	lsls	r4, r0
    1d34:	0264      	lsls	r4, r4, #9
    1d36:	0a64      	lsrs	r4, r4, #9
    1d38:	b2d8      	uxtb	r0, r3
    1d3a:	e01e      	b.n	1d7a <__aeabi_i2f+0x6a>
    1d3c:	2b99      	cmp	r3, #153	; 0x99
    1d3e:	dd0a      	ble.n	1d56 <__aeabi_i2f+0x46>
    1d40:	2205      	movs	r2, #5
    1d42:	1c21      	adds	r1, r4, #0
    1d44:	1a12      	subs	r2, r2, r0
    1d46:	40d1      	lsrs	r1, r2
    1d48:	1c0a      	adds	r2, r1, #0
    1d4a:	1c01      	adds	r1, r0, #0
    1d4c:	311b      	adds	r1, #27
    1d4e:	408e      	lsls	r6, r1
    1d50:	1e71      	subs	r1, r6, #1
    1d52:	418e      	sbcs	r6, r1
    1d54:	4316      	orrs	r6, r2
    1d56:	2805      	cmp	r0, #5
    1d58:	dd01      	ble.n	1d5e <__aeabi_i2f+0x4e>
    1d5a:	1f42      	subs	r2, r0, #5
    1d5c:	4096      	lsls	r6, r2
    1d5e:	4c0f      	ldr	r4, [pc, #60]	; (1d9c <__aeabi_i2f+0x8c>)
    1d60:	4034      	ands	r4, r6
    1d62:	0772      	lsls	r2, r6, #29
    1d64:	d004      	beq.n	1d70 <__aeabi_i2f+0x60>
    1d66:	220f      	movs	r2, #15
    1d68:	4016      	ands	r6, r2
    1d6a:	2e04      	cmp	r6, #4
    1d6c:	d000      	beq.n	1d70 <__aeabi_i2f+0x60>
    1d6e:	3404      	adds	r4, #4
    1d70:	0162      	lsls	r2, r4, #5
    1d72:	d40e      	bmi.n	1d92 <__aeabi_i2f+0x82>
    1d74:	01a4      	lsls	r4, r4, #6
    1d76:	0a64      	lsrs	r4, r4, #9
    1d78:	b2d8      	uxtb	r0, r3
    1d7a:	0264      	lsls	r4, r4, #9
    1d7c:	05c0      	lsls	r0, r0, #23
    1d7e:	0a64      	lsrs	r4, r4, #9
    1d80:	07ed      	lsls	r5, r5, #31
    1d82:	4304      	orrs	r4, r0
    1d84:	432c      	orrs	r4, r5
    1d86:	1c20      	adds	r0, r4, #0
    1d88:	bd70      	pop	{r4, r5, r6, pc}
    1d8a:	2500      	movs	r5, #0
    1d8c:	2000      	movs	r0, #0
    1d8e:	2400      	movs	r4, #0
    1d90:	e7f3      	b.n	1d7a <__aeabi_i2f+0x6a>
    1d92:	4b02      	ldr	r3, [pc, #8]	; (1d9c <__aeabi_i2f+0x8c>)
    1d94:	401c      	ands	r4, r3
    1d96:	239f      	movs	r3, #159	; 0x9f
    1d98:	1a1b      	subs	r3, r3, r0
    1d9a:	e7eb      	b.n	1d74 <__aeabi_i2f+0x64>
    1d9c:	fbffffff 	.word	0xfbffffff

00001da0 <__clzsi2>:
    1da0:	211c      	movs	r1, #28
    1da2:	2301      	movs	r3, #1
    1da4:	041b      	lsls	r3, r3, #16
    1da6:	4298      	cmp	r0, r3
    1da8:	d301      	bcc.n	1dae <__clzsi2+0xe>
    1daa:	0c00      	lsrs	r0, r0, #16
    1dac:	3910      	subs	r1, #16
    1dae:	0a1b      	lsrs	r3, r3, #8
    1db0:	4298      	cmp	r0, r3
    1db2:	d301      	bcc.n	1db8 <__clzsi2+0x18>
    1db4:	0a00      	lsrs	r0, r0, #8
    1db6:	3908      	subs	r1, #8
    1db8:	091b      	lsrs	r3, r3, #4
    1dba:	4298      	cmp	r0, r3
    1dbc:	d301      	bcc.n	1dc2 <__clzsi2+0x22>
    1dbe:	0900      	lsrs	r0, r0, #4
    1dc0:	3904      	subs	r1, #4
    1dc2:	a202      	add	r2, pc, #8	; (adr r2, 1dcc <__clzsi2+0x2c>)
    1dc4:	5c10      	ldrb	r0, [r2, r0]
    1dc6:	1840      	adds	r0, r0, r1
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	02020304 	.word	0x02020304
    1dd0:	01010101 	.word	0x01010101
	...

00001ddc <__libc_init_array>:
    1ddc:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <__libc_init_array+0x3c>)
    1dde:	b570      	push	{r4, r5, r6, lr}
    1de0:	2500      	movs	r5, #0
    1de2:	1c1e      	adds	r6, r3, #0
    1de4:	4c0d      	ldr	r4, [pc, #52]	; (1e1c <__libc_init_array+0x40>)
    1de6:	1ae4      	subs	r4, r4, r3
    1de8:	10a4      	asrs	r4, r4, #2
    1dea:	42a5      	cmp	r5, r4
    1dec:	d004      	beq.n	1df8 <__libc_init_array+0x1c>
    1dee:	00ab      	lsls	r3, r5, #2
    1df0:	58f3      	ldr	r3, [r6, r3]
    1df2:	4798      	blx	r3
    1df4:	3501      	adds	r5, #1
    1df6:	e7f8      	b.n	1dea <__libc_init_array+0xe>
    1df8:	f000 f86c 	bl	1ed4 <_init>
    1dfc:	4b08      	ldr	r3, [pc, #32]	; (1e20 <__libc_init_array+0x44>)
    1dfe:	2500      	movs	r5, #0
    1e00:	1c1e      	adds	r6, r3, #0
    1e02:	4c08      	ldr	r4, [pc, #32]	; (1e24 <__libc_init_array+0x48>)
    1e04:	1ae4      	subs	r4, r4, r3
    1e06:	10a4      	asrs	r4, r4, #2
    1e08:	42a5      	cmp	r5, r4
    1e0a:	d004      	beq.n	1e16 <__libc_init_array+0x3a>
    1e0c:	00ab      	lsls	r3, r5, #2
    1e0e:	58f3      	ldr	r3, [r6, r3]
    1e10:	4798      	blx	r3
    1e12:	3501      	adds	r5, #1
    1e14:	e7f8      	b.n	1e08 <__libc_init_array+0x2c>
    1e16:	bd70      	pop	{r4, r5, r6, pc}
    1e18:	00001ee0 	.word	0x00001ee0
    1e1c:	00001ee0 	.word	0x00001ee0
    1e20:	00001ee0 	.word	0x00001ee0
    1e24:	00001ee4 	.word	0x00001ee4

00001e28 <memcpy>:
    1e28:	2300      	movs	r3, #0
    1e2a:	b510      	push	{r4, lr}
    1e2c:	4293      	cmp	r3, r2
    1e2e:	d003      	beq.n	1e38 <memcpy+0x10>
    1e30:	5ccc      	ldrb	r4, [r1, r3]
    1e32:	54c4      	strb	r4, [r0, r3]
    1e34:	3301      	adds	r3, #1
    1e36:	e7f9      	b.n	1e2c <memcpy+0x4>
    1e38:	bd10      	pop	{r4, pc}
    1e3a:	0000      	movs	r0, r0
    1e3c:	42000000 	.word	0x42000000
    1e40:	42000400 	.word	0x42000400
    1e44:	42000800 	.word	0x42000800
    1e48:	42000c00 	.word	0x42000c00
    1e4c:	42001000 	.word	0x42001000
    1e50:	43000400 	.word	0x43000400

00001e54 <_tcc_intflag>:
    1e54:	00000001 00000002 00000004 00000008     ................
    1e64:	00001000 00002000 00004000 00008000     ..... ...@......
    1e74:	00010000 00020000 00040000 00080000     ................
    1e84:	0b0a0908 00000d0c 00000f6e 00000f6a     ........n...j...
    1e94:	00000f6a 00000fcc 00000fcc 00000f84     j...............
    1ea4:	00000f74 00000f8a 00000fba 000011b8     t...............
    1eb4:	00001198 00001198 00001232 000011aa     ........2.......
    1ec4:	000011c6 0000119c 000011d4 00001216     ................

00001ed4 <_init>:
    1ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1eda:	bc08      	pop	{r3}
    1edc:	469e      	mov	lr, r3
    1ede:	4770      	bx	lr

00001ee0 <__init_array_start>:
    1ee0:	000000dd 	.word	0x000000dd

00001ee4 <_fini>:
    1ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1eea:	bc08      	pop	{r3}
    1eec:	469e      	mov	lr, r3
    1eee:	4770      	bx	lr

00001ef0 <__fini_array_start>:
    1ef0:	000000b5 	.word	0x000000b5
